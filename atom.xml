<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jieker&#39;s Blog</title>
  
  <subtitle>Jiker</subtitle>
  <link href="https://jie-blog.icu/atom.xml" rel="self"/>
  
  <link href="https://jie-blog.icu/"/>
  <updated>2020-09-02T08:30:00.686Z</updated>
  <id>https://jie-blog.icu/</id>
  
  <author>
    <name>Zhang Junjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>servlet-3</title>
    <link href="https://jie-blog.icu/posts/servlet-3/"/>
    <id>https://jie-blog.icu/posts/servlet-3/</id>
    <published>2020-09-02T08:11:45.000Z</published>
    <updated>2020-09-02T08:30:00.686Z</updated>
    
    <content type="html"><![CDATA[<p><a name="Z4U3K"></a></p><h1 id="中文乱码问题解决"><a class="markdownIt-Anchor" href="#中文乱码问题解决"></a> 中文乱码问题解决</h1><p>通过未经配置过的Tomcat来Post表单，会在控制台出现中文乱码问题。<br /><a name="Syqyd"></a></p><h2 id="get不会乱码"><a class="markdownIt-Anchor" href="#get不会乱码"></a> Get不会乱码</h2><p>Get方式发送请求在请求协议包到达服务端后，由Tomcat负责解析参数内容，Tomcat默认采用UTF-8进行解析，服务端接收数据将不会产生中文变乱码的问题。<br /><a name="V416i"></a></p><h2 id="post乱码原因"><a class="markdownIt-Anchor" href="#post乱码原因"></a> Post乱码原因</h2><p>Post发送请求在请求协议包到达服务器后，请求体中的内容由请求对象负责解析，而请求对象默认采用ISO编码进行解析，所以在服务端会导致乱码。<br /><a name="KDuTq"></a></p><h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h2><p>在请求对象解析请求体中的内容之前设置解析字符集为UTF-8。<br />在doPost中加入：<code>req``.setCharacterEncoding(``**&quot;UTF-8&quot;**``)``;</code>语句即可，但是他只能解决POST中的乱码，对其他方式的乱码没有效果，兼具的方法可以直接操作返回的字符串，将乱码的字符串解码为byte数组，再将byte数组使用utf-8重新组成字符串，也可以在配置文件中更改详见：<a href="https://jingyan.baidu.com/article/c910274b39fbdc8d371d2d23.html">https://jingyan.baidu.com/article/c910274b39fbdc8d371d2d23.html</a><br /><a name="9wd6W"></a></p><h1 id="向客户端发送数据"><a class="markdownIt-Anchor" href="#向客户端发送数据"></a> 向客户端发送数据</h1><p>ServletResponse接口有一个方法getWriter，用于获取到一个输出流对象PrintWriter，该输出流对象是专门用于客户端浏览器中输出字符数据的，称为标准输出流。<br /><a name="q1JW3"></a></p><h2 id="write和print区别"><a class="markdownIt-Anchor" href="#write和print区别"></a> write和print区别</h2><ul><li>print()和println()是JspWriter类中定义的方法，write()则是Writer类中定义的。</li><li>print()和println()方法可将各种类型的数据转换成字符串的形式输出，而write()方法只能输出字符、字符数组和字符串等与字符相关的数据。</li><li>如果字符串对象的值为null，print()和println()方法将输出内容为“null”的字符串，而write()方法则是抛出NullPointerException异常。</li><li>write()方法只能写入字符串或unicode码写入到响应体，print()任可以将各种类型（包括Object）的数据通过默认编码转换成bytes字节形式，这些字节都通过write(int c)方法被输出。如果写入一个数字使用write()方法，系统会将数字转换为对应的unicode码写入，write（50）会被打印出&quot;2&quot;。<br /><a name="bgwjI"></a></li></ul><h2 id="print和println区别"><a class="markdownIt-Anchor" href="#print和println区别"></a> print和println区别：</h2><p>println()虽然看似是换行，但转成网页之后，这种换行被认为是空格，所以输出的仍然是一行，用空格分隔，但右键点击页面查看源代码时，能看出换行起作用了。<br />所以在页面上需要换行的话，需要用<code>&lt;br/&gt;</code>。<br /><a name="8gdch"></a></p><h2 id="编码问题"><a class="markdownIt-Anchor" href="#编码问题"></a> 编码问题</h2><p>contentType是指body的内容格式，比如xml，json等。<br />characterEncoding指的是body的编码格式，比如utf-8,gbk等。<br />setCharacterEncoding(…) 方法设置的编码格式最终会追加到contentType这个key的值上，比如 “Content-Type”= &quot;text/html;charset=utf-8”。也就是说在设置contentType的同时，也可以设置内容的编码格式。<br />如果未设置编码格式，比如setContentType（“text/html”），那么可以通过setCharacterEncoding（“utf-8”） 方法来追加。<br />contentType对应的就是header里的一个Content-Type，就是一个键值对，http协议规定了很多键值对，每个键值对起不同的作用。<br />注意：两种方法都要在printWriter使用之前使用<br /><a name="61q6G"></a></p><h3 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        <span class="comment">//方法一：</span></span><br><span class="line">        <span class="comment">//response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二：</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出文字</span></span><br><span class="line">        response.getWriter().append(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="comment">//获取标准输出流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">//输出文字</span></span><br><span class="line">        out.println(<span class="string">&quot;你好世界！&quot;</span>);</span><br><span class="line">        out.write(<span class="string">&quot;你好中国！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="wEOTJ"></a></p><h3 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582185196196-d435c586-e93c-48b4-a54b-4ac0b9460357.png#align=left&amp;display=inline&amp;height=45&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=45&amp;originWidth=292&amp;size=2605&amp;status=done&amp;style=none&amp;width=292" alt="image.png" /><br /><a name="tkqHS"></a></p><h2 id="插队问题"><a class="markdownIt-Anchor" href="#插队问题"></a> 插队问题：</h2><p>详见：<a href="https://blog.csdn.net/weixin_38958597/article/details/82693273">https://blog.csdn.net/weixin_38958597/article/details/82693273</a><br /><a name="mltEg"></a></p><h1 id="请求转发与重定向"><a class="markdownIt-Anchor" href="#请求转发与重定向"></a> 请求转发与重定向</h1><p>通过HttpServletRequest获取到RequestDispactcher对象的forward方法，可以完成请求转发功能。而通过HttpServletResponse和SendRedirect方法，可以完成重定向。<br /><a name="GQWw6"></a></p><h2 id="转发"><a class="markdownIt-Anchor" href="#转发"></a> 转发：</h2><p>由服务器端进行的页面跳转<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582186850829-1df4bd05-cc0d-4ca4-a952-e3358e3a40d1.png#align=left&amp;display=inline&amp;height=525&amp;margin=%5Bobject%20Object%5D&amp;originHeight=525&amp;originWidth=787&amp;size=0&amp;status=done&amp;style=none&amp;width=787" alt="" /><br /><a name="foQbo"></a></p><h3 id="转发方式"><a class="markdownIt-Anchor" href="#转发方式"></a> 转发方式：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582188030551-f9a7ecbc-913d-4a2f-9978-304e7d5b93db.png#align=left&amp;display=inline&amp;height=89&amp;margin=%5Bobject%20Object%5D&amp;originHeight=89&amp;originWidth=782&amp;size=0&amp;status=done&amp;style=none&amp;width=782" alt="" /><br /><a name="D9y7G"></a></p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><ol><li>请求所转发到的资源中可以直接获取到请求中所携带的数据。<br /></li><li>只有1次请求，收到一次响应。</li><li>浏览器地址栏显示为用户所提交的请求路径。</li><li>只能跳转到当前应用的资源中。<br /><a name="ZNGR9"></a></li></ol><h3 id="代码演示-2"><a class="markdownIt-Anchor" href="#代码演示-2"></a> 代码演示：</h3><p><a name="yEHqm"></a></p><h4 id="someservlet"><a class="markdownIt-Anchor" href="#someservlet"></a> SomeServlet:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交内容</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(strAge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向域中添加内容</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转发请求</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/OtherServlet&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="z1dzE"></a></p><h4 id="otherservlet"><a class="markdownIt-Anchor" href="#otherservlet"></a> OtherServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String name = names.nextElement();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> String(req.getParameter(name).getBytes(<span class="string">&quot;ISO_8859_1&quot;</span>), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;OtherServlet is Running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="tGkao"></a></p><h4 id="结果演示-2"><a class="markdownIt-Anchor" href="#结果演示-2"></a> 结果演示：</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582189968967-ca6c372e-eaec-4e7c-9eaa-a79f898916de.png#align=left&amp;display=inline&amp;height=137&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=137&amp;originWidth=414&amp;size=10917&amp;status=done&amp;style=none&amp;width=414" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582189978127-435e03a0-3e20-48cd-93b5-f62ed148f5f2.png#align=left&amp;display=inline&amp;height=73&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=73&amp;originWidth=223&amp;size=10092&amp;status=done&amp;style=none&amp;width=223" alt="image.png" /><br /><a name="SYDwI"></a></p><h2 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向：</h2><p>由浏览器端进行的页面跳转<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582186867780-08426907-60b1-4939-a1ec-676ad04cce47.png#align=left&amp;display=inline&amp;height=530&amp;margin=%5Bobject%20Object%5D&amp;originHeight=530&amp;originWidth=790&amp;size=0&amp;status=done&amp;style=none&amp;width=790" alt="" /><br /><a name="gXMun"></a></p><h3 id="定向方式"><a class="markdownIt-Anchor" href="#定向方式"></a> 定向方式</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582195661951-8b7a3159-8306-4c70-8806-6943086cb2d1.png#align=left&amp;display=inline&amp;height=73&amp;margin=%5Bobject%20Object%5D&amp;originHeight=96&amp;originWidth=702&amp;size=0&amp;status=done&amp;style=none&amp;width=531" alt="" /><br /><a name="Pkp8Y"></a></p><h3 id="特点-2"><a class="markdownIt-Anchor" href="#特点-2"></a> 特点</h3><ol><li>请求所转发到的资源中不能直接获取到请求中所携带的数据。</li><li>两次请求，两次响应</li><li>浏览器地址栏显示的为重定向的请求路径，而非用户提交请求的路径。正因如此，重定向可以防止表单重复提交。</li><li>重定向不仅可以跳转到当前应用的其他资源，也可以跳转到其他应用中资源。<br /><a name="IvZCJ"></a></li></ol><h3 id="代码演示-3"><a class="markdownIt-Anchor" href="#代码演示-3"></a> 代码演示：</h3><p><a name="CwKxk"></a></p><h4 id="someservlet-2"><a class="markdownIt-Anchor" href="#someservlet-2"></a> SomeServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交内容</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(strAge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向域中添加内容</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/OtherServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="qtsV6"></a></p><h4 id="otherservlet-2"><a class="markdownIt-Anchor" href="#otherservlet-2"></a> OtherServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(req.getAttribute(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String name = names.nextElement();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> String(req.getParameter(name).getBytes(<span class="string">&quot;ISO_8859_1&quot;</span>), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;OtherServlet is Running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="lxTvX"></a></p><h4 id="结果演示-3"><a class="markdownIt-Anchor" href="#结果演示-3"></a> 结果演示：</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582197290791-764bf3c7-74f1-40a4-87b5-ed2ba5ca26e1.png#align=left&amp;display=inline&amp;height=69&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=137&amp;originWidth=481&amp;size=12272&amp;status=done&amp;style=none&amp;width=240.5" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582197271112-9e309991-3308-4d00-8d4d-7ac571c92e9f.png#align=left&amp;display=inline&amp;height=43&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=54&amp;originWidth=182&amp;size=6076&amp;status=done&amp;style=none&amp;width=145" alt="image.png" /><br />显然是获取不到数据的。<br /><a name="cRD19"></a></p><h3 id="接收数据的重定向"><a class="markdownIt-Anchor" href="#接收数据的重定向"></a> 接收数据的重定向</h3><p>如果想要传递数据应该如此修改：<br />注意编码<br /><a name="U8aoc"></a></p><h4 id="someservlet-3"><a class="markdownIt-Anchor" href="#someservlet-3"></a> SomeServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交内容</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(strAge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向域中添加内容</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/OtherServlet?name=&quot;</span> + URLEncoder.encode(name, <span class="string">&quot;UTF-8&quot;</span>) + <span class="string">&quot;&amp;age=&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="FzI8z"></a></p><h4 id="otherservlet-3"><a class="markdownIt-Anchor" href="#otherservlet-3"></a> OtherServlet:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String name = names.nextElement();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> String(req.getParameter(name).getBytes(<span class="string">&quot;ISO_8859_1&quot;</span>), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;OtherServlet is Running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="VtsHB"></a></p><h2 id="对比分析"><a class="markdownIt-Anchor" href="#对比分析"></a> 对比分析：</h2><p><a name="V3vkT"></a></p><h3 id="重定向和转发的区别"><a class="markdownIt-Anchor" href="#重定向和转发的区别"></a> 重定向和转发的区别</h3><table><thead><tr><th><strong>区别</strong></th><th><strong>转发forward()</strong></th><th><strong>重定向sendRedirect()</strong></th></tr></thead><tbody><tr><td><strong>根目录</strong></td><td>包含项目访问地址</td><td>没有项目访问地址</td></tr><tr><td><strong>地址栏</strong></td><td>不会发生变化</td><td>会发生变化</td></tr><tr><td><strong>哪里跳转</strong></td><td>服务器端进行的跳转</td><td>浏览器端进行的跳转</td></tr><tr><td><strong>请求域中数据</strong></td><td>不会丢失</td><td>会丢失</td></tr></tbody></table><p><a name="7q88Y"></a></p><h3 id="个人观点"><a class="markdownIt-Anchor" href="#个人观点"></a> 个人观点</h3><p>我个人认为这两种的区别就是合作与分工的区别，转发是合作处理，将自己处理好的东西递交给另一个Servlet进行处理；重定向是分工处理，自己处理好以后让下一个Servlet处理。<br /><a name="CFqbw"></a></p><h3 id="自问自答"><a class="markdownIt-Anchor" href="#自问自答"></a> 自问自答</h3><p>问：什么时候使用转发，什么时候使用重定向？<br /></p><ol><li>若需要跳转到其他应用选择重定向。</li><li>若是处理表单数据的Servlet要跳转到其他Servlet选择重定向，防止表单重复提交。</li><li>若对某一请求进行处理的Servlet的执行需要消耗大量的服务器资源（CPU、内存）选择重定向</li><li>其他情况选择转发。</li></ol><p><a name="wD6kA"></a></p><h1 id="include和forward区别"><a class="markdownIt-Anchor" href="#include和forward区别"></a> include和forward区别</h1><p>RequestDispatcher只有两个方法：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582267822414-492cd611-a462-414e-9184-f441b6e21e58.png#align=left&amp;display=inline&amp;height=86&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=114&amp;originWidth=940&amp;size=21061&amp;status=done&amp;style=none&amp;width=708" alt="image.png" /><br />这两个主要表现在标准输出流的开启时间不同：</p><ul><li>forward是把一个request从一个Servlet传递到另一个Server上的资源（servlet、JSP或者HTML）。表示转发，则控制权也同时交给了另一个组件，所以最终由另一组件返回响应。所以此时写入到out的数据是不会写入到客户端浏览器中的。</li><li>include是把资源（servlet、JSP或者HTML）文件放在response中。表示包含，则控制权还在自己身上，所以最终还是由自己返回响应。<br /><a name="QUX5z"></a></li></ul><h2 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例：</h2><p><a name="cBhYs"></a></p><h3 id="forward"><a class="markdownIt-Anchor" href="#forward"></a> forward:</h3><p>Servlet1：out.println(“1”);<br />Servlet2：out.println(“2”);<br />Servlet1调用forward会跳转到Servlet2输出2<br /><a name="PQquu"></a></p><h4 id="图解"><a class="markdownIt-Anchor" href="#图解"></a> 图解</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582282066507-65009087-d172-4128-b8fc-319b2bb8c03b.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;originHeight=540&amp;originWidth=619&amp;size=0&amp;status=done&amp;style=none&amp;width=619" alt="" /><br /><a name="yASc5"></a></p><h3 id="include"><a class="markdownIt-Anchor" href="#include"></a> include:</h3><p>Servlet1：out.println(“1”);<br />Servlet2：out.println(“2”);<br />Servlet1调用include会留在Servlet1输出2后输出1<br /><a name="Xv8ME"></a></p><h4 id="图解-2"><a class="markdownIt-Anchor" href="#图解-2"></a> 图解</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582282101260-bb2574d1-ae5f-4b9a-a6ba-3231db70a853.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;originHeight=540&amp;originWidth=640&amp;size=0&amp;status=done&amp;style=none&amp;width=640" alt="" /><br /><a name="pK22R"></a></p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论：</h2><p>使用forward进行请求转发时，使用forward的Servlet不应向Response中写入数据。若写入数据，则应使用include进行转发。<br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;Z4U3K&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;中文乱码问题解决&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#中文乱码问题解决&quot;&gt;&lt;/a&gt; 中文乱码问题解决&lt;/h1&gt;
&lt;p&gt;通过未经配置过的Tomcat来Post表单，会在控制</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>servlet-2</title>
    <link href="https://jie-blog.icu/posts/servlet-2/"/>
    <id>https://jie-blog.icu/posts/servlet-2/</id>
    <published>2020-09-02T08:10:21.000Z</published>
    <updated>2020-09-02T08:30:01.469Z</updated>
    
    <content type="html"><![CDATA[<p><a name="yri3x"></a></p><h1 id="dopost和doget"><a class="markdownIt-Anchor" href="#dopost和doget"></a> doPost和doGet</h1><p>要将doPst和doGet，首先要分析POST和GET的区别<br /><a name="Wnf2s"></a></p><h2 id="post和get"><a class="markdownIt-Anchor" href="#post和get"></a> POST和GET</h2><p>GET - 从指定的资源请求数据。<br />POST - 向指定的资源提交要被处理的数据<br /><a name="T25KY"></a></p><h3 id="get"><a class="markdownIt-Anchor" href="#get"></a> GET</h3><p>请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：<br />/test/demo_form.asp?name1=value1&amp;name2=value2<br />有关 GET 请求的其他一些注释：</p><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据<br /><a name="dq0Zo"></a></li></ul><h3 id="post"><a class="markdownIt-Anchor" href="#post"></a> POST</h3><p>请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：<br />POST /test/demo_form.asp HTTP/1.1<br />Host: w3schools.com<br />name1=value1&amp;name2=value2<br />有关 POST 请求的其他一些注释：</p><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求<br /><a name="51hmv"></a></li></ul><h3 id="比较post和get"><a class="markdownIt-Anchor" href="#比较post和get"></a> 比较POST和GET</h3><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">GET</th><th style="text-align:left">POST</th></tr></thead><tbody><tr><td style="text-align:left">后退按钮/刷新</td><td style="text-align:left">无害</td><td style="text-align:left">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td style="text-align:left">书签</td><td style="text-align:left">可收藏为书签</td><td style="text-align:left">不可收藏为书签</td></tr><tr><td style="text-align:left">缓存</td><td style="text-align:left">能被缓存</td><td style="text-align:left">不能缓存</td></tr><tr><td style="text-align:left">编码类型</td><td style="text-align:left">application/x-www-form-urlencoded</td><td style="text-align:left">application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td style="text-align:left">历史</td><td style="text-align:left">参数保留在浏览器历史中。</td><td style="text-align:left">参数不会保存在浏览器历史中。</td></tr><tr><td style="text-align:left">对数据长度的限制</td><td style="text-align:left">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td style="text-align:left">无限制。</td></tr><tr><td style="text-align:left">对数据类型的限制</td><td style="text-align:left">只允许 ASCII 字符。</td><td style="text-align:left">没有限制。也允许二进制数据。</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。<br />在发送密码或其他敏感信息时绝不要使用 GET ！</td><td style="text-align:left">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td style="text-align:left">可见性</td><td style="text-align:left">数据在 URL 中对所有人都是可见的。</td><td style="text-align:left">数据不会显示在 URL 中。</td></tr></tbody></table><p><a name="ljFU0"></a></p><h2 id="dopost和doget-2"><a class="markdownIt-Anchor" href="#dopost和doget-2"></a> doPost和doGet</h2><p>这两种方法有本质的区别，get只有一个流，参数附加在url后，大小个数有严格限制且只能是字符串。post的参数是通过另外的流传递的，不通过url，所以可以很大，也可以传递二进制数据，如文件的上传。 在servlet开发中，以doGet()和doPost()分别处理get和post方法。 <br /><a name="cilaQ"></a></p><h3 id="doget"><a class="markdownIt-Anchor" href="#doget"></a> doGet</h3><p>GET 调用用于获取服务器信息，并将其做为响应返回给客户端。当经由Web浏览器或通过HTML、JSP直接访问Servlet的URL时，一般用GET调用。 GET调用在URL里显示正传送给SERVLET的数据，这在系统的安全方面可能带来一些问题，比如用户登录，表单里的用户名和密码需要发送到服务器端， 若使用Get调用，就会在浏览器的URL中显示用户名和密码。<br /><a name="vbrW3"></a></p><h3 id="dopost"><a class="markdownIt-Anchor" href="#dopost"></a> doPost</h3><p>它用于客户端把数据传送到服务器端，也会有副作用。但好处是可以隐藏传送给服务器的任何数据。Post适合发送大量的数据。<br /><a name="XnJUY"></a></p><h3 id="调用原理及其他问题"><a class="markdownIt-Anchor" href="#调用原理及其他问题"></a> 调用原理及其他问题</h3><p>当发出客户端请求的时候，调用service 方法并传递一个请求和响应对象。Servlet首先判断该请求是GET 操作还是POST 操作。然后它调用下面的一个方法：doGet 或 doPost。因此可以把方法写在doGet()方法中,在doPost()方法中调用执行,这样,无论你提交的是post还是get方法都可以执行。<br />servlet代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,ServletException </span>&#123;</span><br><span class="line">      request.setCaracterEncoding(“gb2312”);<span class="comment">//汉字转码</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">&quot;The Parameter are ：&quot;</span>+request.getParameter(<span class="string">&quot;name1&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,ServletException </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.goGet(request,response);<span class="comment">//调用doGet()方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="zazbc"></a></p><h4 id="安全"><a class="markdownIt-Anchor" href="#安全"></a> 安全</h4><p>GET调用在URL里显示正传送给SERVLET的数据，这在系统的安全方面可能带来问题，例如用户名和密码等<br />POST就可以在一定程度上解决此类问题<br /><a name="787dx"></a></p><h4 id="服务器接收方式"><a class="markdownIt-Anchor" href="#服务器接收方式"></a> 服务器接收方式</h4><p>服务器随机接受GET方法的数据，一旦断电等原因，服务器也不知道信息是否发送完毕<br />而POST方法，服务器先接受数据信息的长度，然后再接受数据<br /><a name="7Fu2q"></a></p><h4 id="form运行方式"><a class="markdownIt-Anchor" href="#form运行方式"></a> form运行方式</h4><p>当form框里面的method为get时，执行doGet方法<br />当form框里面的method为post时，执行doPost方法<br /><a name="pHQkR"></a></p><h4 id="容量限制"><a class="markdownIt-Anchor" href="#容量限制"></a> 容量限制</h4><p>GET方法后面的信息量字节大小不要超过1.3K，而Post则没有限制<br /><a name="K4mlX"></a></p><h2 id="区别总结"><a class="markdownIt-Anchor" href="#区别总结"></a> 区别总结</h2><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br />而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<br />1. GET与POST都有自己的语义，不能随便混用。<br />2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。<br />3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。<br /><a name="KEegm"></a></p><h1 id="request和response"><a class="markdownIt-Anchor" href="#request和response"></a> Request和Response</h1><p>Web服务器收到客户端的http请求，会针对每一次请求，分别创建一个用于代表请求的request对象、和代表响应的response对象。<br />当需要获取客户机提交过来的数据时，用request对象， 当需要向客户机输出数据，用esponse对象。<br /><a name="iAeH7"></a></p><h2 id="请求响应流程"><a class="markdownIt-Anchor" href="#请求响应流程"></a> 请求响应流程</h2><ol><li>浏览器发送请求</li><li>服务器接收请求,创建两个对象(request和response),将请求的信息封装request对象</li><li>找到对应的servlet,将这两个对象传递给servlet</li><li>Servlet收到请求,执行service方法,处理自己的业务逻辑,生成动态的内容,将内容返回给服务器</li><li>服务器收到内容之后,进行拆分,生成响应信息,返回给浏览器</li><li>浏览器解析相应信息<br /><a name="e27Mx"></a></li></ol><h2 id="response"><a class="markdownIt-Anchor" href="#response"></a> Response</h2><p><a name="L0mvl"></a></p><h3 id="操作响应行"><a class="markdownIt-Anchor" href="#操作响应行"></a> 操作响应行</h3><p>格式:协议/版本 状态码 状态码说明<br />例如:HTTP/1.1 200 OK<br />在http响应行中，包括协议,版本号,以及有一个很重要的值，它叫做响应状态码.响应行中我们主要就是操作这些状态码,它可以有五种类型取值:<br />100-199<br />200-299<br />300-399<br />400-499<br />500-599<br /><a name="rCsDh"></a></p><h4 id="常用状态码"><a class="markdownIt-Anchor" href="#常用状态码"></a> 常用状态码：</h4><ul><li>200：请求成功（其后是对GET和POST请求的应答文档。）</li><li>302：所请求的页面已经临时转移至新的url。(重定向)(配合location响应头使用)</li><li>304：未按预期修改文档。(让浏览器读缓存)客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since(什么时候修改的))头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</li><li>404：没有找到文件或目录。(用户操作错误)</li><li>405：请求中指定的方法不被允许</li><li>500：请求未完成。服务器遇到不可预知的情况(代码错误)</li><li>504：网关错误.<br /><a name="D3QL8"></a></li></ul><h4 id="httpservletresponse操作状态码方法"><a class="markdownIt-Anchor" href="#httpservletresponse操作状态码方法"></a> HttpServletResponse操作状态码方法：</h4><p>void setStatus(int sc): 设置状态代码.针对于非错误的状态码<br />例如:setstatus （200）<br />void sendError(int status,String msg) throws IOException 设置错误状态码及信息<br />例如:response.sendError(404);报404错误<br />response.sendError(404,一不小心走丢了…);报错误并且有错误信息<br /><a name="EU1O2"></a></p><h3 id="response操作响应头"><a class="markdownIt-Anchor" href="#response操作响应头"></a> response操作响应头</h3><p>http响应头的格式是 key/value的格式，可以有多个value值，以”,”分开。<br />例如:<br />Content-Encoding: gzip<br />Content-Length: 123<br />Content-Language: zh-cn<br />Content-Type: text/html; charset=GB2312<br />Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT<br /><a name="cBmHI"></a></p><h4 id="操作响应头-api"><a class="markdownIt-Anchor" href="#操作响应头-api"></a> 操作响应头 API</h4><p>public void setHeader(String name,String value)<br />用给定名称和值设置响应头。如果已经设置了头，则新值将重写以前的值(设置字符串形式的响应头 注意:若设置过,会覆盖)<br />public void addHeader(String name, String value)<br />用给定名称和值添加响应头。此方法允许响应头有多个值(追加字符串形式的响应头 注意:若没有设置过则设置,若设置过则追加)<br />public void setIntHeader(String name, int value)<br />用给定名称和整数值设置响应头。如果已经设置了头，则新值将重写以前的值。(设置整型的响应头)<br />public void addIntHeader(String name, int value)<br />用给定名称和整数值添加响应头。此方法允许响应头有多个值。(添加整型的响应头)<br />public voidsetDateHeader(String name, long date)<br />用给定名称和日期值设置响应头。该日期根据距历元时间的毫秒数指定。如果已经设置了头，则新值将重写以前的值。(设置时间类型的响应头)<br />public void addDateHeader(String key, long date)<br />用给定名称和日期值添加响应头。该日期根据距历元时间的毫秒数指定。此方法允许响应头有多个值。(添加时间类型的响应头)<br /><a name="hyggG"></a></p><h2 id="request"><a class="markdownIt-Anchor" href="#request"></a> Request</h2><p>HttpServletRequest对象用于封装http请求，对于http请求它有三部分组成，http请求行，http请求头及请求正文。<br /><a name="JLucg"></a></p><h3 id="request操作请求行"><a class="markdownIt-Anchor" href="#request操作请求行"></a> request操作请求行</h3><p>格式:请求方式 请求资源 协议/版本<br />例如:GET /day10 HTTP/1.1<br /><a name="ie3vx"></a></p><h4 id="常用请求行api"><a class="markdownIt-Anchor" href="#常用请求行api"></a> 常用请求行API</h4><ul><li>public String getMethod()：获取请求方式例如 GET、POST</li><li>public String getRequestURI()：获取去请求资源(不带参数) 是uri 例如:/day10/r</li><li>public String getProtocol()：获取协议的名称和版本。（例如 HTTP/1.1）</li><li>public String getQueryString()：返回包含在请求 URL 中路径后面的查询字符串。如果 URL 没有查询字符串，则此方法返回 null。<br /><a name="SWaua"></a></li></ul><h3 id="request操作请求头"><a class="markdownIt-Anchor" href="#request操作请求头"></a> request操作请求头</h3><p>格式:key/value(value可以为多个)<br /><a name="B6VZ9"></a></p><h4 id="常用请求头api"><a class="markdownIt-Anchor" href="#常用请求头api"></a> 常用请求头API</h4><ul><li>public String getHeader(String name) 获取字符串格式的请求头，以 String 的形式返回指定请求头的值。</li><li>public java.util.Enumeration<E> getHeaders(String name)获取多个值的请求头，以 String 对象的 Enumeration 的形式返回指定请求头的所有值。</li><li>public java.util.Enumeration<E> getHeaderNames()获取所有请求头的名称，返回此请求包含的所有头名称的枚举。如果该请求没有头，则此方法返回一个空枚举。</li><li>public int getIntHeader(String name) 获取整型格式的请求头，以 int 的形式返回指定请求头的值。如果该请求没有指定名称的头，则此方法返回 -1。如果无法将头转换为整数，则此方法抛出 NumberFormatException。</li><li>public long getDateHeader(String name)获取时间类型的请求头，以表示 Date 对象的 long 值的形式返回指定请求头的值<br /><a name="ueNth"></a></li></ul><h3 id="request获取参数中文出现乱码"><a class="markdownIt-Anchor" href="#request获取参数中文出现乱码"></a> request获取参数中文出现乱码</h3><p><a name="D66SF"></a></p><h4 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因:</h4><p>汉字在不同的编码表中的码值不一样，那么在使用不同的编码表进行解码与编码操作时，就会出现乱码问题.<br />浏览器在提交的时候使用utf-8编码，Tomcat得到请求参数是使用iso8859-1进行了解码，封装到了request中。<br /><a name="6qSI7"></a></p><h4 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决：</h4><p>先使用iso8859-1进行解码，在使用utf-8进行编码<br />每个参数都要new才行(get,post方法都可行)<br />username= new String(username.getBytes(“iso8859-1”),”utf-8”);<br />如果请求方式是POST,<br />可以直接使用request.setCharacterEncoding(“utf-8”);就可以解决。<br /><a name="uDJfO"></a></p><h1 id="请求筛选"><a class="markdownIt-Anchor" href="#请求筛选"></a> 请求筛选</h1><p>在众多网站中提交表单时，需要将表单提交后跳转到指定界面称为POST的方法，倘若直接用GET方法访问跳转的页面方法则会导致未登录就进入操作界面从而引发一系列可怕后果，因此需要在提交数据时判断请求的GET/POST方法来遏制这种不好的后果。<br />POST和GET是HTTP协议，又根据public interface HttpServletRequest extends ServletRequest得知HttpServletRequest是ServletRequest的子类，且HttpServletRequest中getMethod方法可以获取提交方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request= (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response= (HttpServletResponse) res;</span><br><span class="line">        <span class="comment">//获取提交方式</span></span><br><span class="line">        System.out.println(request.getMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此请求筛选代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="comment">//获取提交方式</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (POST.equals(method)) &#123;</span><br><span class="line">            doPost(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doGet(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 对于get的处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 对于post的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="iMDKo"></a></p><h2 id="自定义httpservlet"><a class="markdownIt-Anchor" href="#自定义httpservlet"></a> 自定义HttpServlet</h2><p>因为类似这样需要过滤请求的类很多，因此考虑创建出一个父类来简化其他的Servlet的代码量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交方式</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (POST.equals(method)) &#123;</span><br><span class="line">            doPost(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doGet(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Yj30a"></a></p><h3 id="实现servlet"><a class="markdownIt-Anchor" href="#实现servlet"></a> 实现Servlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO get操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO post操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只需要在子类实现两个方法即可，避免了大量的代码浪费。<br /><a name="1ejJl"></a></p><h2 id="httpservlet源码"><a class="markdownIt-Anchor" href="#httpservlet源码"></a> HttpServlet源码</h2><p>HttpServlet也是javax.servlet.http中原厂自带的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">&quot;HEAD&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">&quot;OPTIONS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">&quot;TRACE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_IFMODSINCE = <span class="string">&quot;If-Modified-Since&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_LASTMOD = <span class="string">&quot;Last-Modified&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LSTRING_FILE =</span><br><span class="line">        <span class="string">&quot;javax.servlet.http.LocalStrings&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle lStrings =</span><br><span class="line">        ResourceBundle.getBundle(LSTRING_FILE);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DispatcherType.INCLUDE.equals(req.getDispatcherType())) &#123;</span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">            doGet(req, response);</span><br><span class="line">            response.setContentLength();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_put_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_delete_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method[] getAllDeclaredMethods(Class&lt;?&gt; c) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c.equals(javax.servlet.http.HttpServlet.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());</span><br><span class="line">        Method[] thisMethods = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((parentMethods != <span class="keyword">null</span>) &amp;&amp; (parentMethods.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            Method[] allMethods =</span><br><span class="line">                <span class="keyword">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class="line">            System.arraycopy(parentMethods, <span class="number">0</span>, allMethods, <span class="number">0</span>,</span><br><span class="line">                             parentMethods.length);</span><br><span class="line">            System.arraycopy(thisMethods, <span class="number">0</span>, allMethods, parentMethods.length,</span><br><span class="line">                             thisMethods.length);</span><br><span class="line"></span><br><span class="line">            thisMethods = allMethods;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thisMethods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Method[] methods = getAllDeclaredMethods(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_GET = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_HEAD = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_POST = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_PUT = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_DELETE = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_TRACE = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_OPTIONS = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tomcat specific hack to see if TRACE is allowed</span></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = Class.forName(<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span>);</span><br><span class="line">            Method getAllowTrace = clazz.getMethod(<span class="string">&quot;getAllowTrace&quot;</span>, (Class&lt;?&gt;[]) <span class="keyword">null</span>);</span><br><span class="line">            ALLOW_TRACE = ((Boolean) getAllowTrace.invoke(req, (Object[]) <span class="keyword">null</span>)).booleanValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | SecurityException |</span><br><span class="line">                IllegalAccessException | IllegalArgumentException | InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// Ignore. Not running on Tomcat. TRACE is always allowed.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// End of Tomcat specific hack</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;methods.length; i++) &#123;</span><br><span class="line">            Method m = methods[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doGet&quot;</span>)) &#123;</span><br><span class="line">                ALLOW_GET = <span class="keyword">true</span>;</span><br><span class="line">                ALLOW_HEAD = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doPost&quot;</span>))</span><br><span class="line">                ALLOW_POST = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doPut&quot;</span>))</span><br><span class="line">                ALLOW_PUT = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doDelete&quot;</span>))</span><br><span class="line">                ALLOW_DELETE = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String allow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_GET)</span><br><span class="line">            allow=METHOD_GET;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_HEAD)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_HEAD;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_HEAD;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_POST)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_POST;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_POST;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_PUT)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_PUT;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_PUT;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_DELETE)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_DELETE;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_DELETE;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_TRACE)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_TRACE;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_TRACE;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_OPTIONS)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_OPTIONS;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_OPTIONS;</span><br><span class="line"></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Allow&quot;</span>, allow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> responseLength;</span><br><span class="line"></span><br><span class="line">        String CRLF = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        StringBuilder buffer = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;TRACE &quot;</span>).append(req.getRequestURI())</span><br><span class="line">            .append(<span class="string">&quot; &quot;</span>).append(req.getProtocol());</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; reqHeaderEnum = req.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>( reqHeaderEnum.hasMoreElements() ) &#123;</span><br><span class="line">            String headerName = reqHeaderEnum.nextElement();</span><br><span class="line">            buffer.append(CRLF).append(headerName).append(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">                .append(req.getHeader(headerName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer.append(CRLF);</span><br><span class="line"></span><br><span class="line">        responseLength = buffer.length();</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;message/http&quot;</span>);</span><br><span class="line">        resp.setContentLength(responseLength);</span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        out.print(buffer.toString());</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeSetLastModified</span><span class="params">(HttpServletResponse resp,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resp.containsHeader(HEADER_LASTMOD))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (lastModified &gt;= <span class="number">0</span>)</span><br><span class="line">            resp.setDateHeader(HEADER_LASTMOD, lastModified);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致思路和刚才自定义的思路类似，不过这里不得不吐槽一下service里面的大量if else 的确略笨重。<br /><a name="0cxb0"></a></p><h3 id="servlet实现"><a class="markdownIt-Anchor" href="#servlet实现"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;posting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="TGayZ"></a></p><h1 id="请求的生命周期"><a class="markdownIt-Anchor" href="#请求的生命周期"></a> 请求的生命周期</h1><p>发送给浏览器信息如图：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582122436148-34e3cecb-26f1-4051-93da-72f88fd66647.png#align=left&amp;display=inline&amp;height=470&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=567&amp;originWidth=831&amp;size=45789&amp;status=done&amp;style=none&amp;width=689" alt="image.png" /><br />当客户端浏览器将请求发送到服务器后，服务器会根据HTTP请求进行解析。同时，服务器会创建HttpServletRequest的实现类RequestFacade的对象，即请求对象。然后在调用对应的set方法，将解析出的数据封装到请求中。此时HttpServletRequset实例就创建并初始化完毕了。也就是说，请求对象是由服务器（tomcat）创建的。<br />当服务器向客户端发送响应后，HttpRequest实例对象被服务器销毁。<br /><a name="eOaGR"></a></p><h1 id="请求参数的获取"><a class="markdownIt-Anchor" href="#请求参数的获取"></a> 请求参数的获取</h1><p>当数据发送到服务器，服务器要对参数进行解析。HttpServletRequest对于请求中所携带的参数是以map的形式接受的，并且map的key为String，value为String数组。之所以是这种形式是因为一个name可以对应多个value，而一个value只能对应一个name。<br /><a name="ZeECW"></a></p><h2 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定名称请求数据值获取</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Integer age = Integer.parseInt(strAge);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot; 年龄：&quot;</span> + age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有请求的名称</span></span><br><span class="line">        Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">        <span class="comment">//遍历枚举</span></span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String tempName = names.nextElement();</span><br><span class="line">            String element = request.getParameter(tempName);</span><br><span class="line">            System.out.println(tempName + <span class="string">&quot;:&quot;</span> + element);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] hobby = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : hobby) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取存放请求的Map</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="E1OMc"></a></p><h2 id="效果演示"><a class="markdownIt-Anchor" href="#效果演示"></a> 效果演示：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582136903551-2d31532e-02ef-449d-af96-e8ca4a371ef3.png#align=left&amp;display=inline&amp;height=140&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=161&amp;originWidth=223&amp;size=23826&amp;status=done&amp;style=none&amp;width=194" alt="image.png" /><br /><a name="Wpgx2"></a></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><ol><li>请求参数是存放在Map中的</li><li>这个Map的Key为请求参数的名称，为String类型。Map的Value为请求参数的所有值，为String[]类型。</li><li>使用最多的是getParameter方法，其等价于getParametervalues()[0]。<br /><a name="JRj0i"></a></li></ol><h1 id="域属性"><a class="markdownIt-Anchor" href="#域属性"></a> 域属性</h1><p>在Request中也存在域属性空间，用于存放有名称的数据。该数据只在当前Request请求中进行访问。一般常用在请求转发方案中，将request对象给别的servlet用来参与这一次请求转发操作中所设计的Servlet提供共享数据。<br /><a name="kykUJ"></a></p><h2 id="someservlet"><a class="markdownIt-Anchor" href="#someservlet"></a> SomeServlet:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//获得属性</span></span><br><span class="line">        System.out.println(request.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="comment">//获得其他的servlet</span></span><br><span class="line">        RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">&quot;/OtherServlet&quot;</span>);</span><br><span class="line">        <span class="comment">//发送request到另一个dispatcher</span></span><br><span class="line">        dispatcher.forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="zCUnD"></a></p><h2 id="otherservlet"><a class="markdownIt-Anchor" href="#otherservlet"></a> OtherServlet:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Other:&quot;</span> + req.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问域名：<a href="http://localhost:8080/RegisterServlet">http://localhost:8080/RegisterServlet</a><br /><a name="DSXTu"></a></p><h2 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582171296896-61831c7c-2d19-42ed-96fc-c6f08331b3e8.png#align=left&amp;display=inline&amp;height=77&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=77&amp;originWidth=211&amp;size=10805&amp;status=done&amp;style=none&amp;width=211" alt="image.png" /><br /><a name="qOBxm"></a></p><h1 id="访问路径问题"><a class="markdownIt-Anchor" href="#访问路径问题"></a> 访问路径问题</h1><p>URL，统一资源定位符。URI，统一资源标识符。通常都分为两部分：资源路径、资源名称。根据资源路径是否可以独立完成资源准确定定位来区分绝对和相对路径。<br /><a name="Ma3l0"></a></p><h2 id="绝对路径"><a class="markdownIt-Anchor" href="#绝对路径"></a> 绝对路径</h2><p>Web应用的绝对路径是指带访问协议的路径，即URL。<br /><a name="RtjKO"></a></p><h2 id="相对路径"><a class="markdownIt-Anchor" href="#相对路径"></a> 相对路径</h2><p>相对路径必须结合参照路径才可以组成可以准确定位资源的绝对路径。<br />根据相对路径是否以/开头，且路径出现的文件的不同，其默认的参数路径是不同的。<br /><a name="STjtx"></a></p><h2 id="以斜杠开头的路径"><a class="markdownIt-Anchor" href="#以斜杠开头的路径"></a> 以斜杠开头的路径</h2><p>又分为：前台路径、后台路径<br /><a name="J1d2e"></a></p><h3 id="前台路径"><a class="markdownIt-Anchor" href="#前台路径"></a> 前台路径</h3><p>有浏览器解析执行的代码中包含的路径，如html、css等。前台路径的参照路径是web服务器的根路径即http://localhost:8080<br /><a name="SuG77"></a></p><h3 id="后台路径"><a class="markdownIt-Anchor" href="#后台路径"></a> 后台路径</h3><p>由服务器解析执行的代码及文件中包含的路径，如java、xml等。后台路径的参照路径是web应用的根路径。如http://localhost:8080/primary<br /><a name="Q0u0o"></a></p><h4 id="特例"><a class="markdownIt-Anchor" href="#特例"></a> 特例：</h4><p>当代码中出现response的sendRedircet方法进行重定向时，若其参照路径是以斜杠开头，其参照路径不是web应用的根路径，而是web服务器的根路径。<br />重定向是由浏览器来重复发送请求，而请求转发的请求时服务器来发的。浏览器发请求，就会有浏览器来不全参照路径。服务器内部发请求，则由浏览器补全。<br /><a name="vrHjn"></a></p><h2 id="以路径名称开头"><a class="markdownIt-Anchor" href="#以路径名称开头"></a> 以路径名称开头</h2><p>无论是什么位置，其参照路径都是当前访问路径的资源路径。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;yri3x&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;dopost和doget&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dopost和doget&quot;&gt;&lt;/a&gt; doPost和doGet&lt;/h1&gt;
&lt;p&gt;要将doPst和doGet，</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>servlet-1</title>
    <link href="https://jie-blog.icu/posts/servlet-1/"/>
    <id>https://jie-blog.icu/posts/servlet-1/</id>
    <published>2020-08-31T14:03:17.000Z</published>
    <updated>2020-09-02T08:29:58.149Z</updated>
    
    <content type="html"><![CDATA[<p><a name="UFBPG"></a></p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p><a name="vNLr9"></a></p><h2 id="什么是servlet"><a class="markdownIt-Anchor" href="#什么是servlet"></a> 什么是Servlet</h2><p>宏观的讲，servlet是连接web服务器与java程序的协议是一种通信规范，这个规范是以一套接口的形式体现的。<br />微观的讲，Servlet是接口实现类的一个实例对象，是运行在服务器上的一段Java小程序，即Server Applet。他主要功能是根据客户端提交的请求，调用服务器相关的Java代码，完成对请求的处理与运算。<br /><a name="a7HE0"></a></p><h2 id="web访问流程图"><a class="markdownIt-Anchor" href="#web访问流程图"></a> web访问流程图：</h2><p>浏览器–HTTP–&gt;web服务器tomcat–&gt;servlet–&gt;服务器端程序–JDBC–&gt;数据库MySQL<br /><a name="fzZIQ"></a></p><h2 id="编写动态资源步骤"><a class="markdownIt-Anchor" href="#编写动态资源步骤"></a> 编写动态资源步骤</h2><ol><li>编写一个Java类，实现javax.servlet.Servlet接口。</li><li>将这个Java类部署到web服务器中<br /><a name="UY3Gd"></a></li></ol><h2 id="servlet生命周期"><a class="markdownIt-Anchor" href="#servlet生命周期"></a> Servlet生命周期</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/485026/1598766084408-d5b892c2-9b72-46bf-9b1f-8ca0e21e4c26.jpeg#align=left&amp;display=inline&amp;height=273&amp;margin=%5Bobject%20Object%5D&amp;originHeight=273&amp;originWidth=474&amp;size=0&amp;status=done&amp;style=none&amp;width=474" alt="" /><br /><a name="qORia"></a></p><h2 id="servlet特点"><a class="markdownIt-Anchor" href="#servlet特点"></a> Servlet特点</h2><ol><li>Servlet是单例多线程的。</li><li>一个Servlet实例只会执行一次无参构造器与init方法，并且是在第一次访问时执行。</li><li>用户每提交一次对当前Servlet的请求，就会执行一次service方法。</li><li>一个Servlet实例只会执行一次destory方法，在应用停止时执行。</li><li>由于Servlet是单例多线程的，所以为了保证其线程安全性，一般情况下是不为Servlet类定义可修改的成员变量的。因为每个线程均可修改这个成员变量，会出现线程安全问题。</li><li>默认情况下，servlet在Web容器启动时是不会被实例化的。<br /><a name="4ZLCE"></a></li></ol><h3 id="线程安全问题"><a class="markdownIt-Anchor" href="#线程安全问题"></a> 线程安全问题</h3><p>Servlet是单例多线程并发访问的，所以其就有可能会出现线程安全问题。为了避免，对于Servlet的使用，一般是不声明成员变量的。若必须声明则通过同步机制synchroized避免。<br /><a name="M35Nu"></a></p><h1 id="url-partten"><a class="markdownIt-Anchor" href="#url-partten"></a> url-partten</h1><p>url-partten有如下四种匹配模式。<br /><a name="BOYtm"></a></p><h2 id="精确路径模式"><a class="markdownIt-Anchor" href="#精确路径模式"></a> 精确路径模式</h2><p>如果是按照<url-pattern>/demo/aaa/bbb/ccc</url-pattern>写的话，则用户必须按照/demo/aaa/bbb/ccc的精确路径来访问。<br />注意：一个servlet可以由多个url-pattern来匹配。<br /><a name="VmnOv"></a></p><h2 id="通配符路径模式"><a class="markdownIt-Anchor" href="#通配符路径模式"></a> 通配符路径模式</h2><p>按照<url-pattern>/demo/<em></url-pattern>方式写，其中</em>代表通配符，只要满足/demo/…即可访问对应的servlet。<br /><a name="xSvZg"></a></p><h2 id="全路径模式"><a class="markdownIt-Anchor" href="#全路径模式"></a> 全路径模式</h2><p>按照<url-pattern>/*</url-pattern>（或者<url-pattern>/</url-pattern>）方式写，与通配符路径类似，任何请求都能获取servlet。<br />不过其中/*与/是有区别的：</p><ul><li>/*可以拦截所有请求，无论是动态还是静态。</li><li>/只会拦截静态请求，对于动态请求不会做出反应。<br /><a name="Lohyc"></a></li></ul><h2 id="后缀名模式"><a class="markdownIt-Anchor" href="#后缀名模式"></a> 后缀名模式</h2><p>按照<url-pattern>*.do</url-pattern>方式写，只要以.do结尾的都会被拦截。<br /><a name="9mkND"></a></p><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2><ol><li>后缀名模式不能与其他模式混合使用。</li><li>当四种请求路径可能被一个请求出发时，则按照优先级进行匹配对应的url-partten。（匹配原则：路径优先后缀匹配原则、精确路径优先匹配原则、最长路径优先匹配原则）。<br /><a name="7RhbK"></a></li></ol><h1 id="注册servlet"><a class="markdownIt-Anchor" href="#注册servlet"></a> 注册Servlet</h1><p>在web.xml注册Servlet代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet的名称（自己起的，不要重复）<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Servlet的类路径（xx.xx.xx.xxservlet）<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet的名称（与上面的一样）<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/url名字（自己起的，不要重复，注意/，不能丢）<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p><a name="3d973"></a></p><h2 id="映射关系形成方法"><a class="markdownIt-Anchor" href="#映射关系形成方法"></a> 映射关系形成方法：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582021090383-ec9ed025-b2ba-4287-a0be-66dfeb7c68d2.png#align=left&amp;display=inline&amp;height=253&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=395&amp;originWidth=886&amp;size=159155&amp;status=done&amp;style=none&amp;width=567" alt="image.png" /><br />第一个map是存放已被创建好的servlet实例引用，并且具有优先级被服务器提前创建<br />若第一个map中无法按照Url找到已被创建好的实例，则会到第二个map去找。<br />第二个map的key部分同样为uri，但是其value部分是web.xml中所有被写入的servlet-class全类名<br />，通过全类名和Url创建一个servlet实例，将其引用放到第一个map中。<br />注意：每个map中的url-pattern不能重复。<br /><a name="hp0jh"></a></p><h1 id="init获取配置信息"><a class="markdownIt-Anchor" href="#init获取配置信息"></a> init获取配置信息</h1><p>ServletConfig:代表当前Servlet在web.xml中的配置信息。其包含方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getServletName</span><span class="params">()</span>  -- 获取当前Servlet在web.xml中配置的名字</span></span><br><span class="line"><span class="function">String <span class="title">getInitParameter</span><span class="params">(String name)</span> -- 获取当前Servlet指定名称的初始化参数的值</span></span><br><span class="line"><span class="function">Enumeration <span class="title">getInitParameterNames</span><span class="params">()</span>  -- 获取当前Servlet所有初始化参数的名字组成的枚举</span></span><br><span class="line"><span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span>  -- 获取代表当前web应用的ServletContext对象</span></span><br></pre></td></tr></table></figure><p>getServletConfig方法又返回{@link ServletConfig}对象，该对象包含初始化此servlet的启动参数。返回的ServletConfig对象是传递给init方法的对象。这就是init获取配置信息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        System.out.println(<span class="string">&quot;config=&quot;</span> + config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="v3tUQ"></a></p><h1 id="自定义基本的genericservlet"><a class="markdownIt-Anchor" href="#自定义基本的genericservlet"></a> 自定义基本的GenericServlet</h1><p>Servlet是个接口类，显然不能独立完成业务，需要实现该接口类进行业务处理。<br /><a name="A0oUB"></a></p><h2 id="适配器模式的引入"><a class="markdownIt-Anchor" href="#适配器模式的引入"></a> 适配器模式的引入</h2><p>继承自Servlet接口就要实现四个方法，然而事实上并不需要service以外的那个三个方法频繁实现，这就要用到了适配器模式中的缺省适配器模式来减少代码冗杂，此外，即使要重写，在子类中也可以完成重写覆盖，不过不要忘记super。样例如下：<br /><a name="rEfY9"></a></p><h3 id="genericservlet"><a class="markdownIt-Anchor" href="#genericservlet"></a> GenericServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="toXju"></a></p><h3 id="servlet实现"><a class="markdownIt-Anchor" href="#servlet实现"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running Service&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GenericServlet（父类）定义了getServletInfo方法，如果要获取Config信息，在子类DemoServlet即可通过这个方法直接调用获取获取。但是如果要获取Config中的参数的话，则需要不停的通过手动get在ServletConfig中获取，从而也会造成大量的代码冗余。<br /><a name="wlpvT"></a></p><h2 id="继承优化"><a class="markdownIt-Anchor" href="#继承优化"></a> 继承优化</h2><p>为了解决上述问题，直接让GenericServlet继承自ServletConfig，从而在父类中就实现了get方法，在service中直接调用即可。<br /><a name="toBf5"></a></p><h3 id="genericservlet-2"><a class="markdownIt-Anchor" href="#genericservlet-2"></a> GenericServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="PThZB"></a></p><h3 id="servlet实现-2"><a class="markdownIt-Anchor" href="#servlet实现-2"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running Service&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInitParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getServletContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="GSaEK"></a></p><h2 id="重写优化"><a class="markdownIt-Anchor" href="#重写优化"></a> 重写优化</h2><p>如果在Servlet实现中想要重写init这类方法，要时刻铭记加上super.init()来防止config未被初始化的问题发生，但是这个出错概率过高，因此要在父类中避免这种问题发生。<br /><a name="4eENh"></a></p><h3 id="genericservlet-3"><a class="markdownIt-Anchor" href="#genericservlet-3"></a> GenericServlet：</h3><p>为子类书写一个专门用于重写的方法，避免了发生错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="n3mqX"></a></p><h3 id="servlet实现-3"><a class="markdownIt-Anchor" href="#servlet实现-3"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Running Service&quot;</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.getInitParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---init is running---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="k8aHC"></a></p><h1 id="系统自带genericservlet"><a class="markdownIt-Anchor" href="#系统自带genericservlet"></a> 系统自带GenericServlet</h1><p>前面一通改良的自定义的GenericServlet，其实系统自带，路径：javax.servlet.GenericServlet。<br /><a name="sYrQ4"></a></p><h2 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>,</span></span><br><span class="line"><span class="class">        <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + message, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大抵与之前的自定义类相同，不过在自定义类之上还做出了优化，例如序列化等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;UFBPG&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;vNLr9&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是servlet&quot;</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jie-blog.icu/posts/hexo_helloworld/"/>
    <id>https://jie-blog.icu/posts/hexo_helloworld/</id>
    <published>2020-08-31T12:59:48.903Z</published>
    <updated>2020-09-02T08:31:24.962Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Hexo搭建" scheme="https://jie-blog.icu/categories/Hexo%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo入门" scheme="https://jie-blog.icu/tags/Hexo%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
