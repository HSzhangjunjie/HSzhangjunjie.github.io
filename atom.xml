<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jieker&#39;s Blog</title>
  
  <subtitle>Jiker</subtitle>
  <link href="https://jie-blog.icu/atom.xml" rel="self"/>
  
  <link href="https://jie-blog.icu/"/>
  <updated>2020-09-05T09:49:37.544Z</updated>
  <id>https://jie-blog.icu/</id>
  
  <author>
    <name>Zhang Junjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tomcat流程</title>
    <link href="https://jie-blog.icu/posts/tomcat-1/"/>
    <id>https://jie-blog.icu/posts/tomcat-1/</id>
    <published>2020-09-05T09:48:07.000Z</published>
    <updated>2020-09-05T09:49:37.544Z</updated>
    
    <content type="html"><![CDATA[<p><a name="znuKs"></a></p><h1 id="tomcat启动流程"><a class="markdownIt-Anchor" href="#tomcat启动流程"></a> Tomcat启动流程</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110101041-2cb21736-11a5-498d-8cdf-71bd0e97a43c.webp#align=left&amp;display=inline&amp;height=165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=227&amp;originWidth=1024&amp;size=0&amp;status=done&amp;style=none&amp;width=746" alt="" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581117189229-9c4fa4b9-e5ff-4eb6-b552-d2307c742ea2.png#align=left&amp;display=inline&amp;height=302&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=534&amp;originWidth=1319&amp;size=189938&amp;status=done&amp;style=none&amp;width=746" alt="image.png" /><br />步骤：</p><ol><li>启动tomcat，需要调用bin/startup.bat，在startup脚本中，调用了catalina.bat。</li><li>在catalina.bat文件中，调用了bootStrap中的main方法。</li><li>在main中调用了init方法，来创建Catalina及初始化类加载器。</li><li>在main中调用了load方法，其中又调用了Cataina的load方法。</li><li>在Catalina的load方法中，需要进行一些初始化的工作，并需要构造Digester对象，用于解析XML。</li><li>调用后续组件初始化操作。</li></ol><p>加载Tomcat配置文件，初始化容器组件，监听对应端口号，准备接收客户端请求。<br /><a name="8NiX2"></a></p><h1 id="请求处理流程"><a class="markdownIt-Anchor" href="#请求处理流程"></a> 请求处理流程</h1><p><a name="dNjyB"></a></p><h2 id="配置gradlebuild"><a class="markdownIt-Anchor" href="#配置gradlebuild"></a> 配置Gradle.build</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;war&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行jar任务时会在jar文件代码清单中加入Main-Class头</span></span><br><span class="line">jar &#123;<span class="comment">//Groovy的闭包委托特性</span></span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">&#x27;Main-Class&#x27;</span>: <span class="string">&#x27;com.shy.todo.ToDoApp&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置阿里源</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven&#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;org.example&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.11&#x27;</span></span><br><span class="line"></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.apache.tomcat&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;tomcat-catalina&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;9.0.30&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UTF-8</span></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有生成web.xml文件的解决方法：<br /><a href="https://www.jianshu.com/p/2bd34845df13">https://www.jianshu.com/p/2bd34845df13</a><br /><a name="JMihs"></a></p><h2 id="webxml配置如下"><a class="markdownIt-Anchor" href="#webxml配置如下"></a> web.xml配置如下：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo/findAll<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="oFOLn"></a></p><h2 id="tomcat测试"><a class="markdownIt-Anchor" href="#tomcat测试"></a> Tomcat测试：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581125741836-efd7c650-7759-4ca8-bf50-0c08b5c8489f.png#align=left&amp;display=inline&amp;height=71&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=142&amp;originWidth=1374&amp;size=35276&amp;status=done&amp;style=none&amp;width=687" alt="image.png" /><br />如图，成功执行。<br />那么他又是如何找到web.xml并调用类的呢？<br /><a name="VkFjj"></a></p><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>结构如下<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581126651808-d0f4cf4c-6e11-42cb-8ba5-75553624bf8c.png#align=left&amp;display=inline&amp;height=192&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=384&amp;originWidth=1541&amp;size=32038&amp;status=done&amp;style=none&amp;width=770.5" alt="image.png" /><br />Mapper组件的功能就是将用户请求的URL定位到一个Servlet，它的工作原理是：<br />Mapper组件保存了Web应用的配置信息，其实就是容器组件与访问路径的映射关系，比如Host里配置域名、Context配置Web应用路径、Wrapper里配置Servlet映射的路径。<br /><br /><br />当请求到来时，Mapper组件通过解析请求的URL里的域名和路径，再到自己保存的Map里去查找，就能定位到一个Servlet，注意，一个URL只能定位到一个Wrapper容器，也就是Servlet。<br /><a name="DgabY"></a></p><h3 id="具体步骤"><a class="markdownIt-Anchor" href="#具体步骤"></a> 具体步骤：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581127465857-35c9cd02-3e05-4355-beff-b0bb70851e90.png#align=left&amp;display=inline&amp;height=246&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=319&amp;originWidth=968&amp;size=216555&amp;status=done&amp;style=none&amp;width=746" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;znuKs&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;tomcat启动流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tomcat启动流程&quot;&gt;&lt;/a&gt; Tomcat启动流程&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cd</summary>
      
    
    
    
    <category term="tomcat" scheme="https://jie-blog.icu/categories/tomcat/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat的安装配置与架构</title>
    <link href="https://jie-blog.icu/posts/tomcat-1/"/>
    <id>https://jie-blog.icu/posts/tomcat-1/</id>
    <published>2020-09-05T09:39:40.000Z</published>
    <updated>2020-09-05T09:47:04.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat的安装配置与架构"><a class="markdownIt-Anchor" href="#tomcat的安装配置与架构"></a> Tomcat的安装配置与架构</h1><p><a name="YkM2z"></a></p><h1 id="下载tomcat"><a class="markdownIt-Anchor" href="#下载tomcat"></a> 下载Tomcat</h1><p>访问官网<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581009121061-083a737f-2df3-44ef-9957-2f29a5f55a58.png#align=left&amp;display=inline&amp;height=29&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=29&amp;originWidth=290&amp;size=4188&amp;status=done&amp;style=none&amp;width=290" alt="image.png" /><br />下载8.5的版本。<br />在目录下找到startup.bat 双击启动tomcat<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581009895213-af787f36-0eee-43d8-aa89-66c628cc99a8.png#align=left&amp;display=inline&amp;height=96&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=96&amp;originWidth=636&amp;size=16636&amp;status=done&amp;style=none&amp;width=636" alt="image.png" /><br />注意，这里如果一闪而过需要编辑startup.bat 增加个pasue查看原因<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581011869467-8d6d4401-a548-4fed-aa6d-7b7f99fb1feb.png#align=left&amp;display=inline&amp;height=57&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=57&amp;originWidth=606&amp;size=3399&amp;status=done&amp;style=none&amp;width=606" alt="image.png" /><br />如图示没有配置JAVA_HOME或者JRE_HOME<br />运行成功界面:<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581012057941-7d293c8c-cce1-457a-ab18-d9c1499f2bc8.png#align=left&amp;display=inline&amp;height=567&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=567&amp;originWidth=1297&amp;size=58461&amp;status=done&amp;style=none&amp;width=1297" alt="image.png" /><br />访问8080：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581012100034-254eb3f7-f0e1-49f3-9fe5-b98b7c09997a.png#align=left&amp;display=inline&amp;height=922&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=922&amp;originWidth=1274&amp;size=158515&amp;status=done&amp;style=none&amp;width=1274" alt="image.png" /><br /><a name="8vml2"></a></p><h1 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h1><p>增加变量：<br />CATALINA_HOME、CATALINA_BASE<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581012904101-fcee7922-91a0-4498-b70b-67823cc7afa9.png#align=left&amp;display=inline&amp;height=50&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=50&amp;originWidth=465&amp;size=6133&amp;status=done&amp;style=none&amp;width=465" alt="image.png" /><br />配置Path：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581013294393-a45554dc-c566-49b0-abc0-a406ab7ad22b.png#align=left&amp;display=inline&amp;height=47&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=47&amp;originWidth=176&amp;size=1517&amp;status=done&amp;style=none&amp;width=176" alt="image.png" /><br />测试：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581013357375-0315a297-a208-4d53-a415-6a1ea0514e7d.png#align=left&amp;display=inline&amp;height=128&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=128&amp;originWidth=805&amp;size=10167&amp;status=done&amp;style=none&amp;width=805" alt="image.png" /><br />成功<br /><a name="jaJVO"></a></p><h1 id="配置idea环境"><a class="markdownIt-Anchor" href="#配置idea环境"></a> 配置IDEA环境</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581014585709-05e04199-5da9-4abe-a5f3-c0fa017225a9.png#align=left&amp;display=inline&amp;height=326&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=326&amp;originWidth=395&amp;size=24291&amp;status=done&amp;style=none&amp;width=395" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581017407980-1045a6fc-c809-4cb6-9cd7-70eb1e30fc8a.png#align=left&amp;display=inline&amp;height=721&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=721&amp;originWidth=1092&amp;size=82495&amp;status=done&amp;style=none&amp;width=1092" alt="image.png" /><br />问题出现：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581018131848-16311cdc-bccf-4dc1-8a87-291025469f60.png#align=left&amp;display=inline&amp;height=722&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=722&amp;originWidth=1092&amp;size=66880&amp;status=done&amp;style=none&amp;width=1092" alt="image.png" /><br />如何解决：<br />打开File–&gt;setting,选中圈出选项<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581018268047-6efdbb66-e1f4-47d1-810d-0b4bc395814e.png#align=left&amp;display=inline&amp;height=715&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=715&amp;originWidth=998&amp;size=88709&amp;status=done&amp;style=none&amp;width=998" alt="image.png" /><br />选择第二个<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581022740916-af1c3016-0301-42e9-8fc5-6a36f3c989a1.png#align=left&amp;display=inline&amp;height=718&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=718&amp;originWidth=1092&amp;size=48215&amp;status=done&amp;style=none&amp;width=1092" alt="image.png" /><br />配置完成<br /><a name="sFRw5"></a></p><h1 id="tomcat架构"><a class="markdownIt-Anchor" href="#tomcat架构"></a> Tomcat架构</h1><p>详见：<a href="https://blog.csdn.net/qq_26323323/article/details/84848305">https://blog.csdn.net/qq_26323323/article/details/84848305</a><br /><a href="https://www.jianshu.com/p/8d20e1a057b1">https://www.jianshu.com/p/8d20e1a057b1</a><br /><a href="https://blog.csdn.net/weixin_42146366/article/details/98043043">https://blog.csdn.net/weixin_42146366/article/details/98043043</a> <br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110208973-64d63ce0-c77e-4f2d-898f-515456d40e84.webp#align=left&amp;display=inline&amp;height=309&amp;margin=%5Bobject%20Object%5D&amp;originHeight=253&amp;originWidth=508&amp;size=0&amp;status=done&amp;style=none&amp;width=621" alt="" /><br />Service是由多个Connector和一个Container组成,架构如图。<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110320332-032e1eac-7afb-4748-bf19-1d97ce3e49ca.webp#align=left&amp;display=inline&amp;height=467&amp;margin=%5Bobject%20Object%5D&amp;originHeight=467&amp;originWidth=697&amp;size=0&amp;status=done&amp;style=none&amp;width=697" alt="" /><br />Server服务器负责维护它所包含的所有 Service 的生命周期，包括如何初始化、如何结束服务、如何找到别人要访问的 Service。<br />Service 是在 Connector 和 Container 外面多包一层，把它们组装在一起，向外面提供服务.<br /><a name="JTVLU"></a></p><h2 id="tomcat的核心功能"><a class="markdownIt-Anchor" href="#tomcat的核心功能"></a> Tomcat的核心功能</h2><ul><li>处理Socket连接，负责网络字节流与Request和Response对象的转化</li><li>加载和管理Servlet，以及具体处理Request请求</li></ul><p>因此Tomcat设计了两个核心组件：连接器(Connector)和容器(Contaioner)来分别做这两件事情，连接器负责对外交流，容器负责内部处理。<br /><a name="jBHws"></a></p><h2 id="连接器"><a class="markdownIt-Anchor" href="#连接器"></a> 连接器</h2><p>详见：<a href="https://blog.csdn.net/cwfjimogudan/article/details/54933988">https://blog.csdn.net/cwfjimogudan/article/details/54933988</a><br />Connector将在某个指定的端口上来监听客户的请求，把从socket传递过来的数据，封装成Request，传递给Engine来处理，并从Engine处获得响应并返回给客户。<br />Tomcat通常会用到两种Connector：</p><ul><li>Http Connector 在端口8080处侦听来自客户browser的http请求。 AJP Connector</li><li>在端口8009处侦听来自其它WebServer(Apache)的servlet/jsp代理请求。</li></ul><p><a name="pBo1b"></a></p><h2 id="容器"><a class="markdownIt-Anchor" href="#容器"></a> 容器</h2><p>详见：<a href="https://www.jianshu.com/p/32809479c62c">https://www.jianshu.com/p/32809479c62c</a><br />定义了下属的各种容器，重要的是Wrapper、Host、Engine、Context等。<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110458106-4f4353b9-4174-4efe-a516-3cf97162ff4e.webp#align=left&amp;display=inline&amp;height=451&amp;margin=%5Bobject%20Object%5D&amp;originHeight=451&amp;originWidth=694&amp;size=0&amp;status=done&amp;style=none&amp;width=694" alt="" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110478531-ad86a9a0-a2a5-46c6-825c-86ea9cda3260.webp#align=left&amp;display=inline&amp;height=379&amp;margin=%5Bobject%20Object%5D&amp;originHeight=379&amp;originWidth=792&amp;size=0&amp;status=done&amp;style=none&amp;width=792" alt="" /><br /><a name="PAvbX"></a></p><h3 id="engine"><a class="markdownIt-Anchor" href="#engine"></a> Engine</h3><p>负责处理来自相关联的service的所有请求，处理后，将结果返回给service，而connector是作为service与engine的中间媒介出现的。<br />一个engine下可以配置一个默认主机，每个虚拟主机都有一个域名。当engine获得一个请求时，它把该请求匹配到虚拟主机(host)上，然后把请求交给该主机来处理。<br />Engine有一个默认主机，当请求无法匹配到任何一个虚拟主机时，将交给默认host来处理。Engine以线程的方式启动Host。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581112332415-8863b33b-9d42-43a0-b3dc-f13f7e9bb867.png#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;originHeight=564&amp;originWidth=586&amp;size=0&amp;status=done&amp;style=none&amp;width=586" alt="" /><br /><a name="host"></a></p><h3 id="host"><a class="markdownIt-Anchor" href="#host"></a> Host</h3><p>代表一个虚拟主机，每个虚拟主机和某个网络域名（Domain Name）相匹配。<br />每个虚拟主机下都可以部署一个或多个web应用，每个web应用对应于一个context，有一个context path。<br />当Host获得一个请求时，将把该请求匹配到某个Context上，然后把该请求交给该Context来处理匹配的方法是“最长匹配”，所以一个path==””的Context将成为该Host的默认Context所有无法和其它Context的路径名匹配的请求都将最终和该默认Context匹配。<br /><a name="context"></a></p><h3 id="context"><a class="markdownIt-Anchor" href="#context"></a> Context</h3><p>一个Context对应于一个Web应用，一个Web应用由一个或者多个Servlet组成Context在创建的时候将根据配置文件$ CATALINA_HOME/conf/web.xml和$ WEBAPP_HOME/WEB-INF/web.xml载入Servlet类。当Context获得请求时，将在自己的映射表(mapping table)中寻找相匹配的Servlet类，如果找到，则执行该类，获得请求的回应，并返回。<br /><a name="mKVPV"></a></p><h3 id="wrapper"><a class="markdownIt-Anchor" href="#wrapper"></a> Wrapper</h3><p>Wrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。<br />Wrapper 的实现类是 StandardWrapper，StandardWrapper 还实现了拥有一个 Servlet 初始化信息的 ServletConfig，由此看出 StandardWrapper 将直接和 Servlet 的各种信息打交道。<br /><a name="LGQos"></a></p><h2 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h2><p>当服务器启动的时候，tomcat需要去调用servlet的init方法和初始化容器等一系列操作，而停止的时候，也需要调用servlet的destory方法。而这些都是通过org.apache.catalina.Lifecycle接口来实现的。由这个类来制定各个组件生命周期的规范。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581113984388-74c98b31-12f3-4fb3-b16d-7d94892670d1.png#align=left&amp;display=inline&amp;height=574&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=726&amp;originWidth=856&amp;size=151369&amp;status=done&amp;style=none&amp;width=677" alt="image.png" /><br />继承图谱：<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581119611784-978f4a52-c5d9-4e7e-b9f8-1d89a1ea815f.webp#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;originHeight=564&amp;originWidth=586&amp;size=0&amp;status=done&amp;style=none&amp;width=586" alt="" /><br />接口方法：<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581119636040-b0dee15c-9c67-4521-8f5c-2fa0381a36b6.webp#align=left&amp;display=inline&amp;height=485&amp;margin=%5Bobject%20Object%5D&amp;originHeight=485&amp;originWidth=600&amp;size=0&amp;status=done&amp;style=none&amp;width=600" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tomcat的安装配置与架构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tomcat的安装配置与架构&quot;&gt;&lt;/a&gt; Tomcat的安装配置与架构&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;YkM2z&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;下载t</summary>
      
    
    
    
    <category term="tomcat" scheme="https://jie-blog.icu/categories/tomcat/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Maven的使用</title>
    <link href="https://jie-blog.icu/posts/maven-use/"/>
    <id>https://jie-blog.icu/posts/maven-use/</id>
    <published>2020-09-05T09:31:36.000Z</published>
    <updated>2020-09-05T09:33:01.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven的使用"><a class="markdownIt-Anchor" href="#maven的使用"></a> Maven的使用</h1><p><a name="M9SGW"></a></p><h1 id="maven概念"><a class="markdownIt-Anchor" href="#maven概念"></a> Maven概念</h1><p>Maven 是一个项目管理工具。它负责管理项目开发过程中的几乎所有的东西。<br />版本、构建、输出物管理、依赖关系、文档和构建结果、项目关系、移植性管理。<br /><a name="3PQCQ"></a></p><h2 id="maven的生命周期"><a class="markdownIt-Anchor" href="#maven的生命周期"></a> Maven的生命周期</h2><p>maven把项目的构建划分为不同的生命周期(lifecycle)。粗略一点的话，它这个过程(phase)包括：编译、测试、打包、集成测试、验证、部署。maven中所有的执行动作(goal)都需要指明自己在这个过程中的执行位置，然后maven执行的时候，就依照过程的发展依次调用这些goal进行各种处理。<br /><a name="2FuW9"></a></p><h2 id="maven的标准工程结构"><a class="markdownIt-Anchor" href="#maven的标准工程结构"></a> Maven的标准工程结构</h2><p>MavenProjectRoot(项目根目录)<br />   |----src<br />   |     |----main<br />   |     |         |----java ——存放项目的.java文件<br />   |     |         |----resources ——存放项目资源文件，如spring, hibernate配置文件<br />   |     |----test<br />   |     |         |----java ——存放所有测试.java文件，如JUnit测试类<br />   |     |         |----resources ——存放项目资源文件，如spring, hibernate配置文件<br />   |----target ——项目输出位置<br />   |----pom.xml ----用于标识该项目是一个Maven项目<br /><a name="nSyND"></a></p><h2 id="maven的版本规范"><a class="markdownIt-Anchor" href="#maven的版本规范"></a> Maven的版本规范</h2><p>maven使用如下几个要素来唯一定位某一个输出物：<br /><a name="qEhMc"></a></p><h3 id="groudid"><a class="markdownIt-Anchor" href="#groudid"></a> groudId</h3><p>团体、组织的标识符。团体标识的约定是，它以创建这个项目的组织名称的逆向域名(reverse domain name)开头。一般对应着JAVA的包的结构。例如org.apache<br /><a name="JR4HM"></a></p><h3 id="artifactid"><a class="markdownIt-Anchor" href="#artifactid"></a> artifactId</h3><p>单独项目的唯一标识符。比如我们的tomcat, commons等。不要在artifactId中包含点号(.)。<br /><a name="7l973"></a></p><h3 id="version"><a class="markdownIt-Anchor" href="#version"></a> version</h3><p>一个项目的特定版本。<br /><a name="fhEMy"></a></p><h3 id="packaging"><a class="markdownIt-Anchor" href="#packaging"></a> packaging</h3><p>项目的类型，默认是jar，描述了项目打包后的输出。类型为jar的项目产生一个JAR文件，类型为war的项目产生一个web应用。<br /><a name="mkgYV"></a></p><h2 id="maven仓库与本地仓储配置"><a class="markdownIt-Anchor" href="#maven仓库与本地仓储配置"></a> maven仓库与本地仓储配置</h2><p>根据Maven坐标定义每个构建在仓库中唯一存储路径，大致为：groupId/artifactId/version/artifactId-version.packaging。<br />分类：本地仓库（每个用户只有一个本地仓库，默认是在<sub>/.m2/repository/，</sub>代表的是用户目录），<br />远程仓库（中央仓库：<a href="http://search.maven.org/%E3%80%81%E7%A7%81%E6%9C%8D%EF%BC%89">http://search.maven.org/、私服）</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397370-1a4ea706-1662-4436-b7f8-f9aa8431f1ec.png#align=left&amp;display=inline&amp;height=243&amp;margin=%5Bobject%20Object%5D&amp;originHeight=243&amp;originWidth=669&amp;size=0&amp;status=done&amp;style=none&amp;width=669" alt="" /><br />从Maven中心仓库下载到本地的jar包的默认存放在”<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">.</mi><mi>h</mi><mi>o</mi><mi>m</mi><mi>e</mi></mrow><mi mathvariant="normal">/</mi><mi mathvariant="normal">.</mi><mi>m</mi><mn>2</mn><mi mathvariant="normal">/</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">”</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">{user.home}/.m2/repository”中，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">.</span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span><span class="mord">/</span><span class="mord">.</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">”</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">，</span></span></span></span>{user.home}表示当前登录系统的用户目录(如&quot;C:\Users\gacl&quot;)<br />自定义jar包存放位置（本地仓库）：E盘创建文件加”repository”，修改apache-maven\conf目录下的settings.xml文件，添加<localRepository>xxxx</localRepository><br /><a name="X41JO"></a></p><h2 id="maven核心指令"><a class="markdownIt-Anchor" href="#maven核心指令"></a> Maven核心指令</h2><p>使用Maven编译项目，编译项目的命令是：&quot;mvn compile&quot;<br />使用Maven清理项目，清理项目的命令是：&quot;mvn clean&quot;<br />使用Maven测试项目，测试项目的命令是：&quot;mvn test&quot;<br />使用Maven打包项目，打包项目的命令是：&quot;mvn package&quot;<br />使用Maven部署项目，部署项目的命令是：“mvn install”<br /><a name="nYIR4"></a></p><h2 id="依赖管理"><a class="markdownIt-Anchor" href="#依赖管理"></a> 依赖管理</h2><p>依赖范围：依赖范围scope用来控制依赖和编译，测试，运行的classpath的关系. 主要的是三种依赖关系如下：</p><ol><li>compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效</li><li>test：测试依赖范围。只对于测试classpath有效</li><li>provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api</li><li>runtime:运行时提供。例如:jdbc驱动<br /><a name="7Hl6V"></a></li></ol><h3 id="依赖传递"><a class="markdownIt-Anchor" href="#依赖传递"></a> 依赖传递：</h3><p>MakeFriends.jar直接依赖于HelloFriends.jar，而HelloFriends.jar又直接依赖于Hello.jar，那么MakeFriends.jar也依赖于Hello.jar，这就是传递性依赖，只不过这种依赖是间接依赖，如下图所示：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397395-bfc44790-87d8-4f4e-bca9-9781b32c4151.png#align=left&amp;display=inline&amp;height=148&amp;margin=%5Bobject%20Object%5D&amp;originHeight=148&amp;originWidth=663&amp;size=0&amp;status=done&amp;style=none&amp;width=663" alt="" /><br /><a name="xwylq"></a></p><h2 id="聚合继承"><a class="markdownIt-Anchor" href="#聚合继承"></a> 聚合继承</h2><p>聚合主要为了快速构建项目，继承主要为了消除重复。如果我们想一次构建多个项目模块，那我们就需要对多个项目模块进行聚合。<br /><a name="61EXZ"></a></p><h3 id="聚合配置代码"><a class="markdownIt-Anchor" href="#聚合配置代码"></a> 聚合配置代码：</h3><p><modules><br />       <module>模块一</module><br />       <module>模块二</module><br />       <module>模块三</module><br /></modules><br /><a name="S49ay"></a></p><h3 id="继承配置代码"><a class="markdownIt-Anchor" href="#继承配置代码"></a> 继承配置代码：</h3><p><parent>  <br />          <groupId>me.gacl.maven</groupId><br />          <artifactId>ParentProject</artifactId><br />          <version>0.0.1-SNAPSHOT</version><br />          <relativePath>…/ParentProject/pom.xml</relativePath>  <br /></parent><br />其中父模块用dependencyManagement管理依赖。<br />dependencyManagement是表示依赖jar包的声明，即你在项目中的dependencyManagement下声明了依赖，maven不会加载该依赖，dependencyManagement声明可以被继承。<br />dependencyManagement的一个使用案例是当有父子项目的时候，父项目中可以利用dependencyManagement声明子项目中需要用到的依赖jar包，之后，当某个或者某几个子项目需要加载该插件的时候，就可以在子项目中dependencies节点只配置 groupId 和 artifactId就可以完成插件的引用。<br />dependencyManagement主要是为了统一管理插件，确保所有子项目使用的插件版本保持一致，类似的还是plugins和pluginManagement。<br /><a name="Yk5Bt"></a></p><h1 id="使用maven创建项目"><a class="markdownIt-Anchor" href="#使用maven创建项目"></a> 使用maven创建项目</h1><p><a name="cRT19"></a></p><h2 id="maven创建java项目"><a class="markdownIt-Anchor" href="#maven创建java项目"></a> maven创建Java项目</h2><p><a name="SjE7F"></a></p><h3 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h3><p>使用mvn archetype:generate命令，如下所示：<br /><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=myapp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code><br />使用mvn archetype:create命令，如下所示：<br /><code>mvn archetype:create -DgroupId=com.mycompany.app -DartifactId=myapp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code><br /><a name="iOTBc"></a></p><h3 id="pom文件"><a class="markdownIt-Anchor" href="#pom文件"></a> pom文件</h3><p>1）pom意思就是project object model。<br />2）pom.xml包含了项目构建的信息，包括项目的信息、项目的依赖等。<br />3）pom.xml文件是可以继承的，大型项目中，子模块的pom.xml一般都会继承于父模块的pom.xml<br /><a name="2J0RX"></a></p><h3 id="使用maven编译-清理-测试-打包-安装项目"><a class="markdownIt-Anchor" href="#使用maven编译-清理-测试-打包-安装项目"></a> 使用maven编译-清理-测试-打包-安装项目</h3><p>切换到项目目录，执行mvn clean compile / mvn clean test / mvn clean package / mvn clean install 命令分别执行。<br />构建成功，就会将项目的jar包安装到本地仓库。<br />运行jar包：进入命令行，切换到myapp目录，执行命令：<br />java -cp target\myapp-1.0-SNAPSHOT.jar com.mycompany.app.App （运行项目APP的jar包）<br /><a name="yshBb"></a></p><h2 id="maven创建javaweb项目"><a class="markdownIt-Anchor" href="#maven创建javaweb项目"></a> maven创建JavaWeb项目</h2><p><a name="FnHr2"></a></p><h3 id="构建"><a class="markdownIt-Anchor" href="#构建"></a> 构建</h3><p>1、使用<strong>mvn archetype:generate</strong>命令，如下所示：<br /><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-WebApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</code><br />2、使用<strong>mvn archetype:create</strong>命令，如下所示：<br /><code>mvn archetype:create -DgroupId=com.mycompany.app -DartifactId=myWebApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</code><br /><a name="GRrlZ"></a></p><h3 id="创建多模块项目"><a class="markdownIt-Anchor" href="#创建多模块项目"></a> 创建多模块项目</h3><p>在平时的Javaweb项目开发中为了便于后期的维护，我们一般会进行分层开发，最常见的就是分为domain（域模型层）、dao（数据库访问层）、service（业务逻辑层）、web（表现层），这样分层之后，各个层之间的职责会比较明确，后期维护起来也相对比较容易，今天我们就是使用Maven来构建以上的各个层。<br />项目结构如下：<br />system-parent<br />    　　　　|----pom.xml<br />    　　　　|----system-domain<br />        　　　　　　　　|----pom.xml<br />    　　　　|----system-dao<br />        　　　　　　　　|----pom.xml<br />    　　　　|----system-service<br />        　　　　　　　　|----pom.xml<br />    　　　　|----system-web<br />        　　　　　　　　|----pom.xml<br /> <br /><a name="ihgLU"></a></p><h4 id="创建system-parent项目"><a class="markdownIt-Anchor" href="#创建system-parent项目"></a> 创建system-parent项目</h4><p>创建system-parent，用来给各个子模块继承。<br /><code>mvn archetype:create -DgroupId=me.gacl -DartifactId=system-parent -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code><br />将src文件夹删除，然后修改pom.xml文件，将<packaging>jar</packaging>修改为<packaging>pom</packaging>，pom表示它是一个被继承的模块，修改后的内容如下：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397408-f2d4b5b8-7137-41e8-9f05-031ac43f258c.png#align=left&amp;display=inline&amp;height=405&amp;margin=%5Bobject%20Object%5D&amp;originHeight=306&amp;originWidth=367&amp;size=0&amp;status=done&amp;style=none&amp;width=486" alt="" /><br /><a name="r2QVI"></a></p><h4 id="创建sytem-domain模块"><a class="markdownIt-Anchor" href="#创建sytem-domain模块"></a> 创建sytem-domain模块</h4><p>在命令行进入创建好的system-parent目录，然后执行下列命令：<br /><code>mvn archetype:create -DgroupId=me.gacl -DartifactId=system-domain -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code><br />同时，在system-parent目录中的pom.xml文件自动添加了如下内容：<br /><modules><br />    <module>system-domain</module><br /></modules><br /><strong>sytem-domain中pom文件为：</strong><br /><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397401-ebc51e2e-a240-4c29-b98d-24b273ac74b2.png#align=left&amp;display=inline&amp;height=433&amp;margin=%5Bobject%20Object%5D&amp;originHeight=285&amp;originWidth=301&amp;size=0&amp;status=done&amp;style=none&amp;width=457" alt="" /></strong><br />修改system-domain目录中的pom.xml文件，把<groupId>me.gacl</groupId>和<version>1.0-SNAPSHOT</version>去掉，加上<packaging>jar</packaging>，因为groupId和version会继承system-parent中的groupId和version，packaging设置打包方式为jar<br />修改后：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397491-984f06cd-d497-4d16-bb9d-7ab9bc8d296e.png#align=left&amp;display=inline&amp;height=289&amp;margin=%5Bobject%20Object%5D&amp;originHeight=263&amp;originWidth=281&amp;size=0&amp;status=done&amp;style=none&amp;width=309" alt="" /><br /> <br /><a name="iS2V3"></a></p><h4 id="创建system-dao类似domain"><a class="markdownIt-Anchor" href="#创建system-dao类似domain"></a> 创建system-dao（类似domain）</h4><p>在命令行进入创建好的system-parent目录，然后执行下列命令：<br /><code>mvn archetype:create -DgroupId=me.gacl -DartifactId=system-dao -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code><br /><a name="Phlcs"></a></p><h4 id="创建system-service类似domain"><a class="markdownIt-Anchor" href="#创建system-service类似domain"></a> 创建system-service（类似domain）</h4><p>在命令行进入创建好的system-parent目录，然后执行下列命令：<br /><code>mvn archetype:create -DgroupId=me.gacl -DartifactId=system-service -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</code><br /><a name="AZJV9"></a></p><h4 id="创建system-web"><a class="markdownIt-Anchor" href="#创建system-web"></a> 创建system-web</h4><p>在命令行进入创建好的system-parent目录，然后执行下列命令：<br /><code>mvn archetype:create -DgroupId=me.gacl -DartifactId=system-web -DarchetypeArtifactId=maven-archetype-``webapp`` -DinteractiveMode=false</code><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397462-124a1a99-cab9-4490-bf50-6fb3f4313b6c.png#align=left&amp;display=inline&amp;height=447&amp;margin=%5Bobject%20Object%5D&amp;originHeight=382&amp;originWidth=263&amp;size=0&amp;status=done&amp;style=none&amp;width=308" alt="" /><br />注意，<strong>web项目的打包方式是war</strong>。<br />最后，system-parent的pom文件为：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397446-c38a980b-1f93-4455-ab6c-64ce85d02094.png#align=left&amp;display=inline&amp;height=420&amp;margin=%5Bobject%20Object%5D&amp;originHeight=371&amp;originWidth=359&amp;size=0&amp;status=done&amp;style=none&amp;width=406" alt="" /><br /><a name="NDSLe"></a></p><h2 id="项目构建命令说明"><a class="markdownIt-Anchor" href="#项目构建命令说明"></a> 项目构建命令说明</h2><p>mvn archetype:create或者mvn archetype:generate　　固定写法<br />　　-DgroupId　　　　　　　　　　　　　　　　 组织标识（包名）<br />　　-DartifactId　　　　　　　　　　　　　　　　项目名称<br />　　-DarchetypeArtifactId　　  　　      　　　　指定ArchetypeId，maven-archetype-quickstart，创建一个Java Project；maven-archetype-webapp，创建一个Web Project<br />　　-DinteractiveMode　　　　　　　　　　　　　是否使用交互模式<br />　　archetype是mvn内置的一个插件，create任务可以创建一个java项目骨架，DgroupId是软件包的名称，DartifactId是项目名，DarchetypeArtifactId是可用的mvn项目骨架，目前可以使用的骨架有：</p><ul><li>maven-archetype-archetype</li><li>maven-archetype-j2ee-simple</li><li>maven-archetype-mojo</li><li>maven-archetype-portlet</li><li>maven-archetype-profiles (currently under development)</li><li><strong>maven-archetype-quickstart</strong></li><li>maven-archetype-simple (currently under development)</li><li>maven-archetype-site</li><li>maven-archetype-site-simple</li><li><strong>maven-archetype-webapp</strong></li></ul><p>每一个骨架都会建相应的目录结构和一些通用文件，最常用的是<strong>maven-archetype-quickstart</strong>和<strong>maven-archetype-webapp</strong>骨架。maven-archetype-quickstart骨架是用来创建一个Java Project，而maven-archetype-webapp骨架则是用来创建一个JavaWeb Project<br /><a name="YUK8k"></a></p><h2 id="maven常用命令"><a class="markdownIt-Anchor" href="#maven常用命令"></a> maven常用命令</h2><table><thead><tr><th><strong>生命周期</strong></th><th><strong>阶段描述</strong></th></tr></thead><tbody><tr><td>mvn validate</td><td>验证项目是否正确，以及所有为了完整构建必要的信息是否可用</td></tr><tr><td>mvn generate-sources</td><td>生成所有需要包含在编译过程中的源代码</td></tr><tr><td>mvn process-sources</td><td>处理源代码，比如过滤一些值</td></tr><tr><td>mvn generate-resources</td><td>生成所有需要包含在打包过程中的资源文件</td></tr><tr><td>mvn process-resources</td><td>复制并处理资源文件至目标目录，准备打包</td></tr><tr><td>mvn compile</td><td>编译项目的源代码</td></tr><tr><td>mvn process-classes</td><td>后处理编译生成的文件，例如对Java类进行字节码增强（bytecode enhancement）</td></tr><tr><td>mvn generate-test-sources</td><td>生成所有包含在测试编译过程中的测试源码</td></tr><tr><td>mvn process-test-sources</td><td>处理测试源码，比如过滤一些值</td></tr><tr><td>mvn generate-test-resources</td><td>生成测试需要的资源文件</td></tr><tr><td>mvn process-test-resources</td><td>复制并处理测试资源文件至测试目标目录</td></tr><tr><td>mvn test-compile</td><td>编译测试源码至测试目标目录</td></tr><tr><td>mvn test</td><td>使用合适的单元测试框架运行测试。这些测试应该不需要代码被打包或发布</td></tr><tr><td>mvn prepare-package</td><td>在真正的打包之前，执行一些准备打包必要的操作。这通常会产生一个包的展开的处理过的版本（将会在Maven 2.1+中实现）</td></tr><tr><td>mvn package</td><td>将编译好的代码打包成可分发的格式，如JAR，WAR，或者EAR</td></tr><tr><td>mvn pre-integration-test</td><td>执行一些在集成测试运行之前需要的动作。如建立集成测试需要的环境</td></tr><tr><td>mvn integration-test</td><td>如果有必要的话，处理包并发布至集成测试可以运行的环境</td></tr><tr><td>mvn post-integration-test</td><td>执行一些在集成测试运行之后需要的动作。如清理集成测试环境。</td></tr><tr><td>mvn verify</td><td>执行所有检查，验证包是有效的，符合质量规范</td></tr><tr><td>mvn install</td><td>安装包至本地仓库，以备本地的其它项目作为依赖使用</td></tr><tr><td>mvn deploy</td><td>复制最终的包至远程仓库，共享给其它开发人员和项目（通常和一次正式的发布相关）</td></tr></tbody></table><p><strong>使用参数</strong><br />-Dmaven.test.skip=true: 跳过单元测试(eg: mcn clean package -Dmaven.test.skip=true)<br />更多操作详见：<a href="https://cloud.tencent.com/developer/article/1394859">https://cloud.tencent.com/developer/article/1394859</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;maven的使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#maven的使用&quot;&gt;&lt;/a&gt; Maven的使用&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;M9SGW&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;maven概念&quot;&gt;&lt;a class=&quot;ma</summary>
      
    
    
    
    <category term="maven" scheme="https://jie-blog.icu/categories/maven/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Maven的安装</title>
    <link href="https://jie-blog.icu/posts/maven-config/"/>
    <id>https://jie-blog.icu/posts/maven-config/</id>
    <published>2020-09-05T09:21:17.000Z</published>
    <updated>2020-09-05T09:47:20.681Z</updated>
    
    <content type="html"><![CDATA[<p><a name="CDPwW"></a></p><h1 id="开发出现的问题"><a class="markdownIt-Anchor" href="#开发出现的问题"></a> 开发出现的问题</h1><ol><li>一个项目就是一个工程，如果项目过于庞大，就不适合继续使用package来划分模块。</li><li>项目中需要jar包必须手动“复制”、“粘贴”到WEB-INF/lib目录下，同样的jar包重复初见在不同的项目工程中，浪费存储空间也让工程变得臃肿。</li><li>jar包需要提前准备好，或者官网下载。</li><li>一个jar包依赖的其他jar包需要手动添加到项目中。</li></ol><p>然而Maven就能完美地解决这些问题，同样之前学习的Gradle也能解决。<br /><a name="EwiXV"></a></p><h1 id="安装配置maven"><a class="markdownIt-Anchor" href="#安装配置maven"></a> 安装配置Maven</h1><p>访问官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a><br /><a name="7jFAs"></a></p><h2 id="下载文件"><a class="markdownIt-Anchor" href="#下载文件"></a> 下载文件</h2><p>下载如下文件：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581732596504-98878054-f5a1-4a1e-9da3-1951e1f4b2dc.png#align=left&amp;display=inline&amp;height=199&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=199&amp;originWidth=1396&amp;size=29739&amp;status=done&amp;style=none&amp;width=1396" alt="image.png" /><br />解压后创建一个仓库：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581732767609-7f8fa67f-6394-4e5e-bdbb-f5112e5f4398.png#align=left&amp;display=inline&amp;height=46&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=46&amp;originWidth=738&amp;size=5138&amp;status=done&amp;style=none&amp;width=738" alt="image.png" /><br /><a name="Vv4Wh"></a></p><h2 id="配置maven"><a class="markdownIt-Anchor" href="#配置maven"></a> 配置Maven</h2><p><a name="V5eju"></a></p><h3 id="配置本地仓库"><a class="markdownIt-Anchor" href="#配置本地仓库"></a> 配置本地仓库：</h3><p>编译文件setting.xml（…\conf）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;settings xmlns=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span> </span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;pluginGroups /&gt;</span><br><span class="line">    &lt;proxies /&gt;</span><br><span class="line">    &lt;servers /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;localRepository&gt;D:\LocalMavenSpace&lt;/localRepository&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;<span class="attr">http:</span><span class="comment">//maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><p><a name="5up6L"></a></p><h3 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733288476-d34100e4-dce1-49f6-9f3f-00ce818c719d.png#align=left&amp;display=inline&amp;height=154&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=190&amp;originWidth=667&amp;size=10353&amp;status=done&amp;style=none&amp;width=539" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733349861-d211c5bd-3f9d-4eb4-8561-4596f9050084.png#align=left&amp;display=inline&amp;height=570&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=570&amp;originWidth=541&amp;size=38862&amp;status=done&amp;style=none&amp;width=541" alt="image.png" /><br /><a name="UWlOs"></a></p><h4 id="检查配置结果"><a class="markdownIt-Anchor" href="#检查配置结果"></a> 检查配置结果：</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733389679-9183a426-ecc3-4905-b6aa-e47397bf541b.png#align=left&amp;display=inline&amp;height=119&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=119&amp;originWidth=606&amp;size=6915&amp;status=done&amp;style=none&amp;width=606" alt="image.png" /><br /><a name="BNvXw"></a></p><h2 id="配置idea"><a class="markdownIt-Anchor" href="#配置idea"></a> 配置IDEA：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733832543-991af46f-fffc-4d86-b5bb-066aea19a95a.png#align=left&amp;display=inline&amp;height=715&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=715&amp;originWidth=998&amp;size=75985&amp;status=done&amp;style=none&amp;width=998" alt="image.png" /><br /><a name="SYv3d"></a></p><h1 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581734271450-ff7aae3e-bd72-48ed-b5db-61c48046b7a8.png#align=left&amp;display=inline&amp;height=750&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=750&amp;originWidth=1251&amp;size=125957&amp;status=done&amp;style=none&amp;width=1251" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581734400301-1267129e-77a4-4902-bfa9-d845826f004f.png#align=left&amp;display=inline&amp;height=750&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=750&amp;originWidth=1251&amp;size=46506&amp;status=done&amp;style=none&amp;width=1251" alt="image.png" /><br />等待自动配置完成：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581740820315-26e154f2-2a2f-44c9-af2c-9f64d01d776c.png#align=left&amp;display=inline&amp;height=255&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=255&amp;originWidth=402&amp;size=11931&amp;status=done&amp;style=none&amp;width=402" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581753381592-7413b89a-b912-4c7a-9966-e28d4b49d373.png#align=left&amp;display=inline&amp;height=334&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=334&amp;originWidth=693&amp;size=32788&amp;status=done&amp;style=none&amp;width=693" alt="image.png" /><br />完成创建<br /></p><h1 id="maven与gradle"><a class="markdownIt-Anchor" href="#maven与gradle"></a> Maven与Gradle</h1><p>maven界面：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581842897537-3ff55ab5-badb-40cb-813f-60d68c50d77d.png#align=left&amp;display=inline&amp;height=524&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1048&amp;originWidth=1920&amp;size=164560&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /><br />gradle界面：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581842906283-33cc36fc-89d9-41fb-ad7e-fce11eb70e2b.png#align=left&amp;display=inline&amp;height=524&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1048&amp;originWidth=1920&amp;size=161861&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /><br />相比Maven的繁文缛节，我更喜欢Gradle，而且Gradle的gradle.build比起Maven的pom.xml是简洁了无数倍，因此我更倾向gradle。<br />详细对比请见：<a href="https://blog.csdn.net/weixin_38405253/article/details/90598666">https://blog.csdn.net/weixin_38405253/article/details/90598666</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;CDPwW&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;开发出现的问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#开发出现的问题&quot;&gt;&lt;/a&gt; 开发出现的问题&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;一个项目就是一个工程，如果项目过于庞大，就不适</summary>
      
    
    
    
    <category term="maven" scheme="https://jie-blog.icu/categories/maven/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>光速入门XML</title>
    <link href="https://jie-blog.icu/posts/xml/"/>
    <id>https://jie-blog.icu/posts/xml/</id>
    <published>2020-09-05T09:14:06.000Z</published>
    <updated>2020-09-05T09:18:29.315Z</updated>
    
    <content type="html"><![CDATA[<p><a name="yql4v"></a></p><h1 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> XML</h1><p>xml是可扩展标识语言，就是开发者在符合xml命名规则的基础之上，可以根据自己的需求定义自己的标签。<br /><a name="dcJ0R"></a></p><h2 id="xml文件的作用"><a class="markdownIt-Anchor" href="#xml文件的作用"></a> XML文件的作用</h2><p>主要用来存储数据<br /><a name="42cSH"></a></p><h2 id="xml文件解析的方法"><a class="markdownIt-Anchor" href="#xml文件解析的方法"></a> XML文件解析的方法</h2><p>DOM、DOM4J、SAX<br /><a name="TB6iY"></a></p><h1 id="dom4j解析xml演示"><a class="markdownIt-Anchor" href="#dom4j解析xml演示"></a> DOM4J解析XML演示</h1><p><a name="zr7jI"></a></p><h2 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h2><p><a name="OGTzW"></a></p><h3 id="配置gradle"><a class="markdownIt-Anchor" href="#配置gradle"></a> 配置Gradle</h3><p>项目中在src/main/java目录中放置了xml或其他配置文件，需要把它复制到jar包中，并可以在ide中调试运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;java&#39;</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    from(&#39;src&#x2F;main&#x2F;java&#39;)&#123;</span><br><span class="line">        include &#39;**&#x2F;*.xml&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置解决了生存jar包时xml配置文件复制的问题，可是没有解决开发环境调试的问题。<br /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java&#123;</span><br><span class="line">            srcDir &#39;src&#x2F;main&#x2F;java&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir &#39;srcsrc&#x2F;main&#x2F;resources&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，resources目录下的文件也会复制到build/resource目录下，而且，不需要前面的jar中的from配置，jar包中也会存在配置文件。<br /><a name="70RAo"></a></p><h3 id="引入jar包"><a class="markdownIt-Anchor" href="#引入jar包"></a> 引入JAR包</h3><p>gradle配置如下：<br /><strong>&quot;org.dom4j:dom4j:2.1.1&quot;</strong><br /><a name="tXCg2"></a></p><h3 id="创建xml文件"><a class="markdownIt-Anchor" href="#创建xml文件"></a> 创建XML文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>XX大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>YY大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>654321<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>ZZ大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>987654<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="0SO9U"></a></p><h2 id="代码测试"><a class="markdownIt-Anchor" href="#代码测试"></a> 代码测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4jTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建解析器</span></span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过解析器将配置文件读到内存中，生成一个Document[org.dom4j]对象树</span></span><br><span class="line">            Document document = saxReader.read(<span class="string">&quot;conf/students.xml&quot;</span>);</span><br><span class="line">            <span class="comment">//获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//开始遍历根节点</span></span><br><span class="line">            Iterator&lt;Element&gt; iterator = root.elementIterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Element student = iterator.next();</span><br><span class="line">                Iterator&lt;Element&gt; innerIterator = student.elementIterator();</span><br><span class="line">                <span class="keyword">while</span> (innerIterator.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                        Element element = innerIterator.next();</span><br><span class="line">                        System.out.println(element.getStringValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="RIjiu"></a></p><h2 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1580763515251-0449cc31-0f00-42eb-ba3a-34ed9d988eb2.png#align=left&amp;display=inline&amp;height=248&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=248&amp;originWidth=360&amp;size=7862&amp;status=done&amp;style=none&amp;width=360" alt="image.png" /><br /><a name="D9gPk"></a></p><h1 id="sax解析xml演示"><a class="markdownIt-Anchor" href="#sax解析xml演示"></a> SAX解析XML演示</h1><p><a name="qj5XV"></a></p><h2 id="解析原理"><a class="markdownIt-Anchor" href="#解析原理"></a> 解析原理</h2><p>事件驱动，边读边写<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1580767650035-b8415da6-f92c-4996-9fd0-e11c0c80dd93.png#align=left&amp;display=inline&amp;height=683&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=683&amp;originWidth=1243&amp;size=482346&amp;status=done&amp;style=none&amp;width=1243" alt="image.png" /><br /><a name="l9gkC"></a></p><h2 id="代码测试-2"><a class="markdownIt-Anchor" href="#代码测试-2"></a> 代码测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaxTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建解析工厂</span></span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建解析器</span></span><br><span class="line">            SAXParser saxParser = factory.newSAXParser();</span><br><span class="line">            <span class="comment">//通过解析器的parse方法</span></span><br><span class="line">            saxParser.parse(<span class="string">&quot;conf/students.xml&quot;</span>, <span class="keyword">new</span> MyDefaultHandler());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | SAXException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDefaultHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&quot;</span> + qName + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&quot;</span> + qName + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(ch, start, length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="U2279"></a></p><h1 id="xpath解析xml演示"><a class="markdownIt-Anchor" href="#xpath解析xml演示"></a> XPath解析XML演示</h1><p>XPath使用路径表达式来选取XML文档中的节点或节点集，节点是通过沿着路经（path）或步（steps）来选取的。<br /><a href="https://www.w3school.com.cn/xpath/index.asp">https://www.w3school.com.cn/xpath/index.asp</a><br /><a name="6bAzW"></a></p><h2 id="环境配置-2"><a class="markdownIt-Anchor" href="#环境配置-2"></a> 环境配置</h2><p><a name="iHOpY"></a></p><h3 id="引入jar包-2"><a class="markdownIt-Anchor" href="#引入jar包-2"></a> 引入jar包</h3><p><strong>&quot;jaxen:jaxen:1.2.0&quot;</strong><br /><a name="L7pyL"></a></p><h3 id="配置xml"><a class="markdownIt-Anchor" href="#配置xml"></a> 配置XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">database-info</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">driver_name</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver_name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;9999&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">database-info</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="pkV1g"></a></p><h2 id="代码测试-3"><a class="markdownIt-Anchor" href="#代码测试-3"></a> 代码测试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class SysConfigParser &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建解析器</span><br><span class="line">        SAXReader reader=new SAXReader();</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过解析器的Read方法将配置文件读取到内存中，生成一个Document【org.dom4j】</span><br><span class="line">            Document document=reader.read(&quot;conf/sys_config.xml&quot;);</span><br><span class="line">            //diver-name节点元素的路径：config-&gt;database-info-&gt;driver_name</span><br><span class="line">            //driver-name节点元素的xpath路径：/config/database-info/driver_name</span><br><span class="line">            Element driverNameElt= (Element) document.selectSingleNode(&quot;/config/database-info/driver_name&quot;);</span><br><span class="line">            //获取driverNameElt节点元素对象的文本内容</span><br><span class="line">            String name=driverNameElt.getStringValue();</span><br><span class="line">            System.out.println(name);</span><br><span class="line"></span><br><span class="line">            //password元素节点路径 config-&gt;database-info-&gt;password</span><br><span class="line">            //driver-name节点元素的xpath路径：/config/database-info/password</span><br><span class="line">            //url节点元素的xpath路径：/config//password</span><br><span class="line">            //url节点元素的xpath路径：//password</span><br><span class="line">            Element driverPasswordElt= (Element) document.selectSingleNode(&quot;//password&quot;);</span><br><span class="line">            String password=driverPasswordElt.getStringValue();</span><br><span class="line">            System.out.println(password);</span><br><span class="line"></span><br><span class="line">            //connector节点元素对象的路径:config-&gt;database-info-&gt;connector</span><br><span class="line">            //获取connector节点元素对象的xpath路径：/config/database-info/connector</span><br><span class="line">            //获取connector节点元素对象的xpath路径：/config//connector</span><br><span class="line">            //获取connector节点元素对象的xpath路径：//connector</span><br><span class="line">            Element driverConnectorElt= (Element) document.selectSingleNode(&quot;//connector&quot;);</span><br><span class="line"></span><br><span class="line">            //获取属性对象</span><br><span class="line">            //方法一</span><br><span class="line">            String port=driverConnectorElt.attribute(&quot;port&quot;).getStringValue();</span><br><span class="line">            //方法二</span><br><span class="line">            String port2=driverConnectorElt.attributeValue(&quot;port&quot;);</span><br><span class="line">            System.out.println(port2);</span><br><span class="line"></span><br><span class="line">        &#125; catch (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="euMLo"></a></p><h1 id="dom4jxpath解析xml文件"><a class="markdownIt-Anchor" href="#dom4jxpath解析xml文件"></a> Dom4j+XPath解析XML文件</h1><p><a name="U3EQK"></a></p><h2 id="xml文件"><a class="markdownIt-Anchor" href="#xml文件"></a> XML文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>XX大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;9999&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>YY大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>654321<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>ZZ大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>987654<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;7777&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="dALcb"></a></p><h2 id="代码测试-4"><a class="markdownIt-Anchor" href="#代码测试-4"></a> 代码测试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class MixTest &#123;</span><br><span class="line">    public static void main(String[] args) throws SAXException &#123;</span><br><span class="line">        //创建解析工厂</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建解析器</span><br><span class="line">            DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">            //通过解析器来读取配置文件，生成一个对象树</span><br><span class="line">            Document document = builder.parse(&quot;conf/students.xml&quot;);</span><br><span class="line">            //创建Xpath对象</span><br><span class="line">            XPath xPath = XPathFactory.newInstance().newXPath();</span><br><span class="line"></span><br><span class="line">            //获取ID为3的名字</span><br><span class="line">            String titleXPath = &quot;/students/student[@id=&#x27;3&#x27;]/name&quot;;</span><br><span class="line">            String res = (String) xPath.evaluate(titleXPath, document, XPathConstants.STRING);</span><br><span class="line">            System.out.println(res);</span><br><span class="line"></span><br><span class="line">            //获取所有Student节点下的Name集合</span><br><span class="line">            NodeList list = (NodeList) xPath.evaluate(&quot;/students/student&quot;, document, XPathConstants.NODESET);</span><br><span class="line">            //遍历</span><br><span class="line">            for (int i = 0; i <span class="tag">&lt; <span class="attr">list.getLength</span>(); <span class="attr">i</span>++) &#123;</span></span><br><span class="line"><span class="tag">                <span class="attr">Element</span> <span class="attr">element</span> = <span class="string">(Element)</span> <span class="attr">list.item</span>(<span class="attr">i</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">String</span> <span class="attr">name</span> = <span class="string">(String)</span> <span class="attr">xPath.evaluate</span>(&quot;<span class="attr">name</span>&quot;, <span class="attr">element</span>, <span class="attr">XPathConstants.STRING</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">System.out.println</span>(<span class="attr">name</span>);</span></span><br><span class="line"><span class="tag">            &#125;</span></span><br><span class="line"><span class="tag">        &#125; <span class="attr">catch</span> (<span class="attr">ParserConfigurationException</span> | <span class="attr">IOException</span> | <span class="attr">XPathExpressionException</span> <span class="attr">e</span>) &#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">e.printStackTrace</span>();</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;yql4v&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;xml&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xml&quot;&gt;&lt;/a&gt; XML&lt;/h1&gt;
&lt;p&gt;xml是可扩展标识语言，就是开发者在符合xml命名规则的基础之上，可以根据自己的需</summary>
      
    
    
    
    <category term="零散知识" scheme="https://jie-blog.icu/categories/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数据交互" scheme="https://jie-blog.icu/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
    <category term="零碎知识点" scheme="https://jie-blog.icu/tags/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Servlet4</title>
    <link href="https://jie-blog.icu/posts/servlet4/"/>
    <id>https://jie-blog.icu/posts/servlet4/</id>
    <published>2020-09-02T09:32:13.000Z</published>
    <updated>2020-09-05T09:42:36.697Z</updated>
    
    <content type="html"><![CDATA[<p><a name="5sTHi"></a></p><h1 id="主要新功能"><a class="markdownIt-Anchor" href="#主要新功能"></a> 主要新功能</h1><p>Servelt4.0支持Http/2、服务器推送并提供了一套全新的API。<br /><a name="HLu3s"></a></p><h2 id="服务器推送"><a class="markdownIt-Anchor" href="#服务器推送"></a> 服务器推送</h2><p>服务器推送是Http2的直接体现，通过PushBuilder接口在servlet中公开。在JavaServer Faces API中也可以实现服务器推送功能，在RenderResponsePhase声明周期内调用，可以增强JSF页面的性能。<br /><a name="9yyel"></a></p><h2 id="全新httpservletmapping-api"><a class="markdownIt-Anchor" href="#全新httpservletmapping-api"></a> 全新HttpServletMapping API</h2><p>新的Servlet映射发现接口HttpServletMapping，框架能够获取到有关激活给定servlet的url信息。对于一些依赖这一信息来运行的框架而言，这算得上是福音了。<br /><a name="O97dX"></a></p><h1 id="服务器推送-2"><a class="markdownIt-Anchor" href="#服务器推送-2"></a> 服务器推送</h1><p><a name="IGh0Q"></a></p><h2 id="改进了浏览器感知的性能"><a class="markdownIt-Anchor" href="#改进了浏览器感知的性能"></a> 改进了浏览器感知的性能</h2><p>启用服务器推送可提高浏览器的性能，因为服务器比客户更能了解请求可能要求的附加资产（如图像，样式表和JavaScript）。         例如，服务器可以知道，无论何时浏览器请求index.html页面，它都会请求标识图像，样式表和菜单JavaScript等。由于服务器知道这一点，他们可以先发制人地开始发送这些资产处理index.html。<br /><a name="Q6Akn"></a></p><h3 id="不是web-sockets的替代品"><a class="markdownIt-Anchor" href="#不是web-sockets的替代品"></a> 不是Web Sockets的替代品</h3><p>它只是允许你填充浏览器缓存。预计构建在像JSF这样的Servlet上的框架将使用这个框架，并且我们使用push builder API来解决这个问题。<br /><a name="blog-content-area-3"></a></p><h2 id="典型的流程"><a class="markdownIt-Anchor" href="#典型的流程"></a> 典型的流程</h2><p>浏览器请求索引页面。服务器会注意到它需要_<strong>style_1.css</strong><em>和</em><strong>javaScript_1.js</strong>_  文件，所以我们从HTTP请求中获取_<strong>PushBuilder</strong><em>，并将路径设置为</em><strong>style_1.css</strong><em>文件并调用push，然后将路径设置为</em><strong>javaScript_1。 js</strong>_文件并再次调用推送。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582715400288-f1a4eff3-78f4-45b2-b9e8-15c618c1190c.png#align=left&amp;display=inline&amp;height=469&amp;margin=%5Bobject%20Object%5D&amp;originHeight=469&amp;originWidth=395&amp;size=0&amp;status=done&amp;style=none&amp;width=395" alt="" /><br /><br /><br />注意在这种情况下，CSS和JavaScript将首先返回到客户端，然后index页面返回。<br /><a name="rsQzK"></a></p><h3 id="从http请求推送生成器"><a class="markdownIt-Anchor" href="#从http请求推送生成器"></a> 从HTTP请求推送生成器</h3><p>只需从HTTP Request对象中获取推式生成器，并将路径设置为资源并推送即可。<br />在这个序列图中有两件事要注意，<br />(adsbygoogle = window.adsbygoogle || []).push({});</p><ul><li>推构建器可以重用。在示例中，我使用推式构建器将两个资源推送到CSS文件和JavaScript文件。</li><li>第二件事是index.html在推送资源后返回浏览器。</li></ul><p>原因是，如果索引在推送资源之前返回，浏览器将分析它并看到它需要这两个资源。**它会查看缓存并查看它没有这些资源，它会请求它们。**此时，浏览器缓存将不会预填充。所以推送的资源必须在索引发送之前先返回。<br /><a name="2wcRB"></a></p><h3 id="推送答应"><a class="markdownIt-Anchor" href="#推送答应"></a> 推送答应</h3><p>前面提到的其中一种框架类型是  _<strong>RST_STREAM，</strong> <em>这就是客户如何拒绝推送承诺。因此，如果服务器推送一个资源，并且浏览器已经将其存储在缓存中，那么不是让服务器发送文件，而是发送一个</em><strong>RST_STREAM</strong> _帧，表明它已经有文件文件，因此不发送它。<br /><a name="NiM1T"></a></p><h2 id="pushbuilder"><a class="markdownIt-Anchor" href="#pushbuilder"></a> PushBuilder</h2><p>要使用服务器推送，从**<em>HttpServletRequest</em><strong>获取对</strong><em>PushBuilder</em> <strong>的引用，根据需要改变生成器，然后调用  <em><strong>push（）</strong></em>  方法。<br />_ 复制_<code>PubshBuilder pubshBuilder= request.getPubshBuilder();</code><br />这会根据从中获取此构建器的</strong><em>HttpServletRequest</em>**构建推送请求<img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582715407378-a1f33cdf-aee3-436b-8a13-324fe6b47c41.png#align=left&amp;display=inline&amp;height=260&amp;margin=%5Bobject%20Object%5D&amp;originHeight=260&amp;originWidth=620&amp;size=0&amp;status=done&amp;style=none&amp;width=620" alt="" /><br /> <br />这会根据从中获取此构建器的_<strong>HttpServletRequest</strong>_生成推送请求。<br />(adsbygoogle = window.adsbygoogle || []).push({}); <br /><a name="Vety5"></a></p><h3 id="javaxservlethttppushbuilder类"><a class="markdownIt-Anchor" href="#javaxservlethttppushbuilder类"></a> javax.servlet.http.PushBuilder类</h3><p>推送请求由请求方法设置为GET 构建。有条件， 范围， 期望， 授权和请求标题被删除。只有在maxAge未过期的情况下才会添加Cookie 。请求标头将被设置为请求URL和存在的任何查询字符串。如果  If-Modified-Since  或  If-None-Match  中的任何一个出现，则  isConditional（）  将被设置为true。<br /><a name="JekTQ"></a></p><h3 id="只有uri路径必需"><a class="markdownIt-Anchor" href="#只有uri路径必需"></a> 只有URI路径必需</h3><p>唯一需要的设置是要用于推送请求的URI路径。这必须在每次调用_<strong>push（）</strong><em>之前调用  。如果路径包含查询字符串，则查询字符串将附加到现有查询字符串（如果有），并且不会发生重复数据删除。<br />以’/'开头的路径被视为绝对路径。所有其他路径都视为相对于用于创建此构建器实例的请求的上下文路径。该路径可能包含查询字符串。<br />通过 在</em><strong>pushBuilder</strong><em>实例上调用</em><strong>push（）</strong><em>方法来</em><strong>推送</strong>_资源  。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/WelcomeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> ServletException,IOException</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.getRequestURI.equals(<span class="string">&quot;/index.html&quot;</span>)&amp;&amp;reqeust.isPubshSupported())&#123;</span><br><span class="line">   request.getPushBuilder().path(<span class="string">&quot;/images/logo.jpg&quot;</span>).push();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7C1OZ"></a></p><h3 id="过滤器和服务器推送"><a class="markdownIt-Anchor" href="#过滤器和服务器推送"></a> 过滤器和服务器推送</h3><p>解决这个问题的另一种方法是在过滤器中实现服务器推送。Jetty  在  <em><strong>org.eclipse.jetty.servlets</strong></em>  包中有一个  <em><strong>PushCacheFilter</strong></em>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.servlet4preview.http.PushBuilder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns=&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest httpServletRequest=(HttpServletRequest)request;</span><br><span class="line">String uri=httpServletRequest.getRequestURI();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (uri) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/index.html&quot;</span>:</span><br><span class="line">PushBuilder pushBuilder=httpServletRequest.getPushBuilder();</span><br><span class="line">pushBuilder.path(<span class="string">&quot;/styles.css&quot;</span>).push();</span><br><span class="line">pushBuilder.path(<span class="string">&quot;/logo.png&quot;</span>).push();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">chain.doFilter(request, response);;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="N2nSh"></a></p><h3 id="jsf用例"><a class="markdownIt-Anchor" href="#jsf用例"></a> JSF用例</h3><p>框架案例是服务器推送最重要的用例之一。它完全依赖于服务器事先知道客户在客户请求之前要求的资源。服务器端Web框架可以充分利用服务器推送的优势。<br />所以JSF可以很容易地使用服务器推送。所以每当JSF要呈现样式表时，例如，它将调用_<strong>encodeResourceURL</strong>_方法，这是入口点，在这里我们可以初始化服务器推送的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExternalContextImp</span> <span class="keyword">extends</span> <span class="title">ExternalContext</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">encodeResourceURL</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> ((HttpServletRequest)request).getPushBuilder().path(url).push();</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> <span class="keyword">return</span> ((HttpServletResponse)response).encodeURL(url);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是Web框架的工作原理，就像JSF将能够利用服务器推送修改一样。这还没有实现，我们将看看他们是如何决定这么做的，或者他们是否想出了另一种方法。<br /><a name="UMGVf"></a></p><h3 id="禁用拒绝服务器推送"><a class="markdownIt-Anchor" href="#禁用拒绝服务器推送"></a> 禁用/拒绝服务器推送</h3><p>客户端可以通过发送_<strong>SETTINGS_ENABLE_PUSH</strong><em>设置值0（零）来显式禁用服务器推送。<br />除了允许客户端使用</em><strong>SETTINGS_ENABLE_PUSH</strong><em>设置禁用服务器推送之外，servlet容器还必须尊重客户端的请求，以便不通过引用推送流的流标识符的</em><strong>CANCEL</strong><em>或</em><strong>REFUSED_STREAM</strong>_代码在更细粒度的基础上接收推送的响应。这种交互的一个常见用途是浏览器在其缓存中已有资源时。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;5sTHi&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;主要新功能&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#主要新功能&quot;&gt;&lt;/a&gt; 主要新功能&lt;/h1&gt;
&lt;p&gt;Servelt4.0支持Http/2、服务器推送并提供了一套全新的AP</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>文件上传下载</title>
    <link href="https://jie-blog.icu/posts/fileload/"/>
    <id>https://jie-blog.icu/posts/fileload/</id>
    <published>2020-09-02T09:27:30.000Z</published>
    <updated>2020-09-05T09:42:39.181Z</updated>
    
    <content type="html"><![CDATA[<p><a name="BMU76"></a></p><h1 id="前端部分"><a class="markdownIt-Anchor" href="#前端部分"></a> 前端部分</h1><p>提供一个post方法的表单，并设置<code>enctype</code>属性（设置请求内容的MIME类型）为<code>multpart/from-data</code>，代表该表单支持文件上传，并且提供一个文件上传框：<code>&lt;input type=&quot;file&quot;&gt;。</code><br /><a name="3J79I"></a></p><h2 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/xxx&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;description&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><a name="UguTv"></a></p><h1 id="后端部分"><a class="markdownIt-Anchor" href="#后端部分"></a> 后端部分</h1><p>将内容通过流读取进来，举例：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    InputStream in = request.getInputStream();</span><br><span class="line">    ServletOutputStream out = response.getOutputStream();</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>((len = in.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(b, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果为：</span><br><span class="line">------WebKitFormBoundary5x8Olc9cfCFQzCFd</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;description&quot;</span></span><br><span class="line">这是一个测试描述</span><br><span class="line">------WebKitFormBoundary5x8Olc9cfCFQzCFd</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;1.txt&quot;</span></span><br><span class="line">Content-Type: text/plain</span><br><span class="line">这是<span class="number">1.</span>txt的内容</span><br><span class="line">------WebKitFormBoundary5x8Olc9cfCFQzCFd--</span><br></pre></td></tr></table></figure><p><a name="YLzaC"></a></p><h2 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h2><p>是apache的commons组件提供的上传组件，主要用于解析上传的输入流内容，比如上面可以看出内容都是上传的各个表单内容的字节流，并且是混杂在一起的，而该组件则可以对这些流进行分类和处理。<br /><a name="mHxqH"></a></p><h5 id="使用步骤"><a class="markdownIt-Anchor" href="#使用步骤"></a> 使用步骤</h5><p>1.添加相关jar包——<code>commons-fileupload</code>/<code>commons-io</code>（放到<code>WEB-INF/lib</code>下）<br />2.实例化工厂类<code>DiskFileItemFactory()</code>对象<br />3.实例化工厂解析类<code>ServletFileUpload()</code>对象<br />4.调用解析类对象的<code>parseRequest()</code>方法进行解析，里面直接传入<code>request</code>对象即可，返回的是一个<code>List&lt;FileItem&gt;</code>对象（解析前可以先通过<code>isMultipartContent()</code>方法来判断传入的request对象是否支持文件上传）<br /><a name="0zSsX"></a></p><h5 id="核心对象"><a class="markdownIt-Anchor" href="#核心对象"></a> 核心对象</h5><p><a name="x7MaH"></a></p><h6 id="1diskfileitemfactory"><a class="markdownIt-Anchor" href="#1diskfileitemfactory"></a> 1.DiskFileItemFactory</h6><p>工厂类<br /><a name="Snbpl"></a></p><h6 id="2servletfileupload"><a class="markdownIt-Anchor" href="#2servletfileupload"></a> 2.ServletFileUpload</h6><p>用于解析工厂对象的解析类<br /><a name="uabBQ"></a></p><h6 id="3fileitem"><a class="markdownIt-Anchor" href="#3fileitem"></a> 3.FileItem</h6><p>代表表单项，比如下面这样就是一个FileItem：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;1.txt&quot;</span></span><br><span class="line">Content-Type: text/plain</span><br><span class="line">这是<span class="number">1.</span>txt的内容</span><br></pre></td></tr></table></figure><p>其主要提供了以下方法：<br />(1)<code>isFormField()</code>：判断是否为普通文本字段，如果返回false，表明是文件字段<br />(2)<code>getContentType()</code>：获取上传文件的类型<br />其中对于普通表单项（<code>text</code>、<code>password</code>等）提供了以下方法：<br />(1)<code>getFieldName()</code>：获取字段名<br />(2)<code>getString()</code>：获取值，可以传入编码参数来设置编码<br />对于上传的文件提供了以下方法：<br />(1)<code>getInputStream()</code>：获取文件输入流<br />(2)<code>getName()</code>：获取文件名<br />(3)<code>getSize()</code>：获取文件大小<br />(4)<code>write(File)</code>：把上传的文件内容保存到指定文件中<br /><a name="K6msr"></a></p><h5 id="上传并输出文件示例"><a class="markdownIt-Anchor" href="#上传并输出文件示例"></a> 上传并输出文件示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();  <span class="comment">//实例化工厂对象</span></span><br><span class="line">    ServletFileUpload fileupload = <span class="keyword">new</span> ServletFileUpload(factory);  <span class="comment">//实例化工厂解析对象</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;FileItem&gt; list = fileupload.parseRequest(request);  <span class="comment">//解析工厂</span></span><br><span class="line">        <span class="keyword">for</span> (FileItem f : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!f.isFormField()) &#123;  <span class="comment">//当为文件字段</span></span><br><span class="line">                String directoryname = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">                File directory = <span class="keyword">new</span> File(directoryname);</span><br><span class="line">                <span class="keyword">if</span>(!directory.exists() || !directory.isDirectory())&#123;  <span class="comment">//创建上传目录</span></span><br><span class="line">                    directory.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(f.getFieldName());   <span class="comment">//file</span></span><br><span class="line">                System.out.println(f.getName()); <span class="comment">// xxx.jpg，只有文件名</span></span><br><span class="line">                System.out.println(f.getContentType()); <span class="comment">//image/jpeg</span></span><br><span class="line">                InputStream in = f.getInputStream();</span><br><span class="line">                ServletOutputStream out = response.getOutputStream();</span><br><span class="line">                FileOutputStream file = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(directoryname, f.getName()));  <span class="comment">//根据传的文件名命名</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((len = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(b, <span class="number">0</span>, len);  <span class="comment">//输出图像</span></span><br><span class="line">                    file.write(b, <span class="number">0</span>, len);  <span class="comment">//保存文件</span></span><br><span class="line">                &#125;</span><br><span class="line">                file.close();  <span class="comment">//关闭文件</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="AyWnF"></a></p><h5 id="文件上传路径名问题"><a class="markdownIt-Anchor" href="#文件上传路径名问题"></a> 文件上传路径名问题</h5><p>可以看到上面传输的文件只会获得文件名，但在一些如IE浏览器中容易出现传输的文件名带路径的问题，如：<code>C:/XXX/xxx.xx</code>，此时上面的代码就会出错。因此可以使用<code>commons-io</code>包下<code>FilenameUtils</code>类提供的静态方法<code>getName()</code>，其对于不管是否带路径的文件字符串，都只会获取文件名部分的字符串，举例：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(FilenameUtils.getName(<span class="string">&quot;c:/sda/fdg/s&quot;</span>));  <span class="comment">//s</span></span><br><span class="line">System.out.println(FilenameUtils.getName(<span class="string">&quot;c:/sda/fdg/s.fs&quot;</span>));  <span class="comment">//s.fs</span></span><br><span class="line">System.out.println(FilenameUtils.getName(<span class="string">&quot;s.de&quot;</span>));  <span class="comment">//s.de</span></span><br><span class="line">System.out.println(FilenameUtils.getName(<span class="string">&quot;fdg/s&quot;</span>));  <span class="comment">//s</span></span><br><span class="line">System.out.println(FilenameUtils.getName(<span class="string">&quot;/sda/fdg/s&quot;</span>));  <span class="comment">//s</span></span><br></pre></td></tr></table></figure><p><a name="9d03A"></a></p><h5 id="文件上传问题"><a class="markdownIt-Anchor" href="#文件上传问题"></a> 文件上传问题</h5><p><a name="huxDx"></a></p><h6 id="1注入问题"><a class="markdownIt-Anchor" href="#1注入问题"></a> 1.注入问题</h6><p>对于上面那段代码，会在项目下新建一个upload文件夹，并生成对应文件，此时访问：<code>http://127.0.0.1:8080/项目名/upload/文件名</code>即可看到刚才上传的文件内容。但是，此时要注意如果上传了像下面这样的文件：<br /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//xxx.jsp</span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Runtime.getRuntime</span>()<span class="attr">.exec</span>(&quot;<span class="attr">notepad</span>&quot;);</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，在服务器上可能就会执行该<code>notepad</code>命令打开记事本，即在服务器上执行了用户上传的脚本文件<br /><strong>解决方式：</strong><br />(1)将上传的文件放到用户无法访问到的文件路径下，如：<code>WEB-INF</code><br />(2)限制上传的文件类型，如jsp、exe、bat等<br /><a name="AePqd"></a></p><h6 id="2文件覆盖问题"><a class="markdownIt-Anchor" href="#2文件覆盖问题"></a> 2.文件覆盖问题</h6><p>对于在上传保存的路径下原有的文件，如果上传的文件和原有的文件重名，将可能发生原文件被覆盖的问题。<br /><strong>解决方式：</strong><br />给文件名进行处理，如给文件名加上UUID使得名字唯一等<br /><a name="gCQ0P"></a></p><h6 id="3文件夹文件内容过多问题"><a class="markdownIt-Anchor" href="#3文件夹文件内容过多问题"></a> 3.文件夹文件内容过多问题</h6><p><strong>解决方式：</strong><br />对文件夹目录等进行分类存储，如按日期/文件类别等<br /><a name="ykCWX"></a></p><h6 id="4文件内容过大"><a class="markdownIt-Anchor" href="#4文件内容过大"></a> 4.文件内容过大</h6><p><strong>解决方式：</strong><br />通过<code>ServletFileUpload</code>下的<code>setFileSizeMax()</code>方法限制单个文件大小，或者<code>setSizeMax()</code>设置总文件上传大小，或者通过<code>getSize()</code>获取文件大小后根据上传的文件大小进行处理，举例：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">ServletFileUpload fileupload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">fileupload.setSizeMax(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">3</span>);  <span class="comment">//文件大小总和不超过3M</span></span><br><span class="line">fileupload.setFileSizeMax(<span class="number">1024</span> * <span class="number">1024</span>);  <span class="comment">//单个文件大小不超过1M</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileUploadBase.SizeLimitExceededException e) &#123;</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;文件总和内容过大！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileUploadBase.FileSizeLimitExceededException e) &#123;</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;文件内容过大！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="HaAk4"></a></p><h6 id="5上传文件为空"><a class="markdownIt-Anchor" href="#5上传文件为空"></a> 5.上传文件为空</h6><p><strong>解决方式：</strong><br />判断上传的文件名是否为空<br /><a name="xbfQ5"></a></p><h6 id="6产生临时文件"><a class="markdownIt-Anchor" href="#6产生临时文件"></a> 6.产生临时文件</h6><p>在上传文件过程中往往会产生临时文件，导致磁盘空间不足，或者造成磁盘空间的浪费<br /><strong>解决方式：</strong><br />(1)使用<code>DiskFileItemFactory</code>对象的<code>setRepository(File)</code>方法设置临时文件存储位置，举例：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">factory.setRepository(<span class="keyword">new</span> File(<span class="string">&quot;F:/&quot;</span>));  <span class="comment">//在F盘下存放临时文件</span></span><br></pre></td></tr></table></figure><p>(2)通过<code>FileItem</code>下的<code>delete()</code>方法将临时文件删除，举例：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">ServletFileUpload fileupload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">List&lt;FileItem&gt; list = fileupload.parseRequest(request);</span><br><span class="line"><span class="keyword">for</span> (FileItem f : list) &#123;</span><br><span class="line">    ...</span><br><span class="line">    f.delete();  <span class="comment">//将临时文件删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7y7n9"></a></p><h2 id="文件下载"><a class="markdownIt-Anchor" href="#文件下载"></a> 文件下载</h2><p>在返回头response中添加下面的头信息即可：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=文件名&quot;</span> );</span><br><span class="line">response.setHeader(<span class="string">&quot;content-type&quot;</span>, 文件类型);</span><br></pre></td></tr></table></figure><p>举例：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/img/测试图片.jpg&quot;</span>)));</span><br><span class="line">    ServletOutputStream out = response.getOutputStream();</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + <span class="keyword">new</span> String(<span class="string">&quot;测试.jpg&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;iso-8859-1&quot;</span>));  <span class="comment">//避免文件名乱码</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>((len = in.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(b, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong><br />对于上面的文件类型是手动设置十分不便，因此可以用<code>ServletContext</code>下的<code>getMimeType(文件名)</code>方法来根据文件名自动获得文件类型，举例：<br /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="keyword">this</span>.getServletContext().getMimeType(<span class="string">&quot;xxx.jpg&quot;</span>));  <span class="comment">//自动设置为image/jpeg</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;BMU76&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前端部分&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前端部分&quot;&gt;&lt;/a&gt; 前端部分&lt;/h1&gt;
&lt;p&gt;提供一个post方法的表单，并设置&lt;code&gt;enctype&lt;/code&gt;属</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Servlet3</title>
    <link href="https://jie-blog.icu/posts/servlet3/"/>
    <id>https://jie-blog.icu/posts/servlet3/</id>
    <published>2020-09-02T09:23:54.000Z</published>
    <updated>2020-09-05T09:42:37.313Z</updated>
    
    <content type="html"><![CDATA[<p>默认Servlet3.0是没有web.xml文件的，因此servlet3.0是通过注解注册的而不是web.xml文件进行注册。<br />可以通过如下方法快速生成servlet<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582433597734-bc930080-d1be-4b68-8b3a-99d3a7d59efc.png#align=left&amp;display=inline&amp;height=347&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=694&amp;originWidth=662&amp;size=92456&amp;status=done&amp;style=none&amp;width=331" alt="image.png" /><br /><a name="SnCDU"></a></p><h1 id="注解"><a class="markdownIt-Anchor" href="#注解"></a> 注解</h1><p>web.xml和注释是一样的，所以如果做了相同操作可能会报错或者重复操作，但如果在web.xml中添加属性metadata-complete并赋值为true，则会只让web.xml注册起作用忽略注释，默认为false。<br /><a name="SMc9a"></a></p><h2 id="servlet的注解"><a class="markdownIt-Anchor" href="#servlet的注解"></a> Servlet的注解</h2><p>代码样式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/ServletDemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)</span> <span class="keyword">throws</span> javax.servlet.ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)</span> <span class="keyword">throws</span> javax.servlet.ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="L9Tvo"></a></p><h3 id="url-pattern"><a class="markdownIt-Anchor" href="#url-pattern"></a> url-pattern</h3><p>注解的括号里的value、url-pattern的使用方法和web.xml中的url-pattern使用方法相同（当前形式省略了关键字value），也可以写为如下形式：@WebServlet(value={&quot;/ServletDemo&quot;,&quot;/bb&quot;,&quot;/aa&quot;})、@WebServlet(urlPattens={&quot;/ServletDemo&quot;,&quot;/bb&quot;,&quot;/aa&quot;})。<br /><a name="3Dhxl"></a></p><h3 id="servletname"><a class="markdownIt-Anchor" href="#servletname"></a> ServletName</h3><p>ServletName变为注释中的name属性，可以写为<code>@WebServlet(value = &quot;/ServletDemo&quot;,name = &quot;ServletDemo&quot;)</code>的形式并且通过类中的getServletName等方法调用。<br /><a name="Nz9Po"></a></p><h3 id="init-param"><a class="markdownIt-Anchor" href="#init-param"></a> init-param</h3><p>初始化参数拥有param-name、param-value的属性，需要在注释中按通过initParams的方法赋值，里面的值是一个数组的形式，可以添加多组，如下所示：<code>@WebServlet(value = &quot;/ServletDemo&quot;, initParams = &#123;@WebInitParam(name = &quot;name&quot;, value = &quot;张三&quot;), @WebInitParam(name = &quot;name&quot;, value = &quot;李四&quot;)&#125;)</code><br /><a name="WCJKv"></a></p><h3 id="load-on-startup"><a class="markdownIt-Anchor" href="#load-on-startup"></a> load-on-startup</h3><p>该参数用于调整加载启动顺序，在注释中通过loadOnStartup参数赋值，例如：<code>@WebServlet(value = &quot;/ServletDemo&quot;, loadOnStartup = 2)</code><br /><a name="Gj1s2"></a></p><h2 id="filter的注解"><a class="markdownIt-Anchor" href="#filter的注解"></a> Filter的注解</h2><p>@WebFilter 用于将一个类声明为<mark>过滤器</mark>，该注解将会在部署时被容器处理，容器将根据具体的属性配置将相应的类部署为过滤器。该注解具有下表给出的一些常用属性 ( 以下所有属性均为可选属性，但是 value、urlPatterns、servletNames 三者必需至少包含一个，且 value 和 urlPatterns 不能共存，如果同时指定，通常忽略 value 的取值 )，使用和创建方法和Servlet完全一致。<br /><a name="yeMQL"></a></p><h3 id="常用属性"><a class="markdownIt-Anchor" href="#常用属性"></a> 常用属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582436507931-a9911b70-0d81-461d-a12a-6a1da97148cf.png#align=left&amp;display=inline&amp;height=448&amp;margin=%5Bobject%20Object%5D&amp;originHeight=448&amp;originWidth=866&amp;size=0&amp;status=done&amp;style=none&amp;width=866" alt="" /><br /><a name="WoFKU"></a></p><h2 id="linster的注解"><a class="markdownIt-Anchor" href="#linster的注解"></a> Linster的注解</h2><p>Linster很简单，只有一个value的属性用于描述，因此linster注释一般不使用属性。<br /><a name="tfFl4"></a></p><h1 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h1><p>重点接口如下：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582438930556-17999fe3-9eb4-41fc-83ac-1deb156174a1.png#align=left&amp;display=inline&amp;height=421&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=842&amp;originWidth=1277&amp;size=86472&amp;status=done&amp;style=none&amp;width=638.5" alt="image.png" /><br /><a name="hGJx2"></a></p><h2 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h2><p>注意，在IDEA中存在一个BUG，他不会加载空目录，空的目录idea不会更新到服务器（这应该是个bug），所以可以在里面随便放个文件，哪怕再删掉也行，我活活研究一整天。<br /><a name="CTZHU"></a></p><h3 id="html"><a class="markdownIt-Anchor" href="#html"></a> html：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/UpLoadServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="EbzWz"></a></p><h3 id="uploadservlet"><a class="markdownIt-Anchor" href="#uploadservlet"></a> UpLoadServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/UpLoadServlet&quot;)</span></span><br><span class="line"><span class="comment">//表示当前Servlet可以处理Multipart请求</span></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpLoadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取服务器保存上传文件的路径</span></span><br><span class="line">        String path = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/images&quot;</span>);</span><br><span class="line">        <span class="comment">//从请求中获取Multipart请求中的上传文件对象</span></span><br><span class="line">        Part part = request.getPart(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">        <span class="comment">//保存到path</span></span><br><span class="line">        System.out.println(path);</span><br><span class="line">        part.write(path + File.separator + part.getSubmittedFileName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="ulFDh"></a></p><h1 id="异步处理"><a class="markdownIt-Anchor" href="#异步处理"></a> 异步处理</h1><p>更多分析见：<a href="https://segmentfault.com/a/1190000012318350">https://segmentfault.com/a/1190000012318350</a><br /><a name="m5Ilq"></a></p><h2 id="问题引出"><a class="markdownIt-Anchor" href="#问题引出"></a> 问题引出</h2><p>这里与AJAX不同，这个是服务器端的异步处理。Web容器一般来说处理请求的方式是：为每个request分配一个thread。创建线程需要付出代价并且Web容器的thread pool都是有上限的。因此，在高负载情况下，thread pool都被占着了，那么后续的request就只能等待，如果运气不好客户端会报等待超时的错误。原先的解决方式是线程池，但耗时request和非耗时request混在一起导致了当大量request到一个耗时操作时，就会将HTTP thread占满，导致整个Web容器就会无法响应。<br />因此，引出了异步处理可以将耗时的操作交给另一个thread去做，这样HTTP thread就被释放出来了，可以去处理其他请求了。<br /><a name="4tjws"></a></p><h2 id="误解"><a class="markdownIt-Anchor" href="#误解"></a> 误解</h2><p>AsyncContext的目的并不是为了提高性能，也并不直接提供性能提升，它提供了把HTTP thread和Worker thread解藕的机制，从而提高Web容器的响应能力。<br /><a name="hlFCE"></a></p><h2 id="图解"><a class="markdownIt-Anchor" href="#图解"></a> 图解</h2><p><a name="sLZU7"></a></p><h3 id="原始"><a class="markdownIt-Anchor" href="#原始"></a> 原始</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582478041678-7f46cc1e-d674-446e-b1e4-8fdc173b2ccc.png#align=left&amp;display=inline&amp;height=246&amp;margin=%5Bobject%20Object%5D&amp;originHeight=246&amp;originWidth=549&amp;size=0&amp;status=done&amp;style=none&amp;width=549" alt="" /><br /><a name="qp6C2"></a></p><h3 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582478103825-c9ecf76f-3ddd-4a74-8da7-02176795f0ad.png#align=left&amp;display=inline&amp;height=246&amp;margin=%5Bobject%20Object%5D&amp;originHeight=246&amp;originWidth=730&amp;size=0&amp;status=done&amp;style=none&amp;width=730" alt="" /><br /><a name="vXHre"></a></p><h2 id="基本异步处理实现"><a class="markdownIt-Anchor" href="#基本异步处理实现"></a> 基本异步处理实现</h2><p><a name="oM4FG"></a></p><h3 id="webxml-开启"><a class="markdownIt-Anchor" href="#webxml-开启"></a> web.xml 开启</h3><p>Servlet3.0 默认是没有 web.xml 文件的，但 Servlet3.0 也是支持 web.xml 文件的，较 Servlet之前的版本，Servlet 3.0 在 <servlet>和 <filter> 标签中增加了 <async-supported> 子标签，该标签默认是 false 。如果想启用异步支持，只需要置为 true 即可。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>asynServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.servlet.AsynServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Filter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>asynFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.filter.AsynFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="mOoJf"></a></p><h3 id="注释开启"><a class="markdownIt-Anchor" href="#注释开启"></a> 注释开启</h3><p>Servlet 3.0 提供的 @WebServlet 和 @WebFilter 进行 Servlet 或 Filter 配置的情况，这两个注解都提供了 asyncSupported 属性，默认该属性的取值为 false。如果想启用异步支持，只需要置为 true 即可。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(value=&quot;/ServletAsyn&quot;,asyncSupported=true)</span><br><span class="line">public class ServletAsyn extends HttpServlet &#123;...&#125;</span><br><span class="line"></span><br><span class="line">@WebFilter(value=&quot;/*&quot;,asyncSupported=true)</span><br><span class="line">public class FilterAsyn implements Filter &#123;...&#125;</span><br></pre></td></tr></table></figure><p><a name="FYY1f"></a></p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582481737594-4010bd3f-2e47-4eb8-a366-f315cc7bba30.png#align=left&amp;display=inline&amp;height=77&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=113&amp;originWidth=1094&amp;size=178788&amp;status=done&amp;style=none&amp;width=746" alt="image.png" /><br /><a name="nMMPU"></a></p><h4 id="异步线程类"><a class="markdownIt-Anchor" href="#异步线程类"></a> 异步线程类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.AsyncContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> AsyncContext ac;  <span class="comment">//定义一个异步上下文</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadTask</span><span class="params">(AsyncContext ac)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.ac = ac;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 服务端异步典型应用是注册时向邮箱发送验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//进行异步的一些处理</span></span><br><span class="line">HttpServletRequest requst = (HttpServletRequest) ac.getRequest();</span><br><span class="line">HttpSession session = requst.getSession();</span><br><span class="line">System.out.println(<span class="string">&quot;asyn-task start&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&gt;<span class="number">0</span>; i--) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将结果放到session等方式</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;This is the result of asyn&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;asyn-task end&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知主线程已经处理完成</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 除了使用 ac.complete() 方法通知主线程已经处理外</span></span><br><span class="line"><span class="comment"> * 还可以使用 ac.dispatch() 方法重定向到一个页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ac.dispatch(<span class="string">&quot;/show.jsp&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e78UW"></a></p><h4 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.AsyncContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(value=&quot;/asyn-servlet&quot;,asyncSupported=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletAsyn</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Servlet is start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获得异步上下文对象</span></span><br><span class="line">AsyncContext ac = request.startAsync();</span><br><span class="line"><span class="comment">//2.启动一个耗时的子线程</span></span><br><span class="line">ThreadTask tt = <span class="keyword">new</span> ThreadTask(ac);</span><br><span class="line"><span class="comment">//3.可设置异步超时对象，需在启动异步上下文对象前设置</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设置超时后，在超时时间内子线程没有结束，主线程则会停止等待，继续往下执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ac.setTimeout(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//4.开启异步上下文对象</span></span><br><span class="line">ac.start(tt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//主线程结束向客户端发送消息</span></span><br><span class="line">System.out.println(<span class="string">&quot;Servlet is end&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">response.getWriter().append(<span class="string">&quot;信息已发送到邮箱&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="48FVl"></a></p><h1 id="组件可插性"><a class="markdownIt-Anchor" href="#组件可插性"></a> 组件可插性</h1><p>在web应用中，使用注解的类仅当它们位于WEB-INF/classes目录中，或它们被打包到位于应用的WEB-INF/lib中的jar文件中时它们的注解才将被处理。<br />Web应用部署描述符的web-app元素包含一个新的”metadata-complete”属性。”metadata-complete”属性定义了web描述符是否是完整的，或是否应该在部署时检查jar包中的类文件和web fragments。如果”metadata-complete”设置为”true”，部署工具必须忽略存在于应用的类文件中的所有servlet注解和web fragments。如果metadata-complete属性没有指定或设置为”false”，部署工具必须检查应用的类文件的注解，并扫描web fragments。<br /><a name="RDi0j"></a></p><h1 id="动态注册"><a class="markdownIt-Anchor" href="#动态注册"></a> 动态注册</h1><p>详见：<a href="https://www.jianshu.com/p/cbe1c3174d41">https://www.jianshu.com/p/cbe1c3174d41</a><br /><a name="kWmH3"></a></p><h2 id="create"><a class="markdownIt-Anchor" href="#create"></a> create</h2><p>在高负载情况下，thread pool都被占着ServletContext接口以下的方法,用来动态地创建Web对象<br /><T extends Filter>createFilter(java.lang.Class<T> clazz)<br /><T extends java.util.EventListener> createListener(java.lang.Class<T> clazz)<br /><T extends Servlet>createServlet(java.lang.Class<T> clazz)<br />例如：Servlet myServlet=createServlet(MyServlet.class);<br /><a name="264KC"></a></p><h2 id="add"><a class="markdownIt-Anchor" href="#add"></a> add</h2><p>创建好Web对象后，可以利用以下方法将它添加到ServletContext中<br />FilterRegistration.Dynamic addFilter(java.lang.String filterName,Filter filter)<br /><T extends java.util.EventListener> addListener(T t)<br />ServletRegistration.Dynamic addServlet (String servletName,Servlet servlet)<br />在创建或者添加监听器时，传给addListener覆盖方法的类必须实现XXXListener接口<br />addFilter 或addServlet 方法返回值是一个FilterRegistration.Dynamic或ServletRegistration.Dynamic<br />他们都是Registration.Dynamic 的子接口，<br />FilterRegistration.Dynamic可以配置一个FIliter<br />ServletRegistration.Dynamic可以配置一个Servlet那么后续的request就只能等待，如果运气不好客户端会报等待超时的错误。<br /><a name="DCoqC"></a></p><h2 id="代码演示-2"><a class="markdownIt-Anchor" href="#代码演示-2"></a> 代码演示</h2><p><a name="UBIpH"></a></p><h4 id="firstservlet类"><a class="markdownIt-Anchor" href="#firstservlet类"></a> FirstServlet类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUIDD=-<span class="number">6045338L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">PrintWriter write=resp.getWriter();</span><br><span class="line">write.println(<span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Fist servlet&quot;</span>+</span><br><span class="line"><span class="string">&quot;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&quot;</span>+name);</span><br><span class="line">write.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="NHLSM"></a></p><h4 id="dynreglistener类"><a class="markdownIt-Anchor" href="#dynreglistener类"></a> DynRegListener类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynRegListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">ServletContext servletContext=arg0.getServletContext();</span><br><span class="line">Servlet firstServlet=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">firstServlet=servletContext.createServlet(FirstServlet.class);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(firstServlet!=<span class="keyword">null</span>&amp;&amp;firstServlet <span class="keyword">instanceof</span> FirstServlet)&#123;</span><br><span class="line">((FirstServlet)firstServlet).setName(<span class="string">&quot;Dynamically registered servlet&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServletRegistration.Dynamic dynamic=servletContext.addServlet(<span class="string">&quot;firstServlet&quot;</span>, firstServlet);</span><br><span class="line">dynamic.addMapping(<span class="string">&quot;/dynamic&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;默认Servlet3.0是没有web.xml文件的，因此servlet3.0是通过注解注册的而不是web.xml文件进行注册。&lt;br /&gt;可以通过如下方法快速生成servlet&lt;br /&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/202</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linster</title>
    <link href="https://jie-blog.icu/posts/linster/"/>
    <id>https://jie-blog.icu/posts/linster/</id>
    <published>2020-09-02T09:21:00.000Z</published>
    <updated>2020-09-05T09:42:37.817Z</updated>
    
    <content type="html"><![CDATA[<p><a name="KMVNp"></a></p><h1 id="一-监听器"><a class="markdownIt-Anchor" href="#一-监听器"></a> 一、监听器</h1><p><a name="6hD3U"></a></p><h2 id="什么是监听器"><a class="markdownIt-Anchor" href="#什么是监听器"></a> 什么是监听器</h2><p>监听器的监听器设计者模式跟观察者设计模式十分雷同，它本质上是监听观察某个事件（程序）的发生情况，当被监听的事件真的发生了的时候，事件发生者（事件源） 就会给注册该事件的监听者（监听器）发送消息，告诉监听者某些信息，同时监听者也可以获得一份事件对象，根据这个对象可以获得相关属性和执行相关操作。<br /><a name="7JJIc"></a></p><h2 id="监听器原理"><a class="markdownIt-Anchor" href="#监听器原理"></a> 监听器原理</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582709954560-5ec921a4-2c79-474c-b108-604c56fea965.png#align=left&amp;display=inline&amp;height=560&amp;margin=%5Bobject%20Object%5D&amp;originHeight=560&amp;originWidth=989&amp;size=0&amp;status=done&amp;style=none&amp;width=989" alt="" /><br /><a name="XxOND"></a></p><h1 id="二-servlet监听器"><a class="markdownIt-Anchor" href="#二-servlet监听器"></a> 二、Servlet监听器</h1><p><a name="eSO3z"></a></p><h2 id="监听器种类"><a class="markdownIt-Anchor" href="#监听器种类"></a> 监听器种类</h2><p>在Servlet规范中定义了多种类型的监听器，它们用于监听的事件源分别为  ServletContext, HttpSession 和  ServletRequest 这三个域对象。<img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582710394225-abfc5982-8121-41c9-a5e6-9676eab7522c.png#align=left&amp;display=inline&amp;height=156&amp;margin=%5Bobject%20Object%5D&amp;originHeight=156&amp;originWidth=1112&amp;size=0&amp;status=done&amp;style=none&amp;width=1112" alt="" /><br />使用方法与观察者模式一样，方法的名称和接口的名称就是使用意思。<br /><a name="xsxFh"></a></p><h1 id="三-常用监听器"><a class="markdownIt-Anchor" href="#三-常用监听器"></a> 三、常用监听器</h1><p>1：监听session属性的增加、移除以及属性值改变的HttpSessionAttributeListener</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582713128436-58c1bcdf-b663-4aae-b089-a884e2526c0d.png#align=left&amp;display=inline&amp;height=278&amp;margin=%5Bobject%20Object%5D&amp;originHeight=278&amp;originWidth=510&amp;size=0&amp;status=done&amp;style=none&amp;width=510" alt="" /></p><p>2：监听web上下文的初始化（服务器已准备好接收请求）与销毁的ServletContextListener</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582713128491-4d29dfd3-7ff8-4e5d-969e-f803dcbc371a.png#align=left&amp;display=inline&amp;height=175&amp;margin=%5Bobject%20Object%5D&amp;originHeight=175&amp;originWidth=451&amp;size=0&amp;status=done&amp;style=none&amp;width=451" alt="" /></p><p>3：监听web上下文属性的增加、删除、属性值变化的ServletContextAttributeListener</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582713128590-baa4e178-563e-424e-9592-0b9d08fbf540.png#align=left&amp;display=inline&amp;height=265&amp;margin=%5Bobject%20Object%5D&amp;originHeight=265&amp;originWidth=483&amp;size=0&amp;status=done&amp;style=none&amp;width=483" alt="" /></p><p>4：监听request的创建与销毁的ServletRequestListener</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582713128499-22dc2405-dcc5-46bc-b399-45acdab1b6b4.png#align=left&amp;display=inline&amp;height=168&amp;margin=%5Bobject%20Object%5D&amp;originHeight=168&amp;originWidth=427&amp;size=0&amp;status=done&amp;style=none&amp;width=427" alt="" /></p><p>5：监听request的属性的增加、删除、属性值变化的ServletRequestAttributeListener</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582713128527-77f3493c-55f9-4a45-8d09-7136947ac6af.png#align=left&amp;display=inline&amp;height=261&amp;margin=%5Bobject%20Object%5D&amp;originHeight=261&amp;originWidth=503&amp;size=0&amp;status=done&amp;style=none&amp;width=503" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;KMVNp&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一-监听器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-监听器&quot;&gt;&lt;/a&gt; 一、监听器&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;6hD3U&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    <category term="Linster" scheme="https://jie-blog.icu/categories/Servlet/Linster/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Filter</title>
    <link href="https://jie-blog.icu/posts/filter/"/>
    <id>https://jie-blog.icu/posts/filter/</id>
    <published>2020-09-02T09:13:21.000Z</published>
    <updated>2020-09-05T09:42:38.319Z</updated>
    
    <content type="html"><![CDATA[<p><a name="himAB"></a></p><h1 id="filter介绍"><a class="markdownIt-Anchor" href="#filter介绍"></a> Filter介绍</h1><p><a name="Ph4cO"></a></p><h2 id="什么是filter"><a class="markdownIt-Anchor" href="#什么是filter"></a> 什么是Filter</h2><p>过滤器顾名思义就是过滤或处理用的，它位于客户端与服务器之间，可以在请求到到目标资源之前进行拦截过滤，也可以进行响应过滤。<br /><a name="FXtbU"></a></p><h2 id="filter生命周期"><a class="markdownIt-Anchor" href="#filter生命周期"></a> Filter生命周期</h2><p>Filter的整个生命周期过程的执行，均由Web服务器负责管理。Filter生命周期与Servlet类似，主要阶段有四个：创建、初始化、执行doFilter、对象销毁。<br />Filter是单例多线程的并且是在应用启动的时候创建并初始化，在应用停止的时候销毁的。<br />doFilter只要Filter进行过滤时就会执行，并且每过滤一次就会执行一次。<br /><a name="G8DkX"></a></p><h2 id="filter-有如下几个用处"><a class="markdownIt-Anchor" href="#filter-有如下几个用处"></a> Filter 有如下几个用处：</h2><ul><li>在HttpServletRequest 到达Servlet 之前，拦截客户的HttpServletRequest 。</li><li>根据需要检查HttpServletRequest ，也可以修改HttpServletRequest 头和数据。</li><li>在HttpServletResponse 到达客户端之前，拦截HttpServletResponse 。</li><li>根据需要检查HttpServletResponse ，可以修改HttpServletResponse 头和数据。<br /><a name="CJa1L"></a></li></ul><h2 id="filter-有如下几个种类"><a class="markdownIt-Anchor" href="#filter-有如下几个种类"></a> Filter 有如下几个种类：</h2><ul><li>用户授权的Filter: Filter 负责检查用户请求，根据请求过滤用户非法请求。</li><li>日志Filter: 详细记录某些特殊的用户请求。</li><li>负责解码的Filter: 包括对非标准编码的请求解码。</li><li>能改变XML 内容的XSLTFilter 等。 <br /><a name="zNhv6"></a></li></ul><h2 id="filter执行原理"><a class="markdownIt-Anchor" href="#filter执行原理"></a> Filter执行原理</h2><p>Web容器中有一个数组一个Map。</p><ul><li>Map：key为url-pattern的值，value为Filter实例对象的引用。</li><li>数组：存放着与请求匹配的所有Filter</li></ul><p>像存放Servlet信息的两个Map一样，在服务器中同样存在用于存放Filter相关信息的Map但Map只有一个，因为Filter的创建时机不同于Servlet,其是由在服务器启动时由Web容器自动创建的这个Map的K是Filter的<url-pattern/>，当然，若Filter没有设置<url-pattern>，而是使用了<servlet-name/>则会将制定的Servlet的<url-pattern>值放到Map中作为KMap的V为该Filter的引用在应用被启动时，服务器会自动的创建所有的Filter实列，并将他们一一存入Map。<br />在服务器中，对于每一个请求还存在一个数组，用于存储满足当前请求的所有Filter及最终的目标资源当请求到达服务器后，服务器会解析出URI,首先查询Map中与该请求匹配的Filter每找到一个满足要求的Filter,就将其放入到数组中，直到过滤完所有的Filter这个数组中存放的是与请求匹配的Filter,可以看作一个“链”，服务器会按照顺序对请求进行依次过滤处理。<br />对于Filter的Map而言，会查询过滤所有的Key,将所有符合匹配的都装入到数组中<br />而Servlet的Map的查询过程是，只要找到一个匹配的Key,就不会再往后面找了<br /><br /><a name="JGhmj"></a></p><h1 id="filter实现"><a class="markdownIt-Anchor" href="#filter实现"></a> Filter实现</h1><p><a name="tlHwd"></a></p><h2 id="简单demo"><a class="markdownIt-Anchor" href="#简单demo"></a> 简单Demo</h2><p><a name="U8JAh"></a></p><h3 id="filter的注册"><a class="markdownIt-Anchor" href="#filter的注册"></a> Filter的注册</h3><p>若Filter为全路径匹配方式，url-pattern要写/*，而不要写/，因为/不会对动态资源进行拦截。<br /><a name="xdWhG"></a></p><h4 id="webxml"><a class="markdownIt-Anchor" href="#webxml"></a> web.xml</h4><p>注册Filter的方式和Servlet类似</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册Filter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SomeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.test.demo.SomeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SomeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="uYAwJ"></a></p><h4 id="注释方法注册"><a class="markdownIt-Anchor" href="#注释方法注册"></a> 注释方法注册</h4><p><code>@WebFilter(&quot;/*&quot;)</code>详见Servlet3.0新特性。<br /><a name="2TJKH"></a></p><h3 id="filter实现-2"><a class="markdownIt-Anchor" href="#filter实现-2"></a> Filter实现</h3><p>Filter的实现要实现Filter接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//将请求递交给下一个资源</span></span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="rc54G"></a></p><h2 id="filterconfig"><a class="markdownIt-Anchor" href="#filterconfig"></a> FilterConfig</h2><p>FilterConfig和ServletConfig一样的使用方法，由init初始化并赋值供给给doFilter使用。但是ServletConfig是封装到GnericServlet中的，GnericFilter是否也一样？进入源码分析：<br /><a name="xjKJ5"></a></p><h3 id="gnericfilter"><a class="markdownIt-Anchor" href="#gnericfilter"></a> GnericFilter：</h3><p>它拥有一个属性：private transient FilterConfig config;<br />在init方法中进行了初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.config = config;</span><br><span class="line"><span class="keyword">this</span>.init();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a name="RNx2a"></a></p><h3 id="httpfilter"><a class="markdownIt-Anchor" href="#httpfilter"></a> HttpFilter：</h3><p>HttpFilter又实现了GnericFilter因此他可以在自己的子类中使用Config属性。<br /><a name="UpSGD"></a></p><h2 id="dispatcher的四个标签"><a class="markdownIt-Anchor" href="#dispatcher的四个标签"></a> dispatcher的四个标签</h2><p>注意：<dispatcher></dispatcher>必须写在filter-mapping的最后。dispatcher的前提条件当然是要先满足url-pattern，也可以通过注释注册这个属性，详见servlet3.0。<br /><a name="gXdVd"></a></p><h3 id="request"><a class="markdownIt-Anchor" href="#request"></a> REQUEST</h3><p>表示普通请求的拦截，但对于forward与include的跳转不拦截。默认值为REQUEST<br /><a name="dgGyA"></a></p><h3 id="foward"><a class="markdownIt-Anchor" href="#foward"></a> FOWARD</h3><p>拦截转发的forward时候的请求<br /><a name="haeC1"></a></p><h3 id="include"><a class="markdownIt-Anchor" href="#include"></a> INCLUDE</h3><p>拦截转发的include时候的请求<br /><a name="EgMzr"></a></p><h3 id="error"><a class="markdownIt-Anchor" href="#error"></a> ERROR</h3><p>表示当跳转到指定的错误处理页面时，这个跳转请求会被当前过滤器拦截。<br /><a name="Hzszf"></a></p><h2 id="过滤链filterchain"><a class="markdownIt-Anchor" href="#过滤链filterchain"></a> 过滤链FilterChain</h2><p>两个过滤器，EncodingFilter负责设置编码，SecurityFilter负责控制权限，服务器会按照web.xml中过滤器定义的先后循序组装成一条链，然后一次执行其中的doFilter()方法。执行的顺序就如下图所示，执行第一个过滤器的chain.doFilter()之前的代码，第二个过滤器的chain.doFilter()之前的代码，请求的资源，第二个过滤器的chain.doFilter()之后的代码，第一个过滤器的chain.doFilter()之后的代码，最后返回响应。<br /><a name="VDfGO"></a></p><h1 id="filter应用"><a class="markdownIt-Anchor" href="#filter应用"></a> Filter应用</h1><p>之前的乱码问题需要在post和get中进行处理，再多servlet的代码组中，容易产生大量无用代码，如果在过滤器中就对response和request进行了处理就可以避免这个问题。<br /><a name="y6pSo"></a></p><h2 id="post中文乱码问题"><a class="markdownIt-Anchor" href="#post中文乱码问题"></a> POST中文乱码问题</h2><p>例如如下代码会产生乱码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;LoginServlet&quot;, urlPatterns = &quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//接收参数：</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(name + <span class="string">&quot;：&quot;</span> + password);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(name + <span class="string">&quot;  is online&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时需要更改request的编码为UTF-8。<br />增加如下Filter即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;CharacterEncodingFilter&quot;, value = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决响应乱码</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//解决请求乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="cpbuM"></a></p><h2 id="总结中文乱码问题"><a class="markdownIt-Anchor" href="#总结中文乱码问题"></a> 总结中文乱码问题</h2><p>当用户提交了一个包含中文参数的请求时，浏览器会先将这些中文转化为一个字节序列发送到服务器，服务器收到这个字节序列后，会按照其默认的字符编码ISO8859-1对其进行解码，因此产生了乱码，但紧接着，服务器会将解码过的乱码参数存放到parameterMap中，那么这个Map就乱码了。<br />这种属性传递过程中的乱码是无法仅仅通过Filter完成的，因此我们考虑重写HttpServletRequest（Response）类。这种方法无论是get还是post都能解决乱码问题。<br /><a name="Q2SAB"></a></p><h3 id="httpservletrequestwrapper"><a class="markdownIt-Anchor" href="#httpservletrequestwrapper"></a> HttpServletRequestWrapper</h3><blockquote><p>Provides a convenient implementation of the HttpServletRequest interface that  can be subclassed by developers wishing to adapt the request to a Servlet.  This class implements the Wrapper or Decorator pattern. Methods default to  calling through to the wrapped request object.</p></blockquote><p>提供了一个方便的HttpServletRequest接口实现，希望将Request适应到Servlet的开发人员可以将其子类化。这个类实现包装器或装饰器模式。方法默认为调用包装的请求对象。<br /><a name="pcLMN"></a></p><h3 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h3><p><a name="cYEnU"></a></p><h4 id="myrequest"><a class="markdownIt-Anchor" href="#myrequest"></a> MyRequest：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a request object wrapping the given request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request the &#123;<span class="doctag">@link</span> HttpServletRequest&#125; to be wrapped.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the request is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将原始的Map替换为自定义的Map（遍历更改编码）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解决乱码问题后的Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        Map&lt;String, String[]&gt; newMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, String[]&gt; oldMap = <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : oldMap.keySet()) &#123;</span><br><span class="line">                <span class="comment">//获取Values</span></span><br><span class="line">                String[] values = oldMap.get(str);</span><br><span class="line">                <span class="comment">//进行转码</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                    values[i] = <span class="keyword">new</span> String(values[i].getBytes(<span class="string">&quot;ISO8859_1&quot;</span>), StandardCharsets.UTF_8);</span><br><span class="line">                &#125;</span><br><span class="line">                newMap.put(str, values);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Enumeration&lt;String&gt;) <span class="keyword">this</span>.getParameterMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getParameterValues(name)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getParameterMap().get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="u46bP"></a></p><h4 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> Filter：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;CharacterEncodingFilter&quot;, value = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//更换request对象</span></span><br><span class="line">        req = <span class="keyword">new</span> MyRequest((HttpServletRequest) req);</span><br><span class="line">        <span class="comment">//解决响应乱码</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7NtiR"></a></p><h4 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;LoginServlet&quot;, urlPatterns = &quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收参数：</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(name + <span class="string">&quot;：&quot;</span> + password);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(name + <span class="string">&quot;  is online&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="GYBtZ"></a></p><h3 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582648069983-d9859b14-c6a6-4ec2-a755-043a6a745b55.png#align=left&amp;display=inline&amp;height=96&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=127&amp;originWidth=398&amp;size=14308&amp;status=done&amp;style=none&amp;width=301" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582648081699-a69b8b0b-7e96-4971-a2ab-7cd50caa2bfb.png#align=left&amp;display=inline&amp;height=94&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=111&amp;originWidth=344&amp;size=35081&amp;status=done&amp;style=none&amp;width=290" alt="image.png" /><br /><a name="tMrlb"></a></p><h1 id="访问权限过滤器"><a class="markdownIt-Anchor" href="#访问权限过滤器"></a> 访问权限过滤器</h1><p>有些网页需要登录才能访问，因此需要添加一个访问权限过滤器。<br /><a name="muLPW"></a></p><h2 id="代码演示-2"><a class="markdownIt-Anchor" href="#代码演示-2"></a> 代码演示：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/PermissionFilter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionFilter</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置请求的字符编码     </span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置返回请求的字符编码     </span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 转换ServletRequest为 HttpServletRequest     </span></span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        <span class="comment">// 转换ServletResponse为HttpServletRequest     </span></span><br><span class="line">        HttpServletResponse res = (HttpServletResponse) response;</span><br><span class="line">        <span class="comment">// 获取Session     </span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">// 获取Session中存储的对象     </span></span><br><span class="line">        Object o = session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取当前请求的URI     </span></span><br><span class="line">        String url = req.getRequestURI();</span><br><span class="line">        <span class="comment">// 判断Session中的对象是否为空；判断请求的URI是否为不允许过滤的URI     </span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; !url.endsWith(<span class="string">&quot;login.jsp&quot;</span>)     <span class="comment">// 对URL地址为此结尾的文件不过滤     </span></span><br><span class="line">                &amp;&amp; !url.contains(<span class="string">&quot;login.do&quot;</span>)    <span class="comment">// 对URL地址中包含此字符串的文件不过滤     </span></span><br><span class="line">                &amp;&amp; !url.contains(<span class="string">&quot;/images/&quot;</span>)) &#123;</span><br><span class="line">            res.sendRedirect(req.getContextPath() + <span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            res.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store&quot;</span>);</span><br><span class="line">            res.setDateHeader(<span class="string">&quot;Expires&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            res.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">            res.flushBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;himAB&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;filter介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#filter介绍&quot;&gt;&lt;/a&gt; Filter介绍&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;Ph4cO&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    <category term="Filter" scheme="https://jie-blog.icu/categories/Servlet/Filter/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="https://jie-blog.icu/posts/cookie/"/>
    <id>https://jie-blog.icu/posts/cookie/</id>
    <published>2020-09-02T09:02:29.000Z</published>
    <updated>2020-09-05T09:42:38.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie"><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h1><p><a name="HmDni"></a></p><h1 id="什么是cookie"><a class="markdownIt-Anchor" href="#什么是cookie"></a> 什么是Cookie</h1><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息 。它是一个保存在客户机中的简单的文本文件, 这个文件与特定的 Web 文档关联在一起, 保存了该客户机访问这个Web 文档时的信息, 当客户机再次访问这个 Web 文档时这些信息可供该文档使用。由于“Cookie”具有可以保存在客户机上的神奇特性, 因此它可以帮助我们实现记录用户个人信息的功能, 而这一切都不必使用复杂的CGI等程序 。<br />举例来说, 一个 Web 站点可能会为每一个访问者产生一个唯一的ID, 然后以 Cookie 文件的形式保存在每个用户的机器上。如果使用浏览器访问 Web, 会看到所有保存在硬盘上的 Cookie。在这个文件夹里每一个文件都是一个由“名/值”对组成的文本文件,另外还有一个文件保存有所有对应的 Web 站点的信息。在这里的每个 Cookie 文件都是一个简单而又普通的文本文件。透过文件名, 就可以看到是哪个 Web 站点在机器上放置了Cookie(当然站点信息在文件里也有保存) 。<br /><a name="Qb8hI"></a></p><h1 id="chrome如何查看cookie"><a class="markdownIt-Anchor" href="#chrome如何查看cookie"></a> Chrome如何查看Cookie</h1><p><a name="6ioSn"></a></p><h2 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582364717819-09885169-c082-4c62-98ef-f84b37184dc7.png#align=left&amp;display=inline&amp;height=343&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=343&amp;originWidth=543&amp;size=41611&amp;status=done&amp;style=none&amp;width=543" alt="image.png" /><br /><a name="I17XS"></a></p><h2 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h2><p>在Chrome浏览器中按下F12，打开开发者工具，选择&quot;Console(控制台)&quot;选项卡，输入document.cookie，回车就可以查看当前网站的Cookie了。输入document.cookie=“xxx=xxx”，就可以修改cookie的内容了。<br /><a name="nCA5H"></a></p><h2 id="方法三"><a class="markdownIt-Anchor" href="#方法三"></a> 方法三</h2><p>在Chrome地址栏中输入：chrome://settings/content/cookies，打开Cookie设置，可以查看&amp;删除Cookie。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582364904852-88ad7827-b795-4b4d-ab61-c8b265c2e3bf.png#align=left&amp;display=inline&amp;height=975&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=975&amp;originWidth=1203&amp;size=75477&amp;status=done&amp;style=none&amp;width=1203" alt="image.png" /><br /><a name="9bwTf"></a></p><h2 id="方法四"><a class="markdownIt-Anchor" href="#方法四"></a> 方法四</h2><p>下载的EditThisCookie扩展程序。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582365637206-a596380b-4e1c-40aa-92f7-2a0779e07fff.png#align=left&amp;display=inline&amp;height=797&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=911&amp;originWidth=1212&amp;size=174213&amp;status=done&amp;style=none&amp;width=1060" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582365722918-eef07f56-53f5-41e6-91da-35b4ab110300.png#align=left&amp;display=inline&amp;height=614&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=614&amp;originWidth=581&amp;size=34956&amp;status=done&amp;style=none&amp;width=581" alt="image.png" /><br /><a name="s9goa"></a></p><h1 id="javaee的cookie"><a class="markdownIt-Anchor" href="#javaee的cookie"></a> JavaEE的Cookie</h1><p>Cookie位于javax.servlet.http包下。<br /><a name="KLQTN"></a></p><h2 id="文档"><a class="markdownIt-Anchor" href="#文档"></a> 文档：</h2><blockquote><p>Creates a cookie, a small amount of information sent by a servlet to   a Web browser, saved by the browser, and later sent back to the server.  A cookie’s value can uniquely   identify a client, so cookies are commonly used for session management.<br />A cookie has a name, a single value, and optional attributes  such as a comment, path and domain qualifiers, a maximum age, and a  version number. Some Web browsers have bugs in how they handle the   optional attributes, so use them sparingly to improve the interoperability   of your servlets.<br />The servlet sends cookies to the browser by using the  <a href="http://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/HttpServletResponse.html#addCookie(javax.servlet.http.Cookie)"><code>HttpServletResponse.addCookie(javax.servlet.http.Cookie)</code></a> method, which adds  fields to HTTP response headers to send cookies to the   browser, one at a time. The browser is expected to   support 20 cookies for each Web server, 300 cookies total, and  may limit cookie size to 4 KB each.<br />The browser returns cookies to the servlet by adding   fields to HTTP request headers. Cookies can be retrieved  from a request by using the <a href="http://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/HttpServletRequest.html#getCookies()"><code>HttpServletRequest.getCookies()</code></a> method.  Several cookies might have the same name but different path attributes.<br />Cookies affect the caching of the Web pages that use them.   HTTP 1.0 does not cache pages that use cookies created with  this class. This class does not support the cache control  defined with HTTP 1.1.<br />This class supports both the Version 0 (by Netscape) and Version 1   (by RFC 2109) cookie specifications. By default, cookies are  created using Version 0 to ensure the best interoperability.</p></blockquote><p>创建一个cookie，少量信息通过servlet发送给 Web浏览器，由浏览器保存，然后发送回服务器。cookie的值可以唯一地标识客户机，因此cookies通常用于session管理。 cookie具有name、单个值和可选属性( 注释、路径和域限定符、最长期限和版本号)。一些Web浏览器在处理可选属性有bug，因此要谨慎使用它们以提高servlet的交互性。<br />servlet使用HttpServletResponse.addCookie（javax.servlet.http.Cookie）方法，添加cookies到HTTP响应头的字段发送到浏览器，一次一个。浏览器支持每个Web服务器20个Cookie，总共300个Cookie，以及 可能会将每个cookie的大小限制为4 KB。<br />浏览器添加Cookies到HTTP请求头的字段中。可以检索Cookies通过使用HttpServletRequest.getCookies（）方法。一些cookie可能具有相同的名称，但路径属性不同。              <br />Cookies会影响使用它们的网页的缓存。 HTTP 1.0不缓存使用与该类一起创建的cookie的页。此类不支持用HTTP 1.1定义的缓存控件。              <br />这个类同时支持版本0（由Netscape提供）和版本1（根据RFC 2109）cookie规范。默认情况下，cookies是使用版本0创建以确保最佳互操作性。<br /><a name="M8Ily"></a></p><h2 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Cookie</span></span><br><span class="line">        Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在响应头中添加Cookie</span></span><br><span class="line">        response.addCookie(cookie1);</span><br><span class="line">        response.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="dVNeM"></a></p><h2 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582380385538-4b86fd64-231e-48d7-907f-873aabfad18f.png#align=left&amp;display=inline&amp;height=614&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=614&amp;originWidth=581&amp;size=26761&amp;status=done&amp;style=none&amp;width=581" alt="image.png" /><br /><a name="IWIN4"></a></p><h3 id="同类资源"><a class="markdownIt-Anchor" href="#同类资源"></a> 同类资源：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582380487302-ad5e5f95-150a-4572-b778-d12f35f78a27.png#align=left&amp;display=inline&amp;height=496&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=496&amp;originWidth=564&amp;size=25703&amp;status=done&amp;style=none&amp;width=564" alt="image.png" /><br />因此Cookie在默认情况下会和资源路径绑定，在同一资源路径下可以获取到Cookie。<br /><a name="52kNV"></a></p><h2 id="更改cookie绑定的路径"><a class="markdownIt-Anchor" href="#更改cookie绑定的路径"></a> 更改Cookie绑定的路径：</h2><p>默认情况下Cookie绑定的是资源路径，但是可以通过setPath更改。<br /><a name="KhTeQ"></a></p><h3 id="代码演示-2"><a class="markdownIt-Anchor" href="#代码演示-2"></a> 代码演示：</h3><p>注意：虽然Path不加项目名称也可以访问，不过规范下应该加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Cookie</span></span><br><span class="line">        Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定绑定路径</span></span><br><span class="line">        cookie1.setPath(request.getContextPath() + <span class="string">&quot;/aa/bb/TestServlet&quot;</span>);</span><br><span class="line">        cookie2.setPath(request.getContextPath() + <span class="string">&quot;/aa/bb/TestServlet2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在响应头中添加Cookie</span></span><br><span class="line">        response.addCookie(cookie1);</span><br><span class="line">        response.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="EMlTm"></a></p><h3 id="结果演示-2"><a class="markdownIt-Anchor" href="#结果演示-2"></a> 结果演示：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582380798819-3913168c-acce-49e6-bb7f-61bb1ef07e86.png#align=left&amp;display=inline&amp;height=466&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=466&amp;originWidth=564&amp;size=24910&amp;status=done&amp;style=none&amp;width=564" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582380815444-2c5331eb-0401-49bf-b1f7-ecd8f395410e.png#align=left&amp;display=inline&amp;height=466&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=466&amp;originWidth=564&amp;size=26131&amp;status=done&amp;style=none&amp;width=564" alt="image.png" /><br /><a name="lAGfr"></a></p><h2 id="设置cookie有效期"><a class="markdownIt-Anchor" href="#设置cookie有效期"></a> 设置Cookie有效期</h2><p>Cookie的有效期可以通过setMaxAge方法设置，值为整型值单位为秒。<br />小于零时与不设置相同，会存储Cookie到浏览器缓存。<br />等于零时生成后马上失效。<br />大于零时会存储在客户端的硬盘。<br /><a name="lWma9"></a></p><h1 id="使用cookie"><a class="markdownIt-Anchor" href="#使用cookie"></a> 使用Cookie</h1><p>Servlet可以通过getCookie获取Cookie，然后可以利用Cookie的值来进行条件判断等操作。<br /><a name="rNofv"></a></p><h2 id="代码演示-3"><a class="markdownIt-Anchor" href="#代码演示-3"></a> 代码演示：</h2><p><a name="xFWyo"></a></p><h3 id="someservlet"><a class="markdownIt-Anchor" href="#someservlet"></a> SomeServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Cookie</span></span><br><span class="line">        Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;19&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在响应头中添加Cookie</span></span><br><span class="line">        response.addCookie(cookie1);</span><br><span class="line">        response.addCookie(cookie2);</span><br><span class="line"></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;OtherServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Q97xr"></a></p><h3 id="otherservlet"><a class="markdownIt-Anchor" href="#otherservlet"></a> OtherServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            System.out.println(cookie.getName() + <span class="string">&quot; : &quot;</span> + cookie.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="NvXsc"></a></p><h2 id="结果演示-3"><a class="markdownIt-Anchor" href="#结果演示-3"></a> 结果演示：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582383535891-4437a8c6-4854-4ef2-99ed-e13b7d8d4e85.png#align=left&amp;display=inline&amp;height=92&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=92&amp;originWidth=511&amp;size=34386&amp;status=done&amp;style=none&amp;width=511" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582383547975-39ad5ce7-4044-49d0-847b-7e5ef45b79d5.png#align=left&amp;display=inline&amp;height=496&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=496&amp;originWidth=564&amp;size=25237&amp;status=done&amp;style=none&amp;width=564" alt="image.png" /><br /><a name="MCJBv"></a></p><h1 id="禁用cookie"><a class="markdownIt-Anchor" href="#禁用cookie"></a> 禁用Cookie</h1><p>因为Cookie可能存在用户名密码并且Cookie会存储在本地资源中，因此会有一定风险不得已要禁用Cookie。<br />但是禁止后对导致一些网站无法访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cookie&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cookie&quot;&gt;&lt;/a&gt; Cookie&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;HmDni&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是cookie&quot;&gt;&lt;a class=&quot;markdo</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数据交互" scheme="https://jie-blog.icu/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
    <category term="零碎知识点" scheme="https://jie-blog.icu/tags/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Session</title>
    <link href="https://jie-blog.icu/posts/session/"/>
    <id>https://jie-blog.icu/posts/session/</id>
    <published>2020-09-02T08:50:37.000Z</published>
    <updated>2020-09-02T09:03:59.420Z</updated>
    
    <content type="html"><![CDATA[<p><a name="6sn65"></a></p><h1 id="什么是session"><a class="markdownIt-Anchor" href="#什么是session"></a> 什么是Session</h1><p>Session和Cookie都是会话跟踪技术，区别是Session将会话保存到服务器端，Cookie是将会话保存在客户端。<br />Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在Session对象中。有关使用Session 对象的详细信息，请参阅“ASP应用程序”部分的“管理会话”。注意会话状态仅在支持cookie的浏览器中保留。<br /><a name="Oy4qe"></a></p><h1 id="javaee里的session"><a class="markdownIt-Anchor" href="#javaee里的session"></a> JavaEE里的Session</h1><p>在HttpServletRequest方法中有一个加getSession的方法：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582385476933-d74779dc-6708-463b-be6e-2e496d45b2e7.png#align=left&amp;display=inline&amp;height=31&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=42&amp;originWidth=949&amp;size=5354&amp;status=done&amp;style=none&amp;width=705" alt="image.png" /><br />它会返回当前Session，如果没有它会创建一个Session对象。<br />所谓的Session实际上是位于javax.servlet.http包下的HttpSession。<br />注意：Tomcat创建一个Session对象时，为当前Session对象生成了一个唯一编号，然后这个编号会存储在Cookie中并推送到浏览器的内存中，等到浏览器再次发送请求时，tomcat会通过浏览器发送的请求协议包中的Cookie的编号来判断该浏览器在服务端是否存在Session对象，因此Session和Cookie有着紧密的联系，<strong>不要禁用Cookie！！</strong><br /><a name="Se2Hf"></a></p><h2 id="httpsession官方文档"><a class="markdownIt-Anchor" href="#httpsession官方文档"></a> HttpSession官方文档：</h2><blockquote><p>Provides a way to identify a user across more than one page  request or visit to a Web site and to store information about that user.<br />The servlet container uses this interface to create a session  between an HTTP client and an HTTP server. The session persists  for a specified time period, across more than one connection or  page request from the user. A session usually corresponds to one   user, who may visit a site many times. The server can maintain a   session in many ways such as using cookies or rewriting URLs.<br />This interface allows servlets to</p><ul><li>View and manipulate information about a session, such as      the session identifier, creation time, and last accessed time</li><li>Bind objects to sessions, allowing user information to persist       across multiple user connections</li></ul></blockquote><blockquote><p>When an application stores an object in or removes an object from a  session, the session checks whether the object implements  <a href="http://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/HttpSessionBindingListener.html"><code>HttpSessionBindingListener</code></a>. If it does,   the servlet notifies the object that it has been bound to or unbound   from the session. Notifications are sent after the binding methods complete.   For session that are invalidated or expire, notifications are sent after  the session has been invalidated or expired.<br />When container migrates a session between VMs in a distributed container  setting, all session attributes implementing the <a href="http://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/HttpSessionActivationListener.html"><code>HttpSessionActivationListener</code></a> interface are notified.<br />A servlet should be able to handle cases in which  the client does not choose to join a session, such as when cookies are  intentionally turned off. Until the client joins the session,  <code>isNew</code> returns <code>true</code>.  If the client chooses   not to join  the session, <code>getSession</code> will return a different session  on each request, and <code>isNew</code> will always return  <code>true</code>.<br />Session information is scoped only to the current web application  (<code>ServletContext</code>), so information stored in one context  will not be directly visible in another.</p></blockquote><p>提供一种通过多个页面请求或访问网站来标识用户并存储有关该用户的信息的方法。              <br />servlet容器使用此接口在HTTP客户机和HTTP服务器之间创建Session。Session在指定的时间段内跨用户的多个连接或页请求保存。Session通常对应于一个用户，该用户可能多次访问站点。服务器可以通过多种方式维护Session，例如使用cookies或重写url。              <br />这个接口允许servlet去：</p><ul><li>查看和操作有关会话的信息，例如Session标识符、创建时间和上次访问时间</li><li>将对象绑定到Session，允许用户信息跨多个用户连接持久化</li></ul><p>当应用程序在Session中存储对象或从Session中移除对象时，Session将检查该对象是否实现HttpSessionBindingListener。如果是，servlet会通知对象它已经绑定到Session或从Session解除绑定。绑定方法完成后将发送通知。对于失效或过期的Session，在Session失效或过期后发送通知。              <br />当容器在分布式容器设置中迁移vm之间的Session时，将通知实现HttpSessionActivationListener接口的所有Session属性。              <br />servlet应该能够处理客户机不选择加入Session的情况，例如故意关闭cookies时。在客户端加入Session之前，isNew返回true。如果客户端选择不加入Session，getSession将在每个请求上返回不同的Session，isNew将始终返回true。              <br />Session信息的作用域仅限于当前web应用程序（ServletContext），因此存储在一个上下文中的信息在另一个上下文中将不直接可见。<br /><a name="Erpno"></a></p><h2 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h2><p>一般情况下，若要向Session中写入数据，需要使用getSession(true)即getSession()方法。若要获取数据则需要使用getSession(false)。因为要避免在没有Session的时候创建新的Session而不是返回null。<br /><a name="6xfR6"></a></p><h3 id="someservlet"><a class="markdownIt-Anchor" href="#someservlet"></a> SomeServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Session对象</span></span><br><span class="line">        HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置编码打印属性</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取表单中的值的名称</span></span><br><span class="line">        Enumeration&lt;String&gt; elements = request.getParameterNames();</span><br><span class="line">        <span class="comment">//遍历表单名称获取值</span></span><br><span class="line">        <span class="keyword">while</span> (elements.hasMoreElements()) &#123;</span><br><span class="line">            <span class="comment">//获取名称</span></span><br><span class="line">            String element = elements.nextElement();</span><br><span class="line">            <span class="comment">//获取值</span></span><br><span class="line">            String value = <span class="keyword">new</span> String(((String) request.getParameter(element)).getBytes(<span class="string">&quot;ISO_8859_1&quot;</span>), StandardCharsets.UTF_8);</span><br><span class="line">            <span class="comment">//将属性写入Session</span></span><br><span class="line">            session.setAttribute(element, value);</span><br><span class="line">            <span class="comment">//打印</span></span><br><span class="line">            response.getWriter().print(<span class="string">&quot;SomeServlet :&quot;</span> + element + <span class="string">&quot; ： &quot;</span> + value + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;OtherServlet&quot;</span>).include(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="iUZR3"></a></p><h3 id="otherservlet"><a class="markdownIt-Anchor" href="#otherservlet"></a> OtherServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        <span class="comment">//获取Session</span></span><br><span class="line">        HttpSession session = req.getSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//判断Session是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;Session为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Enumeration&lt;String&gt; elements = session.getAttributeNames();</span><br><span class="line">            <span class="keyword">while</span> (elements.hasMoreElements()) &#123;</span><br><span class="line">                String str = elements.nextElement();</span><br><span class="line">                out.println(<span class="string">&quot;OtherServlet:  &quot;</span> + str + <span class="string">&quot;  :  &quot;</span> + session.getAttribute(str)+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="TZj4G"></a></p><h2 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582391669840-fdd49eab-d484-4077-856a-1f659b8ec6ec.png#align=left&amp;display=inline&amp;height=184&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=253&amp;originWidth=430&amp;size=21910&amp;status=done&amp;style=none&amp;width=312" alt="image.png" /><br /><a name="fNfeI"></a></p><h1 id="session的工作原理"><a class="markdownIt-Anchor" href="#session的工作原理"></a> Session的工作原理</h1><p>如果是第一次取session，服务器会创建一个session对象（session本身是一个map集合），并且存入服务器的session集合中以sessionId为标识键，也就是根据sessionId即可取到对应session的引用。同时使用session时Servlet还获得了一个sessionId,在响应时把这个sessionId以cookie的形式发给了客户端。如果客户访问其它同一域的Servlet，这个sessionId会跟着请求上传到服务器。那么如果请求的另一个Servlet也要使用session,会先检查有没有这个保存sessionId的Cookie,如果有则直接到session集合中取对应的session引用返回给要使用的Servlet,所以，只要客户端存在这个sessionId，不管请求哪个Servlet，都可以拿到同一个session。所以Session就可以给不同的请求存储数据。<br /><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/485026/1599036759801-2d06a9e1-9d9d-44c0-becf-fd35041adb3e.jpeg#align=left&amp;display=inline&amp;height=375&amp;margin=%5Bobject%20Object%5D&amp;originHeight=375&amp;originWidth=500&amp;size=0&amp;status=done&amp;style=none&amp;width=500" alt="" /><br /><a name="N1lV8"></a></p><h2 id="session过期"><a class="markdownIt-Anchor" href="#session过期"></a> Session过期</h2><p>要保证session能够跨请求存储数据必须保证下面两个条件必须满足<br />（1）客户浏览器不能关闭<br />因为session会给客户保存一个sessionId,这个id是作为临时cookie存在客户浏览器缓存当中，如果关闭浏览器，缓存就没了，sessionId自然也就消失了。重新打开浏览再请求，就是一个全新的请求，服务器会创建一个新的session,之前的session就没法用了。<br />（2）请求不能超过session的过期时间<br />服务器的session如果始终没有使用，保留着就是浪费服务器的资源，所以服务器会定期检查session的最后访问时间，如果这个时间超出session设置的过期时间，服务器就会销毁这个session,那么客户端即使把sessionId又传上来，服务器也找不到它的session了，只会再重新创建一个新的session。(超时时间默认30min)，也可以在web.xml中的session-config中配置.<br /><a name="IMFNQ"></a></p><h2 id="httpsession其他方法"><a class="markdownIt-Anchor" href="#httpsession其他方法"></a> HttpSession其他方法</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582393747502-6561add6-fccf-4e52-8e21-b20908a5eb91.png#align=left&amp;display=inline&amp;height=48&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=48&amp;originWidth=582&amp;size=6564&amp;status=done&amp;style=none&amp;width=582" alt="image.png" /><br />使Session立即失效，解绑所有的对象<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582393933288-4d21f0ab-b48e-4390-b0ae-ba9d4458039e.png#align=left&amp;display=inline&amp;height=537&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=715&amp;originWidth=1138&amp;size=130273&amp;status=done&amp;style=none&amp;width=854" alt="image.png" /><br />如图，暂就不一一列出。<br /><a name="W2HBm"></a></p><h2 id="cookie禁用后的session"><a class="markdownIt-Anchor" href="#cookie禁用后的session"></a> Cookie禁用后的Session</h2><p>由于客户端禁用Cookie与服务器无关，服务器会照常生成Cookie给客户端而且每次提交请求时服务器都会认为客户端的Session过期，因此服务器会不停的向客户端发送SessionId。<br />禁用后，跳转网页的时候也会出现问题，因此在sendRedirect方法这类跳转语句前要加上一个response.encodeRedirect(路径)就可以解决问题。但是禁用Cookie的时候SessionId会暴露在地址栏！<br /><a name="J2eV1"></a></p><h1 id="域属性空间范围"><a class="markdownIt-Anchor" href="#域属性空间范围"></a> 域属性空间范围</h1><p>JavaWeb编程的API中，存放三个可以存放域属性的空间范围对象，这三个对象中存储的域属性作用范围由大到小为：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582396867339-976ad48f-5589-416e-940b-89606a73eb51.png#align=left&amp;display=inline&amp;height=71&amp;margin=%5Bobject%20Object%5D&amp;originHeight=71&amp;originWidth=718&amp;size=0&amp;status=done&amp;style=none&amp;width=718" alt="" /><br />ServletContext即application，置于其中的域属性是整个应用范围，可以完成跨会话共享数据。<br />HttpSession，置于其中的域属性是会话范围的，可以完成跨请求共享数据<br />HttpServletRequest，置于其中的域属性是请求范围的，可以完成跨Servlet共享数据，但是这些Servlet必须在同一请求中<br />使用规则：在保证功能需求的前提下，优先使用小范围的，这样不仅可以节省服务器内存，还可以保证数据的安全性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;6sn65&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是session&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是session&quot;&gt;&lt;/a&gt; 什么是Session&lt;/h1&gt;
&lt;p&gt;Session和Cookie都是会话跟踪</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数据交互" scheme="https://jie-blog.icu/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
    <category term="零碎知识点" scheme="https://jie-blog.icu/tags/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>servlet核心知识3</title>
    <link href="https://jie-blog.icu/posts/servlet-3/"/>
    <id>https://jie-blog.icu/posts/servlet-3/</id>
    <published>2020-09-02T08:11:45.000Z</published>
    <updated>2020-09-05T09:42:35.184Z</updated>
    
    <content type="html"><![CDATA[<p><a name="Z4U3K"></a></p><h1 id="中文乱码问题解决"><a class="markdownIt-Anchor" href="#中文乱码问题解决"></a> 中文乱码问题解决</h1><p>通过未经配置过的Tomcat来Post表单，会在控制台出现中文乱码问题。<br /><a name="Syqyd"></a></p><h2 id="get不会乱码"><a class="markdownIt-Anchor" href="#get不会乱码"></a> Get不会乱码</h2><p>Get方式发送请求在请求协议包到达服务端后，由Tomcat负责解析参数内容，Tomcat默认采用UTF-8进行解析，服务端接收数据将不会产生中文变乱码的问题。<br /><a name="V416i"></a></p><h2 id="post乱码原因"><a class="markdownIt-Anchor" href="#post乱码原因"></a> Post乱码原因</h2><p>Post发送请求在请求协议包到达服务器后，请求体中的内容由请求对象负责解析，而请求对象默认采用ISO编码进行解析，所以在服务端会导致乱码。<br /><a name="KDuTq"></a></p><h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h2><p>在请求对象解析请求体中的内容之前设置解析字符集为UTF-8。<br />在doPost中加入：<code>req``.setCharacterEncoding(``**&quot;UTF-8&quot;**``)``;</code>语句即可，但是他只能解决POST中的乱码，对其他方式的乱码没有效果，兼具的方法可以直接操作返回的字符串，将乱码的字符串解码为byte数组，再将byte数组使用utf-8重新组成字符串，也可以在配置文件中更改详见：<a href="https://jingyan.baidu.com/article/c910274b39fbdc8d371d2d23.html">https://jingyan.baidu.com/article/c910274b39fbdc8d371d2d23.html</a><br /><a name="9wd6W"></a></p><h1 id="向客户端发送数据"><a class="markdownIt-Anchor" href="#向客户端发送数据"></a> 向客户端发送数据</h1><p>ServletResponse接口有一个方法getWriter，用于获取到一个输出流对象PrintWriter，该输出流对象是专门用于客户端浏览器中输出字符数据的，称为标准输出流。<br /><a name="q1JW3"></a></p><h2 id="write和print区别"><a class="markdownIt-Anchor" href="#write和print区别"></a> write和print区别</h2><ul><li>print()和println()是JspWriter类中定义的方法，write()则是Writer类中定义的。</li><li>print()和println()方法可将各种类型的数据转换成字符串的形式输出，而write()方法只能输出字符、字符数组和字符串等与字符相关的数据。</li><li>如果字符串对象的值为null，print()和println()方法将输出内容为“null”的字符串，而write()方法则是抛出NullPointerException异常。</li><li>write()方法只能写入字符串或unicode码写入到响应体，print()任可以将各种类型（包括Object）的数据通过默认编码转换成bytes字节形式，这些字节都通过write(int c)方法被输出。如果写入一个数字使用write()方法，系统会将数字转换为对应的unicode码写入，write（50）会被打印出&quot;2&quot;。<br /><a name="bgwjI"></a></li></ul><h2 id="print和println区别"><a class="markdownIt-Anchor" href="#print和println区别"></a> print和println区别：</h2><p>println()虽然看似是换行，但转成网页之后，这种换行被认为是空格，所以输出的仍然是一行，用空格分隔，但右键点击页面查看源代码时，能看出换行起作用了。<br />所以在页面上需要换行的话，需要用<code>&lt;br/&gt;</code>。<br /><a name="8gdch"></a></p><h2 id="编码问题"><a class="markdownIt-Anchor" href="#编码问题"></a> 编码问题</h2><p>contentType是指body的内容格式，比如xml，json等。<br />characterEncoding指的是body的编码格式，比如utf-8,gbk等。<br />setCharacterEncoding(…) 方法设置的编码格式最终会追加到contentType这个key的值上，比如 “Content-Type”= &quot;text/html;charset=utf-8”。也就是说在设置contentType的同时，也可以设置内容的编码格式。<br />如果未设置编码格式，比如setContentType（“text/html”），那么可以通过setCharacterEncoding（“utf-8”） 方法来追加。<br />contentType对应的就是header里的一个Content-Type，就是一个键值对，http协议规定了很多键值对，每个键值对起不同的作用。<br />注意：两种方法都要在printWriter使用之前使用<br /><a name="61q6G"></a></p><h3 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        <span class="comment">//方法一：</span></span><br><span class="line">        <span class="comment">//response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二：</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出文字</span></span><br><span class="line">        response.getWriter().append(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        <span class="comment">//获取标准输出流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">//输出文字</span></span><br><span class="line">        out.println(<span class="string">&quot;你好世界！&quot;</span>);</span><br><span class="line">        out.write(<span class="string">&quot;你好中国！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="wEOTJ"></a></p><h3 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582185196196-d435c586-e93c-48b4-a54b-4ac0b9460357.png#align=left&amp;display=inline&amp;height=45&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=45&amp;originWidth=292&amp;size=2605&amp;status=done&amp;style=none&amp;width=292" alt="image.png" /><br /><a name="tkqHS"></a></p><h2 id="插队问题"><a class="markdownIt-Anchor" href="#插队问题"></a> 插队问题：</h2><p>详见：<a href="https://blog.csdn.net/weixin_38958597/article/details/82693273">https://blog.csdn.net/weixin_38958597/article/details/82693273</a><br /><a name="mltEg"></a></p><h1 id="请求转发与重定向"><a class="markdownIt-Anchor" href="#请求转发与重定向"></a> 请求转发与重定向</h1><p>通过HttpServletRequest获取到RequestDispactcher对象的forward方法，可以完成请求转发功能。而通过HttpServletResponse和SendRedirect方法，可以完成重定向。<br /><a name="GQWw6"></a></p><h2 id="转发"><a class="markdownIt-Anchor" href="#转发"></a> 转发：</h2><p>由服务器端进行的页面跳转<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582186850829-1df4bd05-cc0d-4ca4-a952-e3358e3a40d1.png#align=left&amp;display=inline&amp;height=525&amp;margin=%5Bobject%20Object%5D&amp;originHeight=525&amp;originWidth=787&amp;size=0&amp;status=done&amp;style=none&amp;width=787" alt="" /><br /><a name="foQbo"></a></p><h3 id="转发方式"><a class="markdownIt-Anchor" href="#转发方式"></a> 转发方式：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582188030551-f9a7ecbc-913d-4a2f-9978-304e7d5b93db.png#align=left&amp;display=inline&amp;height=89&amp;margin=%5Bobject%20Object%5D&amp;originHeight=89&amp;originWidth=782&amp;size=0&amp;status=done&amp;style=none&amp;width=782" alt="" /><br /><a name="D9y7G"></a></p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><ol><li>请求所转发到的资源中可以直接获取到请求中所携带的数据。<br /></li><li>只有1次请求，收到一次响应。</li><li>浏览器地址栏显示为用户所提交的请求路径。</li><li>只能跳转到当前应用的资源中。<br /><a name="ZNGR9"></a></li></ol><h3 id="代码演示-2"><a class="markdownIt-Anchor" href="#代码演示-2"></a> 代码演示：</h3><p><a name="yEHqm"></a></p><h4 id="someservlet"><a class="markdownIt-Anchor" href="#someservlet"></a> SomeServlet:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交内容</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(strAge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向域中添加内容</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转发请求</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/OtherServlet&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="z1dzE"></a></p><h4 id="otherservlet"><a class="markdownIt-Anchor" href="#otherservlet"></a> OtherServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String name = names.nextElement();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> String(req.getParameter(name).getBytes(<span class="string">&quot;ISO_8859_1&quot;</span>), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;OtherServlet is Running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="tGkao"></a></p><h4 id="结果演示-2"><a class="markdownIt-Anchor" href="#结果演示-2"></a> 结果演示：</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582189968967-ca6c372e-eaec-4e7c-9eaa-a79f898916de.png#align=left&amp;display=inline&amp;height=137&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=137&amp;originWidth=414&amp;size=10917&amp;status=done&amp;style=none&amp;width=414" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582189978127-435e03a0-3e20-48cd-93b5-f62ed148f5f2.png#align=left&amp;display=inline&amp;height=73&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=73&amp;originWidth=223&amp;size=10092&amp;status=done&amp;style=none&amp;width=223" alt="image.png" /><br /><a name="SYDwI"></a></p><h2 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向：</h2><p>由浏览器端进行的页面跳转<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582186867780-08426907-60b1-4939-a1ec-676ad04cce47.png#align=left&amp;display=inline&amp;height=530&amp;margin=%5Bobject%20Object%5D&amp;originHeight=530&amp;originWidth=790&amp;size=0&amp;status=done&amp;style=none&amp;width=790" alt="" /><br /><a name="gXMun"></a></p><h3 id="定向方式"><a class="markdownIt-Anchor" href="#定向方式"></a> 定向方式</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582195661951-8b7a3159-8306-4c70-8806-6943086cb2d1.png#align=left&amp;display=inline&amp;height=73&amp;margin=%5Bobject%20Object%5D&amp;originHeight=96&amp;originWidth=702&amp;size=0&amp;status=done&amp;style=none&amp;width=531" alt="" /><br /><a name="Pkp8Y"></a></p><h3 id="特点-2"><a class="markdownIt-Anchor" href="#特点-2"></a> 特点</h3><ol><li>请求所转发到的资源中不能直接获取到请求中所携带的数据。</li><li>两次请求，两次响应</li><li>浏览器地址栏显示的为重定向的请求路径，而非用户提交请求的路径。正因如此，重定向可以防止表单重复提交。</li><li>重定向不仅可以跳转到当前应用的其他资源，也可以跳转到其他应用中资源。<br /><a name="IvZCJ"></a></li></ol><h3 id="代码演示-3"><a class="markdownIt-Anchor" href="#代码演示-3"></a> 代码演示：</h3><p><a name="CwKxk"></a></p><h4 id="someservlet-2"><a class="markdownIt-Anchor" href="#someservlet-2"></a> SomeServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交内容</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(strAge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向域中添加内容</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/OtherServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="qtsV6"></a></p><h4 id="otherservlet-2"><a class="markdownIt-Anchor" href="#otherservlet-2"></a> OtherServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(req.getAttribute(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String name = names.nextElement();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> String(req.getParameter(name).getBytes(<span class="string">&quot;ISO_8859_1&quot;</span>), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;OtherServlet is Running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="lxTvX"></a></p><h4 id="结果演示-3"><a class="markdownIt-Anchor" href="#结果演示-3"></a> 结果演示：</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582197290791-764bf3c7-74f1-40a4-87b5-ed2ba5ca26e1.png#align=left&amp;display=inline&amp;height=69&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=137&amp;originWidth=481&amp;size=12272&amp;status=done&amp;style=none&amp;width=240.5" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582197271112-9e309991-3308-4d00-8d4d-7ac571c92e9f.png#align=left&amp;display=inline&amp;height=43&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=54&amp;originWidth=182&amp;size=6076&amp;status=done&amp;style=none&amp;width=145" alt="image.png" /><br />显然是获取不到数据的。<br /><a name="cRD19"></a></p><h3 id="接收数据的重定向"><a class="markdownIt-Anchor" href="#接收数据的重定向"></a> 接收数据的重定向</h3><p>如果想要传递数据应该如此修改：<br />注意编码<br /><a name="U8aoc"></a></p><h4 id="someservlet-3"><a class="markdownIt-Anchor" href="#someservlet-3"></a> SomeServlet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交内容</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(strAge);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向域中添加内容</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/OtherServlet?name=&quot;</span> + URLEncoder.encode(name, <span class="string">&quot;UTF-8&quot;</span>) + <span class="string">&quot;&amp;age=&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="FzI8z"></a></p><h4 id="otherservlet-3"><a class="markdownIt-Anchor" href="#otherservlet-3"></a> OtherServlet:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String name = names.nextElement();</span><br><span class="line">            System.out.println(name + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> String(req.getParameter(name).getBytes(<span class="string">&quot;ISO_8859_1&quot;</span>), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;OtherServlet is Running!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="VtsHB"></a></p><h2 id="对比分析"><a class="markdownIt-Anchor" href="#对比分析"></a> 对比分析：</h2><p><a name="V3vkT"></a></p><h3 id="重定向和转发的区别"><a class="markdownIt-Anchor" href="#重定向和转发的区别"></a> 重定向和转发的区别</h3><table><thead><tr><th><strong>区别</strong></th><th><strong>转发forward()</strong></th><th><strong>重定向sendRedirect()</strong></th></tr></thead><tbody><tr><td><strong>根目录</strong></td><td>包含项目访问地址</td><td>没有项目访问地址</td></tr><tr><td><strong>地址栏</strong></td><td>不会发生变化</td><td>会发生变化</td></tr><tr><td><strong>哪里跳转</strong></td><td>服务器端进行的跳转</td><td>浏览器端进行的跳转</td></tr><tr><td><strong>请求域中数据</strong></td><td>不会丢失</td><td>会丢失</td></tr></tbody></table><p><a name="7q88Y"></a></p><h3 id="个人观点"><a class="markdownIt-Anchor" href="#个人观点"></a> 个人观点</h3><p>我个人认为这两种的区别就是合作与分工的区别，转发是合作处理，将自己处理好的东西递交给另一个Servlet进行处理；重定向是分工处理，自己处理好以后让下一个Servlet处理。<br /><a name="CFqbw"></a></p><h3 id="自问自答"><a class="markdownIt-Anchor" href="#自问自答"></a> 自问自答</h3><p>问：什么时候使用转发，什么时候使用重定向？<br /></p><ol><li>若需要跳转到其他应用选择重定向。</li><li>若是处理表单数据的Servlet要跳转到其他Servlet选择重定向，防止表单重复提交。</li><li>若对某一请求进行处理的Servlet的执行需要消耗大量的服务器资源（CPU、内存）选择重定向</li><li>其他情况选择转发。</li></ol><p><a name="wD6kA"></a></p><h1 id="include和forward区别"><a class="markdownIt-Anchor" href="#include和forward区别"></a> include和forward区别</h1><p>RequestDispatcher只有两个方法：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582267822414-492cd611-a462-414e-9184-f441b6e21e58.png#align=left&amp;display=inline&amp;height=86&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=114&amp;originWidth=940&amp;size=21061&amp;status=done&amp;style=none&amp;width=708" alt="image.png" /><br />这两个主要表现在标准输出流的开启时间不同：</p><ul><li>forward是把一个request从一个Servlet传递到另一个Server上的资源（servlet、JSP或者HTML）。表示转发，则控制权也同时交给了另一个组件，所以最终由另一组件返回响应。所以此时写入到out的数据是不会写入到客户端浏览器中的。</li><li>include是把资源（servlet、JSP或者HTML）文件放在response中。表示包含，则控制权还在自己身上，所以最终还是由自己返回响应。<br /><a name="QUX5z"></a></li></ul><h2 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例：</h2><p><a name="cBhYs"></a></p><h3 id="forward"><a class="markdownIt-Anchor" href="#forward"></a> forward:</h3><p>Servlet1：out.println(“1”);<br />Servlet2：out.println(“2”);<br />Servlet1调用forward会跳转到Servlet2输出2<br /><a name="PQquu"></a></p><h4 id="图解"><a class="markdownIt-Anchor" href="#图解"></a> 图解</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582282066507-65009087-d172-4128-b8fc-319b2bb8c03b.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;originHeight=540&amp;originWidth=619&amp;size=0&amp;status=done&amp;style=none&amp;width=619" alt="" /><br /><a name="yASc5"></a></p><h3 id="include"><a class="markdownIt-Anchor" href="#include"></a> include:</h3><p>Servlet1：out.println(“1”);<br />Servlet2：out.println(“2”);<br />Servlet1调用include会留在Servlet1输出2后输出1<br /><a name="Xv8ME"></a></p><h4 id="图解-2"><a class="markdownIt-Anchor" href="#图解-2"></a> 图解</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582282101260-bb2574d1-ae5f-4b9a-a6ba-3231db70a853.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;originHeight=540&amp;originWidth=640&amp;size=0&amp;status=done&amp;style=none&amp;width=640" alt="" /><br /><a name="pK22R"></a></p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论：</h2><p>使用forward进行请求转发时，使用forward的Servlet不应向Response中写入数据。若写入数据，则应使用include进行转发。<br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;Z4U3K&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;中文乱码问题解决&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#中文乱码问题解决&quot;&gt;&lt;/a&gt; 中文乱码问题解决&lt;/h1&gt;
&lt;p&gt;通过未经配置过的Tomcat来Post表单，会在控制</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>servlet核心知识2</title>
    <link href="https://jie-blog.icu/posts/servlet-2/"/>
    <id>https://jie-blog.icu/posts/servlet-2/</id>
    <published>2020-09-02T08:10:21.000Z</published>
    <updated>2020-09-05T09:42:35.725Z</updated>
    
    <content type="html"><![CDATA[<p><a name="yri3x"></a></p><h1 id="dopost和doget"><a class="markdownIt-Anchor" href="#dopost和doget"></a> doPost和doGet</h1><p>要将doPst和doGet，首先要分析POST和GET的区别<br /><a name="Wnf2s"></a></p><h2 id="post和get"><a class="markdownIt-Anchor" href="#post和get"></a> POST和GET</h2><p>GET - 从指定的资源请求数据。<br />POST - 向指定的资源提交要被处理的数据<br /><a name="T25KY"></a></p><h3 id="get"><a class="markdownIt-Anchor" href="#get"></a> GET</h3><p>请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：<br />/test/demo_form.asp?name1=value1&amp;name2=value2<br />有关 GET 请求的其他一些注释：</p><ul><li>GET 请求可被缓存</li><li>GET 请求保留在浏览器历史记录中</li><li>GET 请求可被收藏为书签</li><li>GET 请求不应在处理敏感数据时使用</li><li>GET 请求有长度限制</li><li>GET 请求只应当用于取回数据<br /><a name="dq0Zo"></a></li></ul><h3 id="post"><a class="markdownIt-Anchor" href="#post"></a> POST</h3><p>请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：<br />POST /test/demo_form.asp HTTP/1.1<br />Host: w3schools.com<br />name1=value1&amp;name2=value2<br />有关 POST 请求的其他一些注释：</p><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求<br /><a name="51hmv"></a></li></ul><h3 id="比较post和get"><a class="markdownIt-Anchor" href="#比较post和get"></a> 比较POST和GET</h3><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">GET</th><th style="text-align:left">POST</th></tr></thead><tbody><tr><td style="text-align:left">后退按钮/刷新</td><td style="text-align:left">无害</td><td style="text-align:left">数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td style="text-align:left">书签</td><td style="text-align:left">可收藏为书签</td><td style="text-align:left">不可收藏为书签</td></tr><tr><td style="text-align:left">缓存</td><td style="text-align:left">能被缓存</td><td style="text-align:left">不能缓存</td></tr><tr><td style="text-align:left">编码类型</td><td style="text-align:left">application/x-www-form-urlencoded</td><td style="text-align:left">application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td style="text-align:left">历史</td><td style="text-align:left">参数保留在浏览器历史中。</td><td style="text-align:left">参数不会保存在浏览器历史中。</td></tr><tr><td style="text-align:left">对数据长度的限制</td><td style="text-align:left">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td style="text-align:left">无限制。</td></tr><tr><td style="text-align:left">对数据类型的限制</td><td style="text-align:left">只允许 ASCII 字符。</td><td style="text-align:left">没有限制。也允许二进制数据。</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。<br />在发送密码或其他敏感信息时绝不要使用 GET ！</td><td style="text-align:left">POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td style="text-align:left">可见性</td><td style="text-align:left">数据在 URL 中对所有人都是可见的。</td><td style="text-align:left">数据不会显示在 URL 中。</td></tr></tbody></table><p><a name="ljFU0"></a></p><h2 id="dopost和doget-2"><a class="markdownIt-Anchor" href="#dopost和doget-2"></a> doPost和doGet</h2><p>这两种方法有本质的区别，get只有一个流，参数附加在url后，大小个数有严格限制且只能是字符串。post的参数是通过另外的流传递的，不通过url，所以可以很大，也可以传递二进制数据，如文件的上传。 在servlet开发中，以doGet()和doPost()分别处理get和post方法。 <br /><a name="cilaQ"></a></p><h3 id="doget"><a class="markdownIt-Anchor" href="#doget"></a> doGet</h3><p>GET 调用用于获取服务器信息，并将其做为响应返回给客户端。当经由Web浏览器或通过HTML、JSP直接访问Servlet的URL时，一般用GET调用。 GET调用在URL里显示正传送给SERVLET的数据，这在系统的安全方面可能带来一些问题，比如用户登录，表单里的用户名和密码需要发送到服务器端， 若使用Get调用，就会在浏览器的URL中显示用户名和密码。<br /><a name="vbrW3"></a></p><h3 id="dopost"><a class="markdownIt-Anchor" href="#dopost"></a> doPost</h3><p>它用于客户端把数据传送到服务器端，也会有副作用。但好处是可以隐藏传送给服务器的任何数据。Post适合发送大量的数据。<br /><a name="XnJUY"></a></p><h3 id="调用原理及其他问题"><a class="markdownIt-Anchor" href="#调用原理及其他问题"></a> 调用原理及其他问题</h3><p>当发出客户端请求的时候，调用service 方法并传递一个请求和响应对象。Servlet首先判断该请求是GET 操作还是POST 操作。然后它调用下面的一个方法：doGet 或 doPost。因此可以把方法写在doGet()方法中,在doPost()方法中调用执行,这样,无论你提交的是post还是get方法都可以执行。<br />servlet代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,ServletException </span>&#123;</span><br><span class="line">      request.setCaracterEncoding(“gb2312”);<span class="comment">//汉字转码</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">&quot;The Parameter are ：&quot;</span>+request.getParameter(<span class="string">&quot;name1&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException,ServletException </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.goGet(request,response);<span class="comment">//调用doGet()方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="zazbc"></a></p><h4 id="安全"><a class="markdownIt-Anchor" href="#安全"></a> 安全</h4><p>GET调用在URL里显示正传送给SERVLET的数据，这在系统的安全方面可能带来问题，例如用户名和密码等<br />POST就可以在一定程度上解决此类问题<br /><a name="787dx"></a></p><h4 id="服务器接收方式"><a class="markdownIt-Anchor" href="#服务器接收方式"></a> 服务器接收方式</h4><p>服务器随机接受GET方法的数据，一旦断电等原因，服务器也不知道信息是否发送完毕<br />而POST方法，服务器先接受数据信息的长度，然后再接受数据<br /><a name="7Fu2q"></a></p><h4 id="form运行方式"><a class="markdownIt-Anchor" href="#form运行方式"></a> form运行方式</h4><p>当form框里面的method为get时，执行doGet方法<br />当form框里面的method为post时，执行doPost方法<br /><a name="pHQkR"></a></p><h4 id="容量限制"><a class="markdownIt-Anchor" href="#容量限制"></a> 容量限制</h4><p>GET方法后面的信息量字节大小不要超过1.3K，而Post则没有限制<br /><a name="K4mlX"></a></p><h2 id="区别总结"><a class="markdownIt-Anchor" href="#区别总结"></a> 区别总结</h2><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；<br />而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。<br />1. GET与POST都有自己的语义，不能随便混用。<br />2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。<br />3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。<br /><a name="KEegm"></a></p><h1 id="request和response"><a class="markdownIt-Anchor" href="#request和response"></a> Request和Response</h1><p>Web服务器收到客户端的http请求，会针对每一次请求，分别创建一个用于代表请求的request对象、和代表响应的response对象。<br />当需要获取客户机提交过来的数据时，用request对象， 当需要向客户机输出数据，用esponse对象。<br /><a name="iAeH7"></a></p><h2 id="请求响应流程"><a class="markdownIt-Anchor" href="#请求响应流程"></a> 请求响应流程</h2><ol><li>浏览器发送请求</li><li>服务器接收请求,创建两个对象(request和response),将请求的信息封装request对象</li><li>找到对应的servlet,将这两个对象传递给servlet</li><li>Servlet收到请求,执行service方法,处理自己的业务逻辑,生成动态的内容,将内容返回给服务器</li><li>服务器收到内容之后,进行拆分,生成响应信息,返回给浏览器</li><li>浏览器解析相应信息<br /><a name="e27Mx"></a></li></ol><h2 id="response"><a class="markdownIt-Anchor" href="#response"></a> Response</h2><p><a name="L0mvl"></a></p><h3 id="操作响应行"><a class="markdownIt-Anchor" href="#操作响应行"></a> 操作响应行</h3><p>格式:协议/版本 状态码 状态码说明<br />例如:HTTP/1.1 200 OK<br />在http响应行中，包括协议,版本号,以及有一个很重要的值，它叫做响应状态码.响应行中我们主要就是操作这些状态码,它可以有五种类型取值:<br />100-199<br />200-299<br />300-399<br />400-499<br />500-599<br /><a name="rCsDh"></a></p><h4 id="常用状态码"><a class="markdownIt-Anchor" href="#常用状态码"></a> 常用状态码：</h4><ul><li>200：请求成功（其后是对GET和POST请求的应答文档。）</li><li>302：所请求的页面已经临时转移至新的url。(重定向)(配合location响应头使用)</li><li>304：未按预期修改文档。(让浏览器读缓存)客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since(什么时候修改的))头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</li><li>404：没有找到文件或目录。(用户操作错误)</li><li>405：请求中指定的方法不被允许</li><li>500：请求未完成。服务器遇到不可预知的情况(代码错误)</li><li>504：网关错误.<br /><a name="D3QL8"></a></li></ul><h4 id="httpservletresponse操作状态码方法"><a class="markdownIt-Anchor" href="#httpservletresponse操作状态码方法"></a> HttpServletResponse操作状态码方法：</h4><p>void setStatus(int sc): 设置状态代码.针对于非错误的状态码<br />例如:setstatus （200）<br />void sendError(int status,String msg) throws IOException 设置错误状态码及信息<br />例如:response.sendError(404);报404错误<br />response.sendError(404,一不小心走丢了…);报错误并且有错误信息<br /><a name="EU1O2"></a></p><h3 id="response操作响应头"><a class="markdownIt-Anchor" href="#response操作响应头"></a> response操作响应头</h3><p>http响应头的格式是 key/value的格式，可以有多个value值，以”,”分开。<br />例如:<br />Content-Encoding: gzip<br />Content-Length: 123<br />Content-Language: zh-cn<br />Content-Type: text/html; charset=GB2312<br />Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT<br /><a name="cBmHI"></a></p><h4 id="操作响应头-api"><a class="markdownIt-Anchor" href="#操作响应头-api"></a> 操作响应头 API</h4><p>public void setHeader(String name,String value)<br />用给定名称和值设置响应头。如果已经设置了头，则新值将重写以前的值(设置字符串形式的响应头 注意:若设置过,会覆盖)<br />public void addHeader(String name, String value)<br />用给定名称和值添加响应头。此方法允许响应头有多个值(追加字符串形式的响应头 注意:若没有设置过则设置,若设置过则追加)<br />public void setIntHeader(String name, int value)<br />用给定名称和整数值设置响应头。如果已经设置了头，则新值将重写以前的值。(设置整型的响应头)<br />public void addIntHeader(String name, int value)<br />用给定名称和整数值添加响应头。此方法允许响应头有多个值。(添加整型的响应头)<br />public voidsetDateHeader(String name, long date)<br />用给定名称和日期值设置响应头。该日期根据距历元时间的毫秒数指定。如果已经设置了头，则新值将重写以前的值。(设置时间类型的响应头)<br />public void addDateHeader(String key, long date)<br />用给定名称和日期值添加响应头。该日期根据距历元时间的毫秒数指定。此方法允许响应头有多个值。(添加时间类型的响应头)<br /><a name="hyggG"></a></p><h2 id="request"><a class="markdownIt-Anchor" href="#request"></a> Request</h2><p>HttpServletRequest对象用于封装http请求，对于http请求它有三部分组成，http请求行，http请求头及请求正文。<br /><a name="JLucg"></a></p><h3 id="request操作请求行"><a class="markdownIt-Anchor" href="#request操作请求行"></a> request操作请求行</h3><p>格式:请求方式 请求资源 协议/版本<br />例如:GET /day10 HTTP/1.1<br /><a name="ie3vx"></a></p><h4 id="常用请求行api"><a class="markdownIt-Anchor" href="#常用请求行api"></a> 常用请求行API</h4><ul><li>public String getMethod()：获取请求方式例如 GET、POST</li><li>public String getRequestURI()：获取去请求资源(不带参数) 是uri 例如:/day10/r</li><li>public String getProtocol()：获取协议的名称和版本。（例如 HTTP/1.1）</li><li>public String getQueryString()：返回包含在请求 URL 中路径后面的查询字符串。如果 URL 没有查询字符串，则此方法返回 null。<br /><a name="SWaua"></a></li></ul><h3 id="request操作请求头"><a class="markdownIt-Anchor" href="#request操作请求头"></a> request操作请求头</h3><p>格式:key/value(value可以为多个)<br /><a name="B6VZ9"></a></p><h4 id="常用请求头api"><a class="markdownIt-Anchor" href="#常用请求头api"></a> 常用请求头API</h4><ul><li>public String getHeader(String name) 获取字符串格式的请求头，以 String 的形式返回指定请求头的值。</li><li>public java.util.Enumeration<E> getHeaders(String name)获取多个值的请求头，以 String 对象的 Enumeration 的形式返回指定请求头的所有值。</li><li>public java.util.Enumeration<E> getHeaderNames()获取所有请求头的名称，返回此请求包含的所有头名称的枚举。如果该请求没有头，则此方法返回一个空枚举。</li><li>public int getIntHeader(String name) 获取整型格式的请求头，以 int 的形式返回指定请求头的值。如果该请求没有指定名称的头，则此方法返回 -1。如果无法将头转换为整数，则此方法抛出 NumberFormatException。</li><li>public long getDateHeader(String name)获取时间类型的请求头，以表示 Date 对象的 long 值的形式返回指定请求头的值<br /><a name="ueNth"></a></li></ul><h3 id="request获取参数中文出现乱码"><a class="markdownIt-Anchor" href="#request获取参数中文出现乱码"></a> request获取参数中文出现乱码</h3><p><a name="D66SF"></a></p><h4 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因:</h4><p>汉字在不同的编码表中的码值不一样，那么在使用不同的编码表进行解码与编码操作时，就会出现乱码问题.<br />浏览器在提交的时候使用utf-8编码，Tomcat得到请求参数是使用iso8859-1进行了解码，封装到了request中。<br /><a name="6qSI7"></a></p><h4 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决：</h4><p>先使用iso8859-1进行解码，在使用utf-8进行编码<br />每个参数都要new才行(get,post方法都可行)<br />username= new String(username.getBytes(“iso8859-1”),”utf-8”);<br />如果请求方式是POST,<br />可以直接使用request.setCharacterEncoding(“utf-8”);就可以解决。<br /><a name="uDJfO"></a></p><h1 id="请求筛选"><a class="markdownIt-Anchor" href="#请求筛选"></a> 请求筛选</h1><p>在众多网站中提交表单时，需要将表单提交后跳转到指定界面称为POST的方法，倘若直接用GET方法访问跳转的页面方法则会导致未登录就进入操作界面从而引发一系列可怕后果，因此需要在提交数据时判断请求的GET/POST方法来遏制这种不好的后果。<br />POST和GET是HTTP协议，又根据public interface HttpServletRequest extends ServletRequest得知HttpServletRequest是ServletRequest的子类，且HttpServletRequest中getMethod方法可以获取提交方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request= (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response= (HttpServletResponse) res;</span><br><span class="line">        <span class="comment">//获取提交方式</span></span><br><span class="line">        System.out.println(request.getMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此请求筛选代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="comment">//获取提交方式</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (POST.equals(method)) &#123;</span><br><span class="line">            doPost(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doGet(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 对于get的处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 对于post的处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="iMDKo"></a></p><h2 id="自定义httpservlet"><a class="markdownIt-Anchor" href="#自定义httpservlet"></a> 自定义HttpServlet</h2><p>因为类似这样需要过滤请求的类很多，因此考虑创建出一个父类来简化其他的Servlet的代码量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取提交方式</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (POST.equals(method)) &#123;</span><br><span class="line">            doPost(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doGet(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Yj30a"></a></p><h3 id="实现servlet"><a class="markdownIt-Anchor" href="#实现servlet"></a> 实现Servlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO get操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO post操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，只需要在子类实现两个方法即可，避免了大量的代码浪费。<br /><a name="1ejJl"></a></p><h2 id="httpservlet源码"><a class="markdownIt-Anchor" href="#httpservlet源码"></a> HttpServlet源码</h2><p>HttpServlet也是javax.servlet.http中原厂自带的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">&quot;HEAD&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">&quot;OPTIONS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">&quot;TRACE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_IFMODSINCE = <span class="string">&quot;If-Modified-Since&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_LASTMOD = <span class="string">&quot;Last-Modified&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LSTRING_FILE =</span><br><span class="line">        <span class="string">&quot;javax.servlet.http.LocalStrings&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle lStrings =</span><br><span class="line">        ResourceBundle.getBundle(LSTRING_FILE);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DispatcherType.INCLUDE.equals(req.getDispatcherType())) &#123;</span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">            doGet(req, response);</span><br><span class="line">            response.setContentLength();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_put_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="function"><span class="params">                            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_delete_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method[] getAllDeclaredMethods(Class&lt;?&gt; c) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c.equals(javax.servlet.http.HttpServlet.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());</span><br><span class="line">        Method[] thisMethods = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((parentMethods != <span class="keyword">null</span>) &amp;&amp; (parentMethods.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            Method[] allMethods =</span><br><span class="line">                <span class="keyword">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class="line">            System.arraycopy(parentMethods, <span class="number">0</span>, allMethods, <span class="number">0</span>,</span><br><span class="line">                             parentMethods.length);</span><br><span class="line">            System.arraycopy(thisMethods, <span class="number">0</span>, allMethods, parentMethods.length,</span><br><span class="line">                             thisMethods.length);</span><br><span class="line"></span><br><span class="line">            thisMethods = allMethods;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thisMethods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Method[] methods = getAllDeclaredMethods(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_GET = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_HEAD = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_POST = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_PUT = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_DELETE = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_TRACE = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_OPTIONS = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tomcat specific hack to see if TRACE is allowed</span></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = Class.forName(<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span>);</span><br><span class="line">            Method getAllowTrace = clazz.getMethod(<span class="string">&quot;getAllowTrace&quot;</span>, (Class&lt;?&gt;[]) <span class="keyword">null</span>);</span><br><span class="line">            ALLOW_TRACE = ((Boolean) getAllowTrace.invoke(req, (Object[]) <span class="keyword">null</span>)).booleanValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | SecurityException |</span><br><span class="line">                IllegalAccessException | IllegalArgumentException | InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// Ignore. Not running on Tomcat. TRACE is always allowed.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// End of Tomcat specific hack</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;methods.length; i++) &#123;</span><br><span class="line">            Method m = methods[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doGet&quot;</span>)) &#123;</span><br><span class="line">                ALLOW_GET = <span class="keyword">true</span>;</span><br><span class="line">                ALLOW_HEAD = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doPost&quot;</span>))</span><br><span class="line">                ALLOW_POST = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doPut&quot;</span>))</span><br><span class="line">                ALLOW_PUT = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">&quot;doDelete&quot;</span>))</span><br><span class="line">                ALLOW_DELETE = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String allow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_GET)</span><br><span class="line">            allow=METHOD_GET;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_HEAD)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_HEAD;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_HEAD;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_POST)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_POST;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_POST;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_PUT)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_PUT;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_PUT;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_DELETE)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_DELETE;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_DELETE;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_TRACE)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_TRACE;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_TRACE;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_OPTIONS)</span><br><span class="line">            <span class="keyword">if</span> (allow==<span class="keyword">null</span>) allow=METHOD_OPTIONS;</span><br><span class="line">            <span class="keyword">else</span> allow += <span class="string">&quot;, &quot;</span> + METHOD_OPTIONS;</span><br><span class="line"></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Allow&quot;</span>, allow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> responseLength;</span><br><span class="line"></span><br><span class="line">        String CRLF = <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        StringBuilder buffer = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;TRACE &quot;</span>).append(req.getRequestURI())</span><br><span class="line">            .append(<span class="string">&quot; &quot;</span>).append(req.getProtocol());</span><br><span class="line"></span><br><span class="line">        Enumeration&lt;String&gt; reqHeaderEnum = req.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>( reqHeaderEnum.hasMoreElements() ) &#123;</span><br><span class="line">            String headerName = reqHeaderEnum.nextElement();</span><br><span class="line">            buffer.append(CRLF).append(headerName).append(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">                .append(req.getHeader(headerName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer.append(CRLF);</span><br><span class="line"></span><br><span class="line">        responseLength = buffer.length();</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;message/http&quot;</span>);</span><br><span class="line">        resp.setContentLength(responseLength);</span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        out.print(buffer.toString());</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeSetLastModified</span><span class="params">(HttpServletResponse resp,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resp.containsHeader(HEADER_LASTMOD))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (lastModified &gt;= <span class="number">0</span>)</span><br><span class="line">            resp.setDateHeader(HEADER_LASTMOD, lastModified);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致思路和刚才自定义的思路类似，不过这里不得不吐槽一下service里面的大量if else 的确略笨重。<br /><a name="0cxb0"></a></p><h3 id="servlet实现"><a class="markdownIt-Anchor" href="#servlet实现"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;posting&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="TGayZ"></a></p><h1 id="请求的生命周期"><a class="markdownIt-Anchor" href="#请求的生命周期"></a> 请求的生命周期</h1><p>发送给浏览器信息如图：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582122436148-34e3cecb-26f1-4051-93da-72f88fd66647.png#align=left&amp;display=inline&amp;height=470&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=567&amp;originWidth=831&amp;size=45789&amp;status=done&amp;style=none&amp;width=689" alt="image.png" /><br />当客户端浏览器将请求发送到服务器后，服务器会根据HTTP请求进行解析。同时，服务器会创建HttpServletRequest的实现类RequestFacade的对象，即请求对象。然后在调用对应的set方法，将解析出的数据封装到请求中。此时HttpServletRequset实例就创建并初始化完毕了。也就是说，请求对象是由服务器（tomcat）创建的。<br />当服务器向客户端发送响应后，HttpRequest实例对象被服务器销毁。<br /><a name="eOaGR"></a></p><h1 id="请求参数的获取"><a class="markdownIt-Anchor" href="#请求参数的获取"></a> 请求参数的获取</h1><p>当数据发送到服务器，服务器要对参数进行解析。HttpServletRequest对于请求中所携带的参数是以map的形式接受的，并且map的key为String，value为String数组。之所以是这种形式是因为一个name可以对应多个value，而一个value只能对应一个name。<br /><a name="ZeECW"></a></p><h2 id="代码演示"><a class="markdownIt-Anchor" href="#代码演示"></a> 代码演示：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定名称请求数据值获取</span></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String strAge = request.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Integer age = Integer.parseInt(strAge);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot; 年龄：&quot;</span> + age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有请求的名称</span></span><br><span class="line">        Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">        <span class="comment">//遍历枚举</span></span><br><span class="line">        <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">            String tempName = names.nextElement();</span><br><span class="line">            String element = request.getParameter(tempName);</span><br><span class="line">            System.out.println(tempName + <span class="string">&quot;:&quot;</span> + element);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] hobby = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String str : hobby) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取存放请求的Map</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="E1OMc"></a></p><h2 id="效果演示"><a class="markdownIt-Anchor" href="#效果演示"></a> 效果演示：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582136903551-2d31532e-02ef-449d-af96-e8ca4a371ef3.png#align=left&amp;display=inline&amp;height=140&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=161&amp;originWidth=223&amp;size=23826&amp;status=done&amp;style=none&amp;width=194" alt="image.png" /><br /><a name="Wpgx2"></a></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><ol><li>请求参数是存放在Map中的</li><li>这个Map的Key为请求参数的名称，为String类型。Map的Value为请求参数的所有值，为String[]类型。</li><li>使用最多的是getParameter方法，其等价于getParametervalues()[0]。<br /><a name="JRj0i"></a></li></ol><h1 id="域属性"><a class="markdownIt-Anchor" href="#域属性"></a> 域属性</h1><p>在Request中也存在域属性空间，用于存放有名称的数据。该数据只在当前Request请求中进行访问。一般常用在请求转发方案中，将request对象给别的servlet用来参与这一次请求转发操作中所设计的Servlet提供共享数据。<br /><a name="kykUJ"></a></p><h2 id="someservlet"><a class="markdownIt-Anchor" href="#someservlet"></a> SomeServlet:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//获得属性</span></span><br><span class="line">        System.out.println(request.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="comment">//获得其他的servlet</span></span><br><span class="line">        RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">&quot;/OtherServlet&quot;</span>);</span><br><span class="line">        <span class="comment">//发送request到另一个dispatcher</span></span><br><span class="line">        dispatcher.forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="zCUnD"></a></p><h2 id="otherservlet"><a class="markdownIt-Anchor" href="#otherservlet"></a> OtherServlet:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Other:&quot;</span> + req.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问域名：<a href="http://localhost:8080/RegisterServlet">http://localhost:8080/RegisterServlet</a><br /><a name="DSXTu"></a></p><h2 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582171296896-61831c7c-2d19-42ed-96fc-c6f08331b3e8.png#align=left&amp;display=inline&amp;height=77&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=77&amp;originWidth=211&amp;size=10805&amp;status=done&amp;style=none&amp;width=211" alt="image.png" /><br /><a name="qOBxm"></a></p><h1 id="访问路径问题"><a class="markdownIt-Anchor" href="#访问路径问题"></a> 访问路径问题</h1><p>URL，统一资源定位符。URI，统一资源标识符。通常都分为两部分：资源路径、资源名称。根据资源路径是否可以独立完成资源准确定定位来区分绝对和相对路径。<br /><a name="Ma3l0"></a></p><h2 id="绝对路径"><a class="markdownIt-Anchor" href="#绝对路径"></a> 绝对路径</h2><p>Web应用的绝对路径是指带访问协议的路径，即URL。<br /><a name="RtjKO"></a></p><h2 id="相对路径"><a class="markdownIt-Anchor" href="#相对路径"></a> 相对路径</h2><p>相对路径必须结合参照路径才可以组成可以准确定位资源的绝对路径。<br />根据相对路径是否以/开头，且路径出现的文件的不同，其默认的参数路径是不同的。<br /><a name="STjtx"></a></p><h2 id="以斜杠开头的路径"><a class="markdownIt-Anchor" href="#以斜杠开头的路径"></a> 以斜杠开头的路径</h2><p>又分为：前台路径、后台路径<br /><a name="J1d2e"></a></p><h3 id="前台路径"><a class="markdownIt-Anchor" href="#前台路径"></a> 前台路径</h3><p>有浏览器解析执行的代码中包含的路径，如html、css等。前台路径的参照路径是web服务器的根路径即http://localhost:8080<br /><a name="SuG77"></a></p><h3 id="后台路径"><a class="markdownIt-Anchor" href="#后台路径"></a> 后台路径</h3><p>由服务器解析执行的代码及文件中包含的路径，如java、xml等。后台路径的参照路径是web应用的根路径。如http://localhost:8080/primary<br /><a name="Q0u0o"></a></p><h4 id="特例"><a class="markdownIt-Anchor" href="#特例"></a> 特例：</h4><p>当代码中出现response的sendRedircet方法进行重定向时，若其参照路径是以斜杠开头，其参照路径不是web应用的根路径，而是web服务器的根路径。<br />重定向是由浏览器来重复发送请求，而请求转发的请求时服务器来发的。浏览器发请求，就会有浏览器来不全参照路径。服务器内部发请求，则由浏览器补全。<br /><a name="vrHjn"></a></p><h2 id="以路径名称开头"><a class="markdownIt-Anchor" href="#以路径名称开头"></a> 以路径名称开头</h2><p>无论是什么位置，其参照路径都是当前访问路径的资源路径。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;yri3x&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;dopost和doget&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#dopost和doget&quot;&gt;&lt;/a&gt; doPost和doGet&lt;/h1&gt;
&lt;p&gt;要将doPst和doGet，</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>servlet核心知识1</title>
    <link href="https://jie-blog.icu/posts/servlet-1/"/>
    <id>https://jie-blog.icu/posts/servlet-1/</id>
    <published>2020-08-31T14:03:17.000Z</published>
    <updated>2020-09-05T09:42:36.193Z</updated>
    
    <content type="html"><![CDATA[<p><a name="UFBPG"></a></p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p><a name="vNLr9"></a></p><h2 id="什么是servlet"><a class="markdownIt-Anchor" href="#什么是servlet"></a> 什么是Servlet</h2><p>宏观的讲，servlet是连接web服务器与java程序的协议是一种通信规范，这个规范是以一套接口的形式体现的。<br />微观的讲，Servlet是接口实现类的一个实例对象，是运行在服务器上的一段Java小程序，即Server Applet。他主要功能是根据客户端提交的请求，调用服务器相关的Java代码，完成对请求的处理与运算。<br /><a name="a7HE0"></a></p><h2 id="web访问流程图"><a class="markdownIt-Anchor" href="#web访问流程图"></a> web访问流程图：</h2><p>浏览器–HTTP–&gt;web服务器tomcat–&gt;servlet–&gt;服务器端程序–JDBC–&gt;数据库MySQL<br /><a name="fzZIQ"></a></p><h2 id="编写动态资源步骤"><a class="markdownIt-Anchor" href="#编写动态资源步骤"></a> 编写动态资源步骤</h2><ol><li>编写一个Java类，实现javax.servlet.Servlet接口。</li><li>将这个Java类部署到web服务器中<br /><a name="UY3Gd"></a></li></ol><h2 id="servlet生命周期"><a class="markdownIt-Anchor" href="#servlet生命周期"></a> Servlet生命周期</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/485026/1598766084408-d5b892c2-9b72-46bf-9b1f-8ca0e21e4c26.jpeg#align=left&amp;display=inline&amp;height=273&amp;margin=%5Bobject%20Object%5D&amp;originHeight=273&amp;originWidth=474&amp;size=0&amp;status=done&amp;style=none&amp;width=474" alt="" /><br /><a name="qORia"></a></p><h2 id="servlet特点"><a class="markdownIt-Anchor" href="#servlet特点"></a> Servlet特点</h2><ol><li>Servlet是单例多线程的。</li><li>一个Servlet实例只会执行一次无参构造器与init方法，并且是在第一次访问时执行。</li><li>用户每提交一次对当前Servlet的请求，就会执行一次service方法。</li><li>一个Servlet实例只会执行一次destory方法，在应用停止时执行。</li><li>由于Servlet是单例多线程的，所以为了保证其线程安全性，一般情况下是不为Servlet类定义可修改的成员变量的。因为每个线程均可修改这个成员变量，会出现线程安全问题。</li><li>默认情况下，servlet在Web容器启动时是不会被实例化的。<br /><a name="4ZLCE"></a></li></ol><h3 id="线程安全问题"><a class="markdownIt-Anchor" href="#线程安全问题"></a> 线程安全问题</h3><p>Servlet是单例多线程并发访问的，所以其就有可能会出现线程安全问题。为了避免，对于Servlet的使用，一般是不声明成员变量的。若必须声明则通过同步机制synchroized避免。<br /><a name="M35Nu"></a></p><h1 id="url-partten"><a class="markdownIt-Anchor" href="#url-partten"></a> url-partten</h1><p>url-partten有如下四种匹配模式。<br /><a name="BOYtm"></a></p><h2 id="精确路径模式"><a class="markdownIt-Anchor" href="#精确路径模式"></a> 精确路径模式</h2><p>如果是按照<url-pattern>/demo/aaa/bbb/ccc</url-pattern>写的话，则用户必须按照/demo/aaa/bbb/ccc的精确路径来访问。<br />注意：一个servlet可以由多个url-pattern来匹配。<br /><a name="VmnOv"></a></p><h2 id="通配符路径模式"><a class="markdownIt-Anchor" href="#通配符路径模式"></a> 通配符路径模式</h2><p>按照<url-pattern>/demo/<em></url-pattern>方式写，其中</em>代表通配符，只要满足/demo/…即可访问对应的servlet。<br /><a name="xSvZg"></a></p><h2 id="全路径模式"><a class="markdownIt-Anchor" href="#全路径模式"></a> 全路径模式</h2><p>按照<url-pattern>/*</url-pattern>（或者<url-pattern>/</url-pattern>）方式写，与通配符路径类似，任何请求都能获取servlet。<br />不过其中/*与/是有区别的：</p><ul><li>/*可以拦截所有请求，无论是动态还是静态。</li><li>/只会拦截静态请求，对于动态请求不会做出反应。<br /><a name="Lohyc"></a></li></ul><h2 id="后缀名模式"><a class="markdownIt-Anchor" href="#后缀名模式"></a> 后缀名模式</h2><p>按照<url-pattern>*.do</url-pattern>方式写，只要以.do结尾的都会被拦截。<br /><a name="9mkND"></a></p><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2><ol><li>后缀名模式不能与其他模式混合使用。</li><li>当四种请求路径可能被一个请求出发时，则按照优先级进行匹配对应的url-partten。（匹配原则：路径优先后缀匹配原则、精确路径优先匹配原则、最长路径优先匹配原则）。<br /><a name="7RhbK"></a></li></ol><h1 id="注册servlet"><a class="markdownIt-Anchor" href="#注册servlet"></a> 注册Servlet</h1><p>在web.xml注册Servlet代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet的名称（自己起的，不要重复）<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>Servlet的类路径（xx.xx.xx.xxservlet）<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servlet的名称（与上面的一样）<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/url名字（自己起的，不要重复，注意/，不能丢）<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p><a name="3d973"></a></p><h2 id="映射关系形成方法"><a class="markdownIt-Anchor" href="#映射关系形成方法"></a> 映射关系形成方法：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1582021090383-ec9ed025-b2ba-4287-a0be-66dfeb7c68d2.png#align=left&amp;display=inline&amp;height=253&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=395&amp;originWidth=886&amp;size=159155&amp;status=done&amp;style=none&amp;width=567" alt="image.png" /><br />第一个map是存放已被创建好的servlet实例引用，并且具有优先级被服务器提前创建<br />若第一个map中无法按照Url找到已被创建好的实例，则会到第二个map去找。<br />第二个map的key部分同样为uri，但是其value部分是web.xml中所有被写入的servlet-class全类名<br />，通过全类名和Url创建一个servlet实例，将其引用放到第一个map中。<br />注意：每个map中的url-pattern不能重复。<br /><a name="hp0jh"></a></p><h1 id="init获取配置信息"><a class="markdownIt-Anchor" href="#init获取配置信息"></a> init获取配置信息</h1><p>ServletConfig:代表当前Servlet在web.xml中的配置信息。其包含方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getServletName</span><span class="params">()</span>  -- 获取当前Servlet在web.xml中配置的名字</span></span><br><span class="line"><span class="function">String <span class="title">getInitParameter</span><span class="params">(String name)</span> -- 获取当前Servlet指定名称的初始化参数的值</span></span><br><span class="line"><span class="function">Enumeration <span class="title">getInitParameterNames</span><span class="params">()</span>  -- 获取当前Servlet所有初始化参数的名字组成的枚举</span></span><br><span class="line"><span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span>  -- 获取代表当前web应用的ServletContext对象</span></span><br></pre></td></tr></table></figure><p>getServletConfig方法又返回{@link ServletConfig}对象，该对象包含初始化此servlet的启动参数。返回的ServletConfig对象是传递给init方法的对象。这就是init获取配置信息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        System.out.println(<span class="string">&quot;config=&quot;</span> + config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="v3tUQ"></a></p><h1 id="自定义基本的genericservlet"><a class="markdownIt-Anchor" href="#自定义基本的genericservlet"></a> 自定义基本的GenericServlet</h1><p>Servlet是个接口类，显然不能独立完成业务，需要实现该接口类进行业务处理。<br /><a name="A0oUB"></a></p><h2 id="适配器模式的引入"><a class="markdownIt-Anchor" href="#适配器模式的引入"></a> 适配器模式的引入</h2><p>继承自Servlet接口就要实现四个方法，然而事实上并不需要service以外的那个三个方法频繁实现，这就要用到了适配器模式中的缺省适配器模式来减少代码冗杂，此外，即使要重写，在子类中也可以完成重写覆盖，不过不要忘记super。样例如下：<br /><a name="rEfY9"></a></p><h3 id="genericservlet"><a class="markdownIt-Anchor" href="#genericservlet"></a> GenericServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="toXju"></a></p><h3 id="servlet实现"><a class="markdownIt-Anchor" href="#servlet实现"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running Service&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GenericServlet（父类）定义了getServletInfo方法，如果要获取Config信息，在子类DemoServlet即可通过这个方法直接调用获取获取。但是如果要获取Config中的参数的话，则需要不停的通过手动get在ServletConfig中获取，从而也会造成大量的代码冗余。<br /><a name="wlpvT"></a></p><h2 id="继承优化"><a class="markdownIt-Anchor" href="#继承优化"></a> 继承优化</h2><p>为了解决上述问题，直接让GenericServlet继承自ServletConfig，从而在父类中就实现了get方法，在service中直接调用即可。<br /><a name="toBf5"></a></p><h3 id="genericservlet-2"><a class="markdownIt-Anchor" href="#genericservlet-2"></a> GenericServlet：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="PThZB"></a></p><h3 id="servlet实现-2"><a class="markdownIt-Anchor" href="#servlet实现-2"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running Service&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInitParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getServletContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="GSaEK"></a></p><h2 id="重写优化"><a class="markdownIt-Anchor" href="#重写优化"></a> 重写优化</h2><p>如果在Servlet实现中想要重写init这类方法，要时刻铭记加上super.init()来防止config未被初始化的问题发生，但是这个出错概率过高，因此要在父类中避免这种问题发生。<br /><a name="4eENh"></a></p><h3 id="genericservlet-3"><a class="markdownIt-Anchor" href="#genericservlet-3"></a> GenericServlet：</h3><p>为子类书写一个专门用于重写的方法，避免了发生错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="n3mqX"></a></p><h3 id="servlet实现-3"><a class="markdownIt-Anchor" href="#servlet实现-3"></a> Servlet实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Running Service&quot;</span>);</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.getInitParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.getServletContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---init is running---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="k8aHC"></a></p><h1 id="系统自带genericservlet"><a class="markdownIt-Anchor" href="#系统自带genericservlet"></a> 系统自带GenericServlet</h1><p>前面一通改良的自定义的GenericServlet，其实系统自带，路径：javax.servlet.GenericServlet。<br /><a name="sYrQ4"></a></p><h2 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>,</span></span><br><span class="line"><span class="class">        <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + message, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大抵与之前的自定义类相同，不过在自定义类之上还做出了优化，例如序列化等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;UFBPG&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;vNLr9&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是servlet&quot;</summary>
      
    
    
    
    <category term="Servlet" scheme="https://jie-blog.icu/categories/Servlet/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jie-blog.icu/posts/hexo_helloworld/"/>
    <id>https://jie-blog.icu/posts/hexo_helloworld/</id>
    <published>2020-08-31T12:59:48.903Z</published>
    <updated>2020-09-02T08:31:24.962Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Hexo搭建" scheme="https://jie-blog.icu/categories/Hexo%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo入门" scheme="https://jie-blog.icu/tags/Hexo%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
