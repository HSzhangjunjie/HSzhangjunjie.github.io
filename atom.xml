<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jieker&#39;s Blog</title>
  
  <subtitle>Jiker</subtitle>
  <link href="https://jie-blog.icu/atom.xml" rel="self"/>
  
  <link href="https://jie-blog.icu/"/>
  <updated>2020-09-13T10:19:38.760Z</updated>
  <id>https://jie-blog.icu/</id>
  
  <author>
    <name>Zhang Junjie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建WEB服务器（三）</title>
    <link href="https://jie-blog.icu/posts/io_web_3/"/>
    <id>https://jie-blog.icu/posts/io_web_3/</id>
    <published>2020-09-13T10:17:08.000Z</published>
    <updated>2020-09-13T10:19:38.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的web服务器三"><a class="markdownIt-Anchor" href="#简易的web服务器三"></a> 简易的WEB服务器（三）</h1><p><a name="svRNH"></a></p><h1 id="动态资源的获取"><a class="markdownIt-Anchor" href="#动态资源的获取"></a> 动态资源的获取</h1><p>因为TimeServlet无法直接调用，所以获得相应的路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> connector.ConnectorUtils;</span><br><span class="line"><span class="keyword">import</span> connector.Request;</span><br><span class="line"><span class="keyword">import</span> connector.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备好URLClassLoader</span></span><br><span class="line"></span><br><span class="line">    <span class="function">URLClassLoader <span class="title">getServletLoader</span><span class="params">()</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        File webRoot = <span class="keyword">new</span> File(ConnectorUtils.WEB_ROOT);</span><br><span class="line">        URL webRootUrl = webRoot.toURI().toURL();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;webRootUrl&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Servlet <span class="title">getServlet</span><span class="params">(URLClassLoader loader, Request request)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         /servlet/TimeServlet</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String uri = request.getRequestUri();</span><br><span class="line">        String servletName = uri.substring(uri.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Class servletClass = loader.loadClass(servletName);</span><br><span class="line">        Servlet servlet = (Servlet) servletClass.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="keyword">return</span> servlet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URLClassLoader loader = getServletLoader();</span><br><span class="line">            Servlet servlet = getServlet(loader, request);</span><br><span class="line">            servlet.service(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="TgJKr"></a></p><h1 id="测试servletprocessor"><a class="markdownIt-Anchor" href="#测试servletprocessor"></a> 测试ServletProcessor</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> test.util.TestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 15:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletProcessorTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVLET_REQUEST=<span class="string">&quot;GET /servlet/TimeServlet HTTP/1.1&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenServletRequest_thenLoadServlet</span><span class="params">()</span> <span class="keyword">throws</span> MalformedURLException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Request request= TestUtils.createRequest(SERVLET_REQUEST);</span><br><span class="line">        ServletProcessor processor=<span class="keyword">new</span> ServletProcessor();</span><br><span class="line">        URLClassLoader loader=processor.getServletLoader();</span><br><span class="line">        Servlet servlet=processor.getServlet(loader,request);</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;webroot.TimeServlet&quot;</span>,servlet.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="NfPXh"></a></p><h1 id="使用facade模式"><a class="markdownIt-Anchor" href="#使用facade模式"></a> 使用facade模式</h1><p>示例中这个代码明显出现问题，既涉及到服务器的开发也涉及到Servlet的开发，现实中这两个开发应属于不同群体。所以我们要保证服务器的开发不会被Servlet的人员过分利用，例如如下情况：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574847588642-93711a4f-1345-44f3-ab4b-495fe1178120.png#align=left&amp;display=inline&amp;height=511&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=511&amp;originWidth=1341&amp;size=84670&amp;status=done&amp;style=none&amp;width=1341" alt="image.png" /><br />这种情况很危险，Servlet的人员可以肆意调用函数。<br />为了防止这种问题发生，我们需要应用Facade模式。<br />首先需要写如下两个函数<br /><a name="XBpuC"></a></p><h2 id="responsefacade"><a class="markdownIt-Anchor" href="#responsefacade"></a> ResponseFacade</h2><p>把ServletResponse放置在ResponseFacade中就可以有效防止这种非法转型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseFacade</span> <span class="keyword">implements</span> <span class="title">ServletResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletResponse response = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseFacade</span><span class="params">(Response response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCharacterEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.getCharacterEncoding();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.getContentType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.getOutputStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.getWriter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        response.setContentLength(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">        response.setContentLengthLong(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        response.setContentType(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBufferSize</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        response.setBufferSize(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBufferSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.getBufferSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flushBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.flushBuffer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        response.resetBuffer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCommitted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.isCommitted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        response.reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line">        response.setLocale(locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">getLocale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.getLocale();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="56LSk"></a></p><h2 id="requestfacade"><a class="markdownIt-Anchor" href="#requestfacade"></a> RequestFacade</h2><p>同理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFacade</span> <span class="keyword">implements</span> <span class="title">ServletRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServletRequest request = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestFacade</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getAttribute(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getAttributeNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getAttributeNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCharacterEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getCharacterEncoding();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String s)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getContentLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getContentLengthLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getContentLengthLong();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getContentType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getInputStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameter(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String s) &#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameterValues(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getProtocol();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getScheme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getScheme();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServerName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getServerName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getServerPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getServerPort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getReader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRemoteAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getRemoteAddr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRemoteHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getRemoteHost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String s, Object o)</span> </span>&#123;</span><br><span class="line">        request.setAttribute(s,o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        request.removeAttribute(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">getLocale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getLocale();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;Locale&gt; <span class="title">getLocales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getLocales();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSecure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.isSecure();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getRequestDispatcher(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRealPath</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getRealPath(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRemotePort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getRemotePort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocalName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getLocalName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLocalAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getLocalAddr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLocalPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getLocalPort();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncContext <span class="title">startAsync</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.startAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncContext <span class="title">startAsync</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.startAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAsyncStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.isAsyncStarted();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAsyncSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.isAsyncSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AsyncContext <span class="title">getAsyncContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getAsyncContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DispatcherType <span class="title">getDispatcherType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getDispatcherType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="k0gk8"></a></p><h2 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h2><p>修改Processor代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        URLClassLoader loader = getServletLoader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Servlet servlet = getServlet(loader, request);</span><br><span class="line">            RequestFacade requestFacade=<span class="keyword">new</span> RequestFacade(request);</span><br><span class="line">            ResponseFacade responseFacade=<span class="keyword">new</span> ResponseFacade(response);</span><br><span class="line">            servlet.service(requestFacade, responseFacade);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="cgeov"></a></p><h1 id="动态资源支持的实现"><a class="markdownIt-Anchor" href="#动态资源支持的实现"></a> 动态资源支持的实现</h1><p><a name="ySlwb"></a></p><h2 id="首先修改connector的代码"><a class="markdownIt-Anchor" href="#首先修改connector的代码"></a> 首先修改Connector的代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server=<span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，监听端口【&quot;</span>+port+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket socket=server.accept();</span><br><span class="line">                InputStream input=socket.getInputStream();</span><br><span class="line">                OutputStream output=socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">                Request request=<span class="keyword">new</span> Request(input);</span><br><span class="line">                request.parse();</span><br><span class="line">                Response response=<span class="keyword">new</span> Response(output);</span><br><span class="line">                response.setRequest(request);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (request.getRequestUri().startsWith(<span class="string">&quot;/servlet/&quot;</span>))&#123;</span><br><span class="line">                    ServletProcessor processor=<span class="keyword">new</span> ServletProcessor();</span><br><span class="line">                    processor.process(request,response);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    StaticProcessor processor = <span class="keyword">new</span> StaticProcessor();</span><br><span class="line">                    processor.process(request, response);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                shutDown(socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="XV6uT"></a></p><h2 id="更改testclient类"><a class="markdownIt-Anchor" href="#更改testclient类"></a> 更改TestClient类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket=<span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">            OutputStream outputStream=socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">&quot;GET /servlet/TimeServlet HTTP/1.1&quot;</span>.getBytes());</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            InputStream inputStream=socket.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="keyword">int</span> length=inputStream.read(buffer);</span><br><span class="line">            StringBuilder response=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)&#123;</span><br><span class="line">                <span class="keyword">char</span> a=(<span class="keyword">char</span>)buffer[j];</span><br><span class="line">                response.append(a);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(response.toString());</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line"></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException i) &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="IZeHF"></a></p><h2 id="结果显示如下"><a class="markdownIt-Anchor" href="#结果显示如下"></a> 结果显示如下：</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574853100198-f825c84b-afb6-4a24-b90b-9ac7d1f83805.png#align=left&amp;display=inline&amp;height=213&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=213&amp;originWidth=766&amp;size=38890&amp;status=done&amp;style=none&amp;width=766" alt="image.png" /><br /><a name="AML8z"></a></p><h1 id="使用nio模型重写"><a class="markdownIt-Anchor" href="#使用nio模型重写"></a> 使用NIO模型重写</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> processor.ServletProcessor;</span><br><span class="line"><span class="keyword">import</span> processor.StaticProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioConnector</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">(Closeable... closeables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut : closeables) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NioConnector</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NioConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            server.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line">            selector=Selector.open();</span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">            System.out.println(<span class="string">&quot;启动服务器，监听端口[&quot;</span>+port+<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                selector.select();</span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys=selector.selectedKeys();</span><br><span class="line">                <span class="keyword">for</span> (SelectionKey key:selectionKeys)&#123;</span><br><span class="line">                    handles(key);</span><br><span class="line">                &#125;</span><br><span class="line">                selectionKeys.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            shutDown(selector,server);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handles</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ACCEPT</span></span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class="line">            SocketChannel client = server.accept();</span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable())&#123;</span><br><span class="line">            SocketChannel client= (SocketChannel) key.channel();</span><br><span class="line">            key.cancel();</span><br><span class="line">            client.configureBlocking(<span class="keyword">true</span>);</span><br><span class="line">            Socket clientSocket=client.socket();</span><br><span class="line">            InputStream inputStream=clientSocket.getInputStream();</span><br><span class="line">            OutputStream outputStream=clientSocket.getOutputStream();</span><br><span class="line">            </span><br><span class="line">            Request request=<span class="keyword">new</span> Request(inputStream);</span><br><span class="line">            request.parse();</span><br><span class="line">            </span><br><span class="line">            Response response=<span class="keyword">new</span> Response(outputStream);</span><br><span class="line">            response.setRequest(request);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (request.getRequestUri().startsWith(<span class="string">&quot;/servlet/&quot;</span>))&#123;</span><br><span class="line">                ServletProcessor processor=<span class="keyword">new</span> ServletProcessor();</span><br><span class="line">                processor.process(request,response);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                StaticProcessor processor=<span class="keyword">new</span> StaticProcessor();</span><br><span class="line">                processor.process(request,response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="DgD8n"></a></p><h1 id="测试重写"><a class="markdownIt-Anchor" href="#测试重写"></a> 测试重写</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574854984056-cdcae5d3-ec8d-49e3-ad4c-a779874ee1a4.png#align=left&amp;display=inline&amp;height=146&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=146&amp;originWidth=494&amp;size=17247&amp;status=done&amp;style=none&amp;width=494" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简易的web服务器三&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简易的web服务器三&quot;&gt;&lt;/a&gt; 简易的WEB服务器（三）&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;svRNH&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;动态资源的获取&quot;&gt;&lt;a c</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>搭建WEB服务器（二）</title>
    <link href="https://jie-blog.icu/posts/io_web_2/"/>
    <id>https://jie-blog.icu/posts/io_web_2/</id>
    <published>2020-09-13T10:15:20.000Z</published>
    <updated>2020-09-13T10:19:37.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的web服务器二"><a class="markdownIt-Anchor" href="#简易的web服务器二"></a> 简易的WEB服务器（二）</h1><p><a name="dOh8q"></a></p><h1 id="实现response"><a class="markdownIt-Anchor" href="#实现response"></a> 实现Response</h1><p>对回复的抽象处理<br /><a name="zxP2S"></a></p><h2 id="实现connectorutils"><a class="markdownIt-Anchor" href="#实现connectorutils"></a> 实现ConnectorUtils</h2><p>获取资源主目录对应的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 12:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectorUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEB_ROOT =</span><br><span class="line">            System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + File.separator + <span class="string">&quot;webroot&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROTOCOL = <span class="string">&quot;HTTP/1.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CARRIAGE = <span class="string">&quot;\r&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEWLINE = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPACE = <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">renderStatus</span><span class="params">(HttpStatus status)</span></span>&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder(PROTOCOL)</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(status.getStatusCode())</span><br><span class="line">                .append(SPACE)</span><br><span class="line">                .append(status.getReason())</span><br><span class="line">                .append(CARRIAGE).append(NEWLINE)</span><br><span class="line">                .append(CARRIAGE).append(NEWLINE);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="zqhBA"></a></p><h2 id="实现httpstatus"><a class="markdownIt-Anchor" href="#实现httpstatus"></a> 实现HttpStatus</h2><p>获取网络状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 13:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  HttpStatus &#123;</span><br><span class="line">    SC_OK(<span class="number">200</span>,<span class="string">&quot;OK&quot;</span>),</span><br><span class="line">    SC_NOT_FOUND(<span class="number">404</span>,<span class="string">&quot;File Not Found&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line">    <span class="keyword">private</span> String reason;</span><br><span class="line"></span><br><span class="line">    HttpStatus(<span class="keyword">int</span> Code,String reason)&#123;</span><br><span class="line">        <span class="keyword">this</span>.statusCode=Code;</span><br><span class="line">        <span class="keyword">this</span>.reason=reason;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getReason</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reason;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="GTqvG"></a></p><h2 id="实现response-2"><a class="markdownIt-Anchor" href="#实现response-2"></a> 实现Response</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:HTTP/1.1 200 OK</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 12:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    Request request;</span><br><span class="line">    OutputStream output;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Response</span><span class="params">(OutputStream output)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendStaticResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(ConnectorUtils.WEB_ROOT, request.getRequestUri());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            write(file, HttpStatus.SC_OK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            write(<span class="keyword">new</span> File(ConnectorUtils.WEB_ROOT, <span class="string">&quot;404.html&quot;</span>), HttpStatus.SC_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(File resource, HttpStatus status)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream input = <span class="keyword">new</span> FileInputStream(resource)) &#123;</span><br><span class="line">            output.write(ConnectorUtils.renderStatus(status).getBytes());</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">            <span class="keyword">int</span> lenth = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((lenth = input.read(buffer, <span class="number">0</span>, BUFFER_SIZE)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                output.write(buffer, <span class="number">0</span>, lenth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="M8zhb"></a></p><h1 id="response测试"><a class="markdownIt-Anchor" href="#response测试"></a> Response测试</h1><p><a name="QbxtI"></a></p><h2 id="testutils"><a class="markdownIt-Anchor" href="#testutils"></a> TestUtils</h2><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> connector.Request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 13:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Request <span class="title">createRequest</span><span class="params">(String requestString)</span></span>&#123;</span><br><span class="line">        InputStream input=<span class="keyword">new</span> ByteArrayInputStream(requestString.getBytes());</span><br><span class="line">        Request request=<span class="keyword">new</span> Request(input);</span><br><span class="line">        request.parse();</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readFileToString</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Files.readAllBytes(Paths.get(filename)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="BVPSA"></a></p><h2 id="responsetest"><a class="markdownIt-Anchor" href="#responsetest"></a> ResponseTest</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> connector.ConnectorUtils;</span><br><span class="line"><span class="keyword">import</span> connector.Request;</span><br><span class="line"><span class="keyword">import</span> connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> test.util.TestUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 13:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VAliD_REQUEST = <span class="string">&quot;GET /index.html HTTP/1.1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVAliD_REQUEST = <span class="string">&quot;GET /notfound.html HTTP/1.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STATUS200 = <span class="string">&quot;HTTP/1.1 200 OK\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STATUS404 = <span class="string">&quot;HTTP/1.1 404 File Not Found\r\n\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenValidRequest_thenReturnStaticResource</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = TestUtils.createRequest(VAliD_REQUEST);</span><br><span class="line">        ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        Response response = <span class="keyword">new</span> Response(outputStream);</span><br><span class="line">        response.setRequest(request);</span><br><span class="line">        response.sendStaticResource();</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(</span><br><span class="line">                (STATUS200 + TestUtils.readFileToString(ConnectorUtils.WEB_ROOT + request.getRequestUri())),</span><br><span class="line">                outputStream.toString()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenInvalidRequest_thenReturnError</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Request request = TestUtils.createRequest(INVAliD_REQUEST);</span><br><span class="line">        ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        Response response = <span class="keyword">new</span> Response(outputStream);</span><br><span class="line">        response.setRequest(request);</span><br><span class="line">        response.sendStaticResource();</span><br><span class="line">        String resource=TestUtils.readFileToString(ConnectorUtils.WEB_ROOT +<span class="string">&quot;/404.html&quot;</span>);</span><br><span class="line">        Assertions.assertEquals(</span><br><span class="line">                (STATUS404 + resource),</span><br><span class="line">                outputStream.toString()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="j3HTZ"></a></p><h1 id="实现connector和processor"><a class="markdownIt-Anchor" href="#实现connector和processor"></a> 实现Connector和Processor</h1><p><a name="REo91"></a></p><h2 id="processor"><a class="markdownIt-Anchor" href="#processor"></a> Processor</h2><p>处理用户发送的请求，把请求对应的Response准备好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> processor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> connector.Request;</span><br><span class="line"><span class="keyword">import</span> connector.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 14:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Request request, Response response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.sendStaticResource();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="SqlxX"></a></p><h2 id="connector"><a class="markdownIt-Anchor" href="#connector"></a> Connector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> processor.ServletProcessor;</span><br><span class="line"><span class="keyword">import</span> processor.StaticProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Connector</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT=<span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocket server;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>  port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">(Closeable...closeables)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut:closeables)&#123;</span><br><span class="line">                <span class="keyword">if</span> (shut!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port=port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server=<span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，监听端口【&quot;</span>+port+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket socket=server.accept();</span><br><span class="line">                InputStream input=socket.getInputStream();</span><br><span class="line">                OutputStream output=socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">                Request request=<span class="keyword">new</span> Request(input);</span><br><span class="line">                request.parse();</span><br><span class="line">                Response response=<span class="keyword">new</span> Response(output);</span><br><span class="line">                response.setRequest(request);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (request.getRequestUri().startsWith(<span class="string">&quot;/servlet/&quot;</span>))&#123;</span><br><span class="line">                    ServletProcessor processor=<span class="keyword">new</span> ServletProcessor();</span><br><span class="line">                    processor.process(request,response);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    StaticProcessor processor = <span class="keyword">new</span> StaticProcessor();</span><br><span class="line">                    processor.process(request, response);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                shutDown(socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="XLQrQ"></a></p><h2 id="服务器主函数bootstrap"><a class="markdownIt-Anchor" href="#服务器主函数bootstrap"></a> 服务器主函数Bootstrap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> connector.Connector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 14:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connector connector=<span class="keyword">new</span> Connector();</span><br><span class="line">        connector.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="K0pMg"></a></p><h1 id="测试服务器"><a class="markdownIt-Anchor" href="#测试服务器"></a> 测试服务器</h1><p><a name="4tzHN"></a></p><h2 id="启动客户端"><a class="markdownIt-Anchor" href="#启动客户端"></a> 启动客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/26 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket=<span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">            OutputStream outputStream=socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">&quot;GET /index.html HTTP/1.1&quot;</span>.getBytes());</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            InputStream inputStream=socket.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="keyword">int</span> length=inputStream.read(buffer);</span><br><span class="line">            StringBuilder response=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)&#123;</span><br><span class="line">                response.append((<span class="keyword">char</span>)buffer[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(response.toString());</span><br><span class="line">            socket.shutdownInput();</span><br><span class="line">            </span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="kDD46"></a></p><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574750876207-63477f1e-f987-428b-89a7-afeb04f0e6b8.png#align=left&amp;display=inline&amp;height=463&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=463&amp;originWidth=867&amp;size=27388&amp;status=done&amp;style=none&amp;width=867" alt="image.png" /><br /><a name="lc3BL"></a></p><h2 id="效果查看"><a class="markdownIt-Anchor" href="#效果查看"></a> 效果查看</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574751003508-751ce4d9-4c7a-4d20-97e1-45a6dfa1d88a.png#align=left&amp;display=inline&amp;height=456&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=456&amp;originWidth=708&amp;size=204509&amp;status=done&amp;style=none&amp;width=708" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574751023681-12372fc7-0f94-4bd9-90cd-26e19bfe0d18.png#align=left&amp;display=inline&amp;height=326&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=243&amp;originWidth=414&amp;size=15162&amp;status=done&amp;style=none&amp;width=556" alt="image.png" /><br /><a name="0A2U0"></a></p><h1 id="实现servletrequest和servletresponse"><a class="markdownIt-Anchor" href="#实现servletrequest和servletresponse"></a> 实现ServletRequest和ServletResponse</h1><p>如图使Request继承ServletRequest接口和重写所有方法。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574752794822-1957d711-5893-4d3b-a2b2-d5c1bc1c375a.png#align=left&amp;display=inline&amp;height=563&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=563&amp;originWidth=935&amp;size=86051&amp;status=done&amp;style=none&amp;width=935" alt="image.png" />同理，对Response做出同样的修改继承自ServletResponse。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574752908505-ed1d0d08-fef3-4bee-b45d-6dd0ca5462c7.png#align=left&amp;display=inline&amp;height=590&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=590&amp;originWidth=899&amp;size=65300&amp;status=done&amp;style=none&amp;width=899" alt="image.png" /><br />其中，大部分函数都仅仅用默认修改即可，不过要对Response中的getWriter进行改写，方便动态资源写入进行便捷：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//自动Flush</span></span><br><span class="line">        PrintWriter writer=<span class="keyword">new</span> PrintWriter(output,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> writer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="Cw9Db"></a></p><h1 id="实现servlet"><a class="markdownIt-Anchor" href="#实现servlet"></a> 实现Servlet</h1><p>动态资源的Servlet<br /><code>public class TimeServlet implements Servlet</code><br />主要的Service函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer=servletResponse.getWriter();</span><br><span class="line">        writer.println(ConnectorUtils.renderStatus(HttpStatus.SC_OK));</span><br><span class="line">        writer.println(<span class="string">&quot;what time is it now?&quot;</span>);</span><br><span class="line">        writer.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简易的web服务器二&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简易的web服务器二&quot;&gt;&lt;/a&gt; 简易的WEB服务器（二）&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;dOh8q&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;实现response&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>搭建WEB服务器（一）</title>
    <link href="https://jie-blog.icu/posts/io_web_1/"/>
    <id>https://jie-blog.icu/posts/io_web_1/</id>
    <published>2020-09-13T10:13:52.000Z</published>
    <updated>2020-09-13T10:19:33.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简易的web服务器一"><a class="markdownIt-Anchor" href="#简易的web服务器一"></a> 简易的WEB服务器（一）</h1><p>因为内容复杂繁多，预计分三次完成<br /><a name="h3vwi"></a></p><h1 id="回顾聊天室应用"><a class="markdownIt-Anchor" href="#回顾聊天室应用"></a> 回顾聊天室应用</h1><p>拥有一个服务器端用来收到客户端的消息并实现业务逻辑、一个客户端发送消息<br />注意，这里并没有使用任何应用层面的协议，只简单的发送转发等，没有添加额外内容。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574684831394-7f84b754-c98c-49c8-a482-56291a520f4a.png#align=left&amp;display=inline&amp;height=173&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=345&amp;originWidth=1014&amp;size=150561&amp;status=done&amp;style=none&amp;width=507" alt="image.png" /><br />不过，显示上在发送消息过程中只是这么简单的转发发送消息是远远不够的，如果BUFFER尺寸不够大，消息残缺也不会报错，我们需要能确保消息发送完整等等特别的应用层协议。<br /><a name="MbIEt"></a></p><h1 id="网络应用"><a class="markdownIt-Anchor" href="#网络应用"></a> 网络应用</h1><p>除了聊天室应用我们还需要知道一些其他应用广泛的应用——网络应用<br />同样，网络应用也是只是需要一个客户端和一个服务器端进行收发消息的操作。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574685158133-82b75248-059f-48d1-b172-d9f8c6d32fc4.png#align=left&amp;display=inline&amp;height=181&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=361&amp;originWidth=1027&amp;size=148855&amp;status=done&amp;style=none&amp;width=513.5" alt="image.png" /><br />其中请求及分为两大类：静态资源和动态资源。<br /><a name="mr9xE"></a></p><h2 id="静态资源"><a class="markdownIt-Anchor" href="#静态资源"></a> 静态资源</h2><p><a name="J3Hd2"></a></p><h3 id="它拥有如下几个特点"><a class="markdownIt-Anchor" href="#它拥有如下几个特点"></a> 它拥有如下几个特点：</h3><ul><li>不因请求的次数或顺序而变化</li><li>HTML、CSS、GIF、PNG</li><li>服务器直接通过路径获取静态资源<br /><a name="PJyv6"></a></li></ul><h3 id="请求静态资源"><a class="markdownIt-Anchor" href="#请求静态资源"></a> 请求静态资源</h3><p>客户端请求资源，服务器在获取请求以后会根据相应路径获取资源然后响应给客户端。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574685414171-f1c1769b-8bc8-420e-ae3a-58a589a65245.png#align=left&amp;display=inline&amp;height=152&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=304&amp;originWidth=1196&amp;size=201807&amp;status=done&amp;style=none&amp;width=598" alt="image.png" /><br /><a name="Jz8i5"></a></p><h2 id="动态资源"><a class="markdownIt-Anchor" href="#动态资源"></a> 动态资源</h2><p>如果只有静态资源网络会变得无趣，网络中需要一些比如随时间等变量变化变化的资源<br /><a name="gzNzF"></a></p><h3 id="它有如下几个特点"><a class="markdownIt-Anchor" href="#它有如下几个特点"></a> 它有如下几个特点：</h3><ul><li>随着请求方/发起时间/请求内容等因素而变化</li><li>目前的商品库存量</li><li>服务器通过容器获取动态资源<br /><a name="dqzpv"></a></li></ul><h3 id="请求动态资源"><a class="markdownIt-Anchor" href="#请求动态资源"></a> 请求动态资源</h3><p>客户端请求资源，服务器会请求容器，容器又会通过Servlet来获取动态资源，然后逐步返回最后响应客户端。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574685726760-01d3f959-1499-4a22-acf5-d51081d8dbcc.png#align=left&amp;display=inline&amp;height=277&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=554&amp;originWidth=1189&amp;size=257858&amp;status=done&amp;style=none&amp;width=594.5" alt="image.png" /><br /><a name="AN7CC"></a></p><h1 id="tomcat结构"><a class="markdownIt-Anchor" href="#tomcat结构"></a> Tomcat结构</h1><p>Tomcat是一个开源的网络服务器，它支持开发人员编译自己的Servlet发送到服务器中，概要结构如图：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574685868829-584c603f-f65f-455f-b05b-6da5a934faa7.png#align=left&amp;display=inline&amp;height=296&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=591&amp;originWidth=1048&amp;size=217525&amp;status=done&amp;style=none&amp;width=524" alt="image.png" /><br /><a name="M0pCZ"></a></p><h2 id="接下来解析一下基本结构"><a class="markdownIt-Anchor" href="#接下来解析一下基本结构"></a> 接下来解析一下基本结构。</h2><p>由图注意到在最里面才包裹着Servlet，在外面一层一层的包裹有什么用呢？+<br /><a name="8TZkk"></a></p><h2 id="server"><a class="markdownIt-Anchor" href="#server"></a> Server：</h2><p><a name="MJt4z"></a></p><h3 id="拥有以下几个特点"><a class="markdownIt-Anchor" href="#拥有以下几个特点"></a> 拥有以下几个特点：</h3><ul><li>Tomcat服务器最顶层的组件</li><li>负责运行Tomcat服务器</li><li>负责加载服务器资源和环境变量<br /><a name="7oS7W"></a></li></ul><h2 id="service"><a class="markdownIt-Anchor" href="#service"></a> Service：</h2><p><a name="hZxyZ"></a></p><h3 id="拥有如下几个特点"><a class="markdownIt-Anchor" href="#拥有如下几个特点"></a> 拥有如下几个特点：</h3><ul><li>集合Connector和Engine的抽象组件（盒子）</li><li>一个Server可以包含多个Service</li><li>一个Service可以包含多个Connector和Engine<br /><a name="PHjgI"></a></li></ul><h2 id="connector和processor"><a class="markdownIt-Anchor" href="#connector和processor"></a> Connector和Processor：</h2><p>它主要负责提供给服务器的客户一个可以和服务器创建连接的端点，它负责接收请求，负责把相应递交给服务器，它也可以根据请求做出基本的解析来判断下一步如何操作，但它不做具体操作，它会把请求传递给Processor，Processor再把资源传递给Engine。<br /><a name="DOsAi"></a></p><h3 id="概括一下"><a class="markdownIt-Anchor" href="#概括一下"></a> 概括一下：</h3><p>Connector负责和外界链接建立和请求和响应发送。<br />Processor负责从Connector接收到请求。<br /><a name="klxGY"></a></p><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h4><ul><li>Connector提供基于不同特定协议的实现</li><li>Connector接受解析请求，返回响应</li><li>经Processor派遣请求至Engine进行处理<br /><a name="W8HoL"></a></li></ul><h2 id="engine"><a class="markdownIt-Anchor" href="#engine"></a> Engine：</h2><p>这里和以后的每一层都被称为容器<br /><a name="LluD7"></a></p><h3 id="拥有特点如下"><a class="markdownIt-Anchor" href="#拥有特点如下"></a> 拥有特点如下：</h3><ul><li>容器时Tomcat用来处理请求的组件</li><li>容器内部的组件按照层级排列</li><li>Engine是容器的顶层组件<br /><br /><a name="HRLhu"></a></li></ul><h2 id="host"><a class="markdownIt-Anchor" href="#host"></a> Host：</h2><p>即虚拟主机<br /><a name="oUc1T"></a></p><h3 id="拥有特点如下-2"><a class="markdownIt-Anchor" href="#拥有特点如下-2"></a> 拥有特点如下：</h3><ul><li>Host代表一个虚拟主机</li><li>一个Engine可以支持对多个虚拟主机的请求</li><li>Engine通过解析请求来决定将请求发送给哪一个Host<br /><a name="ZH4u1"></a></li></ul><h2 id="context"><a class="markdownIt-Anchor" href="#context"></a> Context：</h2><p>最复杂的组件<br /><a name="kPxVm"></a></p><h3 id="拥有特点如下-3"><a class="markdownIt-Anchor" href="#拥有特点如下-3"></a> 拥有特点如下：</h3><ul><li>Context代表一个Web Application</li><li>Tomcat最复杂的组件之一</li><li>应用资源管理，应用类加载，Servlet管理，安全管理<br /><a name="qyqCU"></a></li></ul><h2 id="wrapper"><a class="markdownIt-Anchor" href="#wrapper"></a> Wrapper：</h2><p><a name="HYMMr"></a></p><h3 id="拥有特点如下-4"><a class="markdownIt-Anchor" href="#拥有特点如下-4"></a> 拥有特点如下：</h3><ul><li>Wrapper是容器最底层的组件</li><li>包裹住Servlet实例</li><li>负责管理Servlet实例的生命周期<br /><a name="Ztwv6"></a></li></ul><h1 id="精简版的服务器设计"><a class="markdownIt-Anchor" href="#精简版的服务器设计"></a> 精简版的服务器设计</h1><p>省略掉Engine、Host、Context、Wrapper<br /><a name="hWgHx"></a></p><h1 id="实现request"><a class="markdownIt-Anchor" href="#实现request"></a> 实现Request</h1><p>抽象出需要操作的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和Socket对应的InputStream，通过这里真正的读到quest</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> InputStream input;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的资源名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(InputStream input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.input = input;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestUri</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            length = input.read(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder request = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            request.append((<span class="keyword">char</span>) buffer[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进一步解析</span></span><br><span class="line">        uri = parseUri(request.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">parseUri</span><span class="params">(String request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index1, index2;</span><br><span class="line">        index1 = request.indexOf(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index1 != -<span class="number">1</span>) &#123;</span><br><span class="line">            index2 = request.indexOf(<span class="string">&quot; &quot;</span>, index1 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (index2 != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> request.substring(index1 + <span class="number">1</span>, index2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="7k8Hw"></a></p><h1 id="测试request"><a class="markdownIt-Anchor" href="#测试request"></a> 测试Request</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test.connector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VALID_REQUEST=<span class="string">&quot;GET /index.html HTTP/1.1&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenValidRequestThenExtrackUri</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InputStream input=<span class="keyword">new</span> ByteArrayInputStream(VALID_REQUEST.getBytes());</span><br><span class="line">        Request request=<span class="keyword">new</span> Request(input);</span><br><span class="line">        request.parse();</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(<span class="string">&quot;/index.html&quot;</span>,request.getRequestUri());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574689721049-1f140c15-4d7a-42da-afd5-1ff419546b8a.png#align=left&amp;display=inline&amp;height=85&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=111&amp;originWidth=600&amp;size=12616&amp;status=done&amp;style=none&amp;width=462" alt="image.png" /><br /><br /><br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简易的web服务器一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简易的web服务器一&quot;&gt;&lt;/a&gt; 简易的WEB服务器（一）&lt;/h1&gt;
&lt;p&gt;因为内容复杂繁多，预计分三次完成&lt;br /&gt;
&lt;a name=&quot;h3vwi&quot;&gt;&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>AIO&amp;&amp;BIO&amp;&amp;NIO阶段性总结</title>
    <link href="https://jie-blog.icu/posts/aio_bio_nio/"/>
    <id>https://jie-blog.icu/posts/aio_bio_nio/</id>
    <published>2020-09-13T10:12:31.000Z</published>
    <updated>2020-09-13T10:13:25.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阶段性总结"><a class="markdownIt-Anchor" href="#阶段性总结"></a> 阶段性总结</h1><p><a name="p3kcO"></a></p><h1 id="bio聊天室"><a class="markdownIt-Anchor" href="#bio聊天室"></a> BIO聊天室</h1><p><a name="rpRRQ"></a></p><h2 id="不使用线程池"><a class="markdownIt-Anchor" href="#不使用线程池"></a> 不使用线程池</h2><p>每个线程都对应着一个连接，随着客户端的增多，线程会增多很多，资源浪费也会大量增加，最后耗尽系统资源，服务器崩溃。<br /><a name="BUd0E"></a></p><h2 id="使用线程池"><a class="markdownIt-Anchor" href="#使用线程池"></a> 使用线程池</h2><p>使用线程池后，会固定线程的数量，从而从根本上减少了浪费。<br /><a name="vKvtL"></a></p><h1 id="nio聊天室"><a class="markdownIt-Anchor" href="#nio聊天室"></a> NIO聊天室</h1><p>不会为每一个连接都创建一个线程池了，自然性能会大幅提高。<br /><a name="tf4IA"></a></p><h1 id="aio聊天室"><a class="markdownIt-Anchor" href="#aio聊天室"></a> AIO聊天室</h1><p>线程比NIO要多，因为NIO各个类的内部都有线程池，而AIO内部实现里应用了更多线程<br /><a name="fjtEs"></a></p><h1 id="三种io模型适应状态"><a class="markdownIt-Anchor" href="#三种io模型适应状态"></a> 三种IO模型适应状态</h1><p><a name="mvYHk"></a></p><h2 id="bio"><a class="markdownIt-Anchor" href="#bio"></a> BIO</h2><p>连接数目少，服务器资源多，开发难度低<br /><a name="VSMyf"></a></p><h2 id="nio"><a class="markdownIt-Anchor" href="#nio"></a> NIO</h2><p>连接数目多，连接时间短，开发难度高<br /><a name="DmRpv"></a></p><h2 id="aio"><a class="markdownIt-Anchor" href="#aio"></a> AIO</h2><p>连接数目多，连接时间长，开发难度高<br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阶段性总结&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#阶段性总结&quot;&gt;&lt;/a&gt; 阶段性总结&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;p3kcO&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;bio聊天室&quot;&gt;&lt;a class=&quot;markdownIt-A</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>基于AIO改写多人聊天室</title>
    <link href="https://jie-blog.icu/posts/aio_2/"/>
    <id>https://jie-blog.icu/posts/aio_2/</id>
    <published>2020-09-13T10:11:03.000Z</published>
    <updated>2020-09-13T10:15:43.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于aio改写多人聊天室"><a class="markdownIt-Anchor" href="#基于aio改写多人聊天室"></a> 基于AIO改写多人聊天室</h1><p><a name="ecLJt"></a></p><h1 id="aio编程模型梳理"><a class="markdownIt-Anchor" href="#aio编程模型梳理"></a> AIO编程模型梳理</h1><p>回忆上一篇文章的AIO模型，这里做一些大概梳理。<br />首先在服务器端创建一部服务器通道，绑定监听端口<br />这里使用的AsynchronousServerSocketChannel 他其实属于一个通道群（AsynchronousChannelGroups），而这个通道群代表着一组可以被多个一部通道共享的资源群组。通过这个通道群来调用handler 。<br />当我们不做额外设定时候，系统会使用默认的通道群。<br />异步如何实现？<br />创建一个handler ，然后通过行为调用handler 来处理行为。<br />具体物理逻辑见上一篇文章<br /><a name="qA7Qe"></a></p><h1 id="服务器创建"><a class="markdownIt-Anchor" href="#服务器创建"></a> 服务器创建</h1><p><a name="DSfIc"></a></p><h2 id="chatserver"><a class="markdownIt-Anchor" href="#chatserver"></a> chatServer:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo5.aio.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousChannelGroup;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCALHOST = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT = <span class="string">&quot;quit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADPOOL_SIZE = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AsynchronousServerSocketChannel serverSocketChannel;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousChannelGroup channelGroup;</span><br><span class="line">    <span class="keyword">private</span> Charset charset = StandardCharsets.UTF_8;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ClientHandler&gt; connectedClients;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">(Closeable... closeables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut : closeables) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readyToQuit</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">(<span class="keyword">int</span> port, String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        connectedClients = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_PORT, LOCALHOST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ExecutorService pool = Executors.newFixedThreadPool(THREADPOOL_SIZE);</span><br><span class="line">            channelGroup = AsynchronousChannelGroup.withThreadPool(pool);</span><br><span class="line">            serverSocketChannel = AsynchronousServerSocketChannel.open(channelGroup);</span><br><span class="line">            serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(host, port));</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，监听端口[&quot;</span> + serverSocketChannel.getLocalAddress() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                serverSocketChannel.accept(<span class="keyword">null</span>, <span class="keyword">new</span> AcceptHandler());</span><br><span class="line">                System.in.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            shutdown(serverSocketChannel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">AsynchronousSocketChannel</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel clientChannel, Object attachment)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (serverSocketChannel.isOpen()) &#123;</span><br><span class="line">                serverSocketChannel.accept(<span class="keyword">null</span>, <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (clientChannel != <span class="keyword">null</span> &amp;&amp; clientChannel.isOpen()) &#123;</span><br><span class="line">                ClientHandler handler = <span class="keyword">new</span> ClientHandler(clientChannel);</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">                <span class="comment">//将用户添加到在线列表</span></span><br><span class="line">                addClient(handler);</span><br><span class="line">                clientChannel.read(buffer, buffer, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户连接失败&quot;</span> + exc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addClient</span><span class="params">(ClientHandler handler)</span> </span>&#123;</span><br><span class="line">        connectedClients.add(handler);</span><br><span class="line">        System.out.println(getClientName(handler.clientChannel) + <span class="string">&quot;已成功连接到服务器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeClient</span><span class="params">(ClientHandler clientHandler)</span> </span>&#123;</span><br><span class="line">        connectedClients.remove(clientHandler);</span><br><span class="line">        System.err.println(getClientName(clientHandler.clientChannel) + <span class="string">&quot;已断开服务器连接&quot;</span>);</span><br><span class="line">        shutdown(clientHandler.clientChannel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClientName</span><span class="params">(AsynchronousSocketChannel clientChannel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetSocketAddress address= (InetSocketAddress) clientChannel.getRemoteAddress();</span><br><span class="line">            String str=<span class="string">&quot;客户端[&quot;</span>+address.getPort()+<span class="string">&quot;]:&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取客户端失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">Integer</span>, <span class="title">ByteBuffer</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> AsynchronousSocketChannel clientChannel;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientHandler</span><span class="params">(AsynchronousSocketChannel clientChannel)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clientChannel = clientChannel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (attachment != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (result &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//客户端异常</span></span><br><span class="line">                    <span class="comment">//移除在线列表</span></span><br><span class="line">                    removeClient(<span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    attachment.flip();</span><br><span class="line">                    String msg = receive(attachment);</span><br><span class="line">                    System.out.println(getClientName(clientChannel) + msg);</span><br><span class="line">                    forwardMessage(clientChannel, msg);</span><br><span class="line">                    attachment.clear();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//检查用户是否决定退出</span></span><br><span class="line">                    <span class="keyword">if</span> (readyToQuit(msg)) &#123;</span><br><span class="line">                        removeClient(<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        clientChannel.read(attachment, attachment, <span class="keyword">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户读写失败&quot;</span> + exc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">forwardMessage</span><span class="params">(AsynchronousSocketChannel clientChannel, String msg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ClientHandler handler : connectedClients) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!clientChannel.equals(handler.clientChannel)) &#123;</span><br><span class="line">                    String str = getClientName(handler.clientChannel);</span><br><span class="line">                    ByteBuffer buffer = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (readyToQuit(msg)) &#123;</span><br><span class="line">                        buffer = charset.encode(str + <span class="string">&quot;已断开连接&quot;</span>);</span><br><span class="line">                        handler.clientChannel.write(buffer, <span class="keyword">null</span>, handler);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        buffer = charset.encode(str + msg);</span><br><span class="line">                        handler.clientChannel.write(buffer, <span class="keyword">null</span>, handler);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">receive</span><span class="params">(ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(charset.decode(attachment)).trim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="uDgH0"></a></p><h2 id="servermain"><a class="markdownIt-Anchor" href="#servermain"></a> ServerMain:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo5.aio.server;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/23 19:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatServer server=<span class="keyword">new</span> ChatServer();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="T3X35"></a></p><h1 id="客户端创建"><a class="markdownIt-Anchor" href="#客户端创建"></a> 客户端创建</h1><p><a name="VumVM"></a></p><h2 id="chatclient"><a class="markdownIt-Anchor" href="#chatclient"></a> chatClient：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo5.aio.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCALHOST = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT = <span class="string">&quot;quit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Charset charset = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousSocketChannel clientChannel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(LOCALHOST, DEFAULT_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">(Closeable... closeables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut : closeables) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">readyToQuit</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clientChannel = AsynchronousSocketChannel.open();</span><br><span class="line">            Future&lt;Void&gt; future = clientChannel.connect(<span class="keyword">new</span> InetSocketAddress(host, port));</span><br><span class="line">            System.out.println(<span class="string">&quot;已成功连接到服务器&quot;</span>);</span><br><span class="line">            future.get();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理用户输入</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UserInputHander(<span class="keyword">this</span>)).start();</span><br><span class="line"></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Future&lt;Integer&gt; readResult = clientChannel.read(buffer);</span><br><span class="line">                <span class="keyword">int</span> result = readResult.get();</span><br><span class="line">                <span class="keyword">if</span> (result &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//服务器异常</span></span><br><span class="line">                    System.err.println(<span class="string">&quot;服务器断开&quot;</span>);</span><br><span class="line">                    shutdown(clientChannel);</span><br><span class="line">                    System.exit(-<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    String msg = String.valueOf(charset.decode(buffer));</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ByteBuffer buffer = charset.encode(msg);</span><br><span class="line">                Future&lt;Integer&gt; future = clientChannel.write(buffer);</span><br><span class="line">                future.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">&quot;消息发送失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="i9rAc"></a></p><h2 id="userinputhander"><a class="markdownIt-Anchor" href="#userinputhander"></a> UserInputHander:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo5.aio.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> demo3.nio1.client.Demo3ChatClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputHander</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChatClient chatClient;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInputHander</span><span class="params">(ChatClient chatClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String msg = reader.readLine();</span><br><span class="line">                chatClient.send(msg);</span><br><span class="line">                <span class="keyword">if</span> (chatClient.readyToQuit(msg)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;已断开服务器连接&quot;</span>);</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="2hqmE"></a></p><h2 id="clientmain"><a class="markdownIt-Anchor" href="#clientmain"></a> ClientMain:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo5.aio.client;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hszjj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/11/23 20:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatClient client=<span class="keyword">new</span> ChatClient();</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="JDtWr"></a></p><h1 id="效果演示"><a class="markdownIt-Anchor" href="#效果演示"></a> 效果演示</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574512407634-792dd610-1bde-4dc9-a413-df418f78189e.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1080&amp;originWidth=1920&amp;size=149822&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于aio改写多人聊天室&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基于aio改写多人聊天室&quot;&gt;&lt;/a&gt; 基于AIO改写多人聊天室&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;ecLJt&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;aio编程模型梳理</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>AIO异步调用机制</title>
    <link href="https://jie-blog.icu/posts/aio_1/"/>
    <id>https://jie-blog.icu/posts/aio_1/</id>
    <published>2020-09-13T10:09:28.000Z</published>
    <updated>2020-09-13T10:11:46.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aio异步调用机制"><a class="markdownIt-Anchor" href="#aio异步调用机制"></a> AIO异步调用机制</h1><p><a name="mmEfk"></a></p><h1 id="aio的异步操作"><a class="markdownIt-Anchor" href="#aio的异步操作"></a> AIO的异步操作</h1><p>AsyncSocketChannel和AsyncServerSocketChannel都是支持如图几个IO操作异步调用的。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574316912617-10b6e8a5-552c-4244-a45c-3a36683aa933.png#align=left&amp;display=inline&amp;height=201&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=401&amp;originWidth=1248&amp;size=87502&amp;status=done&amp;style=none&amp;width=624" alt="image.png" /><br /><a name="zC8W1"></a></p><h1 id="如何实现异步调用"><a class="markdownIt-Anchor" href="#如何实现异步调用"></a> 如何实现异步调用</h1><p><a name="U8Nbl"></a></p><h2 id="future"><a class="markdownIt-Anchor" href="#future"></a> Future</h2><p>简单来说通过Channel来调用那几个函数，然后返回一个Future的对象，Future在线程池中介绍过，他是一个描述未来的一个对象，通过get、isDone等等的调用查询未来的任务。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574317208579-f33b1cbf-6da0-436b-9187-96ae88bef384.png#align=left&amp;display=inline&amp;height=190&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=379&amp;originWidth=983&amp;size=78654&amp;status=done&amp;style=none&amp;width=491.5" alt="image.png" /><br /><a name="90KYi"></a></p><h2 id="completionhander"><a class="markdownIt-Anchor" href="#completionhander"></a> CompletionHander</h2><p>通过Channel调用IO操作，然后不等待是否完成，然后把一些参数传入一个回调函数（Handler）进一步操作（实现）。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574317439275-8b8225da-8d02-4ba7-8b32-9fc38d1637c7.png#align=left&amp;display=inline&amp;height=188&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=376&amp;originWidth=1217&amp;size=91840&amp;status=done&amp;style=none&amp;width=608.5" alt="image.png" /><br />Handler拥有两种函数，一个是Completed，是在完成后调用，另一种是Failed，是在失败了后调用。<br /><a name="nDWQ7"></a></p><h1 id="echodemo实现异步操作机制"><a class="markdownIt-Anchor" href="#echodemo实现异步操作机制"></a> EchoDemo实现异步操作机制</h1><p><a name="28Vp3"></a></p><h2 id="server"><a class="markdownIt-Anchor" href="#server"></a> Server：</h2><p><a name="Kg0Bz"></a></p><h3 id="主体函数"><a class="markdownIt-Anchor" href="#主体函数"></a> 主体函数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4.aio.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.CompletionHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String LOCALHOST=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT=<span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousServerSocketChannel serverSocketChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT=<span class="string">&quot;quit&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readyToQuit</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">(Closeable...closeables)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut : closeables) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//绑定监听端口</span></span><br><span class="line">            serverSocketChannel=AsynchronousServerSocketChannel.open();</span><br><span class="line">            serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(LOCALHOST,DEFAULT_PORT));</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动，正在监听：[&quot;</span>+LOCALHOST+<span class="string">&quot;,&quot;</span>+DEFAULT_PORT+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//AcceptHandler在AsynchronousChannelGroup线程池中完成,而非主线程。</span></span><br><span class="line">                <span class="comment">//AsynchronousChannelGroup未定义时使用默认的AsynchronousChannelGroup</span></span><br><span class="line">                serverSocketChannel.accept(<span class="keyword">null</span>, <span class="keyword">new</span> AcceptHandler());</span><br><span class="line">                <span class="comment">//防止频繁调用accept函数。</span></span><br><span class="line">                System.in.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            shutDown(serverSocketChannel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">AsynchronousSocketChannel</span>,<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel result, Object attachment)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//并不会造成stepOverFlow在底层实现拥有次数限制</span></span><br><span class="line">            <span class="keyword">if</span> (serverSocketChannel.isOpen())&#123;</span><br><span class="line">                serverSocketChannel.accept(<span class="keyword">null</span>,<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            AsynchronousSocketChannel clientChannel=result;</span><br><span class="line">            <span class="keyword">if</span> (clientChannel!=<span class="keyword">null</span>&amp;&amp;clientChannel.isOpen()) &#123;</span><br><span class="line">                ClientHander hander = <span class="keyword">new</span> ClientHander(clientChannel);</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                Map&lt;String, Object&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                info.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;read&quot;</span>);</span><br><span class="line">                info.put(<span class="string">&quot;buffer&quot;</span>, buffer);</span><br><span class="line">                clientChannel.read(buffer, info, hander);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//异常处理,略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHander</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">Integer</span>,<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> AsynchronousSocketChannel clientChannel;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientHander</span><span class="params">(AsynchronousSocketChannel clientChannel)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端[&quot;</span>+clientChannel.getLocalAddress()+<span class="string">&quot;]已连接到服务器&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.clientChannel=clientChannel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class="line">            Map&lt;String,Object&gt; info= (Map&lt;String, Object&gt;) attachment;</span><br><span class="line">            String type= (String) info.get(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;read&quot;</span>.equalsIgnoreCase(type)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ByteBuffer buffer = (ByteBuffer) info.get(<span class="string">&quot;buffer&quot;</span>);</span><br><span class="line">                    String str = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                    <span class="keyword">if</span> (readyToQuit(str)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端[&quot;</span> + clientChannel.getLocalAddress() + <span class="string">&quot;]已断开连接&quot;</span>);</span><br><span class="line">                        shutDown(clientChannel);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        info.put(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;write&quot;</span>);</span><br><span class="line">                        clientChannel.write(buffer, info, <span class="keyword">this</span>);</span><br><span class="line">                        buffer.clear();</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端[&quot;</span> + clientChannel.getLocalAddress() + <span class="string">&quot;]:&quot;</span> + str);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;write&quot;</span>.equalsIgnoreCase(type))&#123;</span><br><span class="line">                ByteBuffer buffer= ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                info.put(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                info.put(<span class="string">&quot;buffer&quot;</span>,buffer);</span><br><span class="line">                clientChannel.read(buffer,info,<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//异常处理,略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="6cEVn"></a></p><h3 id="main"><a class="markdownIt-Anchor" href="#main"></a> Main:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4.aio.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Server server=<span class="keyword">new</span> Server();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="vYvjv"></a></p><h2 id="client"><a class="markdownIt-Anchor" href="#client"></a> Client</h2><p><a name="Mg95x"></a></p><h3 id="主题函数"><a class="markdownIt-Anchor" href="#主题函数"></a> 主题函数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4.aio.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.AsynchronousSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String LOCALHOST = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousSocketChannel clientChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT=<span class="string">&quot;quit&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readyToQuit</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutDown</span><span class="params">(Closeable... closeables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut : closeables) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建channel</span></span><br><span class="line">            clientChannel = AsynchronousSocketChannel.open();</span><br><span class="line">            Future&lt;Void&gt; future = clientChannel.connect(<span class="keyword">new</span> InetSocketAddress(LOCALHOST, DEFAULT_PORT));</span><br><span class="line">            future.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端[&quot;</span>+LOCALHOST+<span class="string">&quot;，&quot;</span>+DEFAULT_PORT+<span class="string">&quot;]已连接到服务器&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等待用户输入</span></span><br><span class="line">            BufferedReader consoleReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String intput = consoleReader.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] inputBytes = intput.getBytes();</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(inputBytes);</span><br><span class="line">                Future&lt;Integer&gt; writeRes = clientChannel.write(buffer);</span><br><span class="line">                writeRes.get();</span><br><span class="line">                <span class="keyword">if</span> (readyToQuit(intput))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                buffer.flip();</span><br><span class="line">                Future&lt;Integer&gt; readRes = clientChannel.read(buffer);</span><br><span class="line">                readRes.get();</span><br><span class="line">                System.out.print(<span class="string">&quot;收到服务器消息：&quot;</span>);</span><br><span class="line">                buffer.clear();</span><br><span class="line">                String res = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                res=<span class="string">&quot;[ECHO]:&quot;</span> +res;</span><br><span class="line">                System.out.println(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            shutDown(clientChannel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4.aio.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client=<span class="keyword">new</span> Client();</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="L3WPJ"></a></p><h1 id="结果展示"><a class="markdownIt-Anchor" href="#结果展示"></a> 结果展示</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574326786588-d0c6a73a-428e-4242-ac1a-48f72e2cc2b9.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1080&amp;originWidth=1920&amp;size=120802&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;aio异步调用机制&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#aio异步调用机制&quot;&gt;&lt;/a&gt; AIO异步调用机制&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;mmEfk&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;aio的异步操作&quot;&gt;&lt;a class</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>IO模型总结</title>
    <link href="https://jie-blog.icu/posts/io_sum_1/"/>
    <id>https://jie-blog.icu/posts/io_sum_1/</id>
    <published>2020-09-13T10:07:18.000Z</published>
    <updated>2020-09-13T10:09:11.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="io模型总结"><a class="markdownIt-Anchor" href="#io模型总结"></a> IO模型总结</h1><p><a name="bKgnQ"></a></p><h1 id="数据物理传输过程"><a class="markdownIt-Anchor" href="#数据物理传输过程"></a> 数据物理传输过程</h1><p>数据首先通过物理连接方式收到数据：<br />通过网卡设备接收数据，然后拷贝到操作系统内部缓冲区，从缓冲区复制到应用程序的缓冲区，从应用程序缓冲区提取数据。<br /><a name="TRguh"></a></p><h1 id="阻塞式io"><a class="markdownIt-Anchor" href="#阻塞式io"></a> 阻塞式IO</h1><p><a name="jbWNO"></a></p><h2 id="数据传输过程"><a class="markdownIt-Anchor" href="#数据传输过程"></a> 数据传输过程：</h2><p>通过操作系统（大部分为Unix）调用函数查询数据是否准备好。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574258954290-0eff205b-a272-40cd-ad39-4093339b1fce.png#align=left&amp;display=inline&amp;height=87&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=209&amp;originWidth=980&amp;size=85304&amp;status=done&amp;style=none&amp;width=407" alt="image.png" /><br /><br /><br />数据没有准备好，一直阻塞在内核中<br />数据准备好了，拷贝到内核的缓冲区，然后复制到应用程序缓冲区<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574259187969-70e6f819-7dab-4217-abd8-136301f190ce.png#align=left&amp;display=inline&amp;height=205&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=495&amp;originWidth=984&amp;size=120965&amp;status=done&amp;style=none&amp;width=407" alt="image.png" /><br />返回数据到应用程序<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574259267830-6fa6dca8-3075-4dbb-83bb-a997303de924.png#align=left&amp;display=inline&amp;height=203&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=487&amp;originWidth=994&amp;size=133843&amp;status=done&amp;style=none&amp;width=415" alt="image.png" /><br /><a name="Qd90c"></a></p><h1 id="非阻塞式io"><a class="markdownIt-Anchor" href="#非阻塞式io"></a> 非阻塞式IO</h1><p><a name="sqt4u"></a></p><h2 id="数据传输过程-2"><a class="markdownIt-Anchor" href="#数据传输过程-2"></a> 数据传输过程：</h2><p>如果在系统调用后数据没有准备好，这是不会进行阻塞，会直接返回无数据，然后之后再次系统调用，在这样不断询问直到数据准备好为止，过程如图：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574259460441-5afc416d-c07f-474d-910b-8101f14fb515.png#align=left&amp;display=inline&amp;height=238&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=566&amp;originWidth=973&amp;size=167344&amp;status=done&amp;style=none&amp;width=410" alt="image.png" /><br /></p><p><a name="KwERt"></a></p><h2 id="与阻塞的不同点"><a class="markdownIt-Anchor" href="#与阻塞的不同点"></a> 与阻塞的不同点：</h2><p>显然，区别就是不再等待到数据准备好为止，而是不断发送查询直到数据准备好为止。<br /><a name="uLxff"></a></p><h1 id="阻塞小结"><a class="markdownIt-Anchor" href="#阻塞小结"></a> 阻塞小结</h1><p>对比NIO和BIO模型，这里就对应着非阻塞和阻塞模型。<br />不过请注意，这里的是NIO模型而非NIO具体实现，因为具体实现会涉及到Selector，将在后面具体分析。<br /><a name="8XTXV"></a></p><h1 id="io多路复用"><a class="markdownIt-Anchor" href="#io多路复用"></a> IO多路复用</h1><p><a name="gq5aH"></a></p><h2 id="数据传输过程-3"><a class="markdownIt-Anchor" href="#数据传输过程-3"></a> 数据传输过程：</h2><p>通过系统调用（select）查看数据是否准备就绪，若数据没有准备好，于是准备监听内核通道，等待直到数据准备好为止，返回可读信号（条件），然后再次系统调用，随后复制数据，最后成功返回。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574260059147-80ec27f1-361e-4527-9994-cae44412272e.png#align=left&amp;display=inline&amp;height=294&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=572&amp;originWidth=992&amp;size=176398&amp;status=done&amp;style=none&amp;width=510" alt="image.png" /><br /></p><p><a name="6xGxI"></a></p><h2 id="何为多路"><a class="markdownIt-Anchor" href="#何为多路"></a> 何为多路？</h2><p>应用程序可以不止监听一个IO，可以监听多个IO，当满足条件时，都可以返回条件，故为多路。<br /><a name="wcowe"></a></p><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>如上所述，IO多路复用是NIO+Selector（IO多路复用器）的模型。<br /><a name="nwV06"></a></p><h1 id="异步io"><a class="markdownIt-Anchor" href="#异步io"></a> 异步IO</h1><p>不管是上述哪种模型，它们都属于同步模型，因为发起调用以后，无论数据准备好与否都会返回数据。<br /><a name="3ftze"></a></p><h2 id="异步io的过程"><a class="markdownIt-Anchor" href="#异步io的过程"></a> 异步IO的过程：</h2><p>和之前相同，若没有准备好数据的话会返回空数据，当数据准备好以后，会直接进行数据复制，当一切都准备好以后会递交信号给应用程序。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574260649001-4cdab418-2fe2-4cc7-b8b2-7f5c0ce17353.png#align=left&amp;display=inline&amp;height=288&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=570&amp;originWidth=983&amp;size=158188&amp;status=done&amp;style=none&amp;width=496" alt="image.png" /><br /><strong>对应模型即AIO模型</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;io模型总结&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#io模型总结&quot;&gt;&lt;/a&gt; IO模型总结&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;bKgnQ&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;数据物理传输过程&quot;&gt;&lt;a class=&quot;markdow</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>NIO的多人聊天室</title>
    <link href="https://jie-blog.icu/posts/nio_3/"/>
    <id>https://jie-blog.icu/posts/nio_3/</id>
    <published>2020-09-13T10:06:00.000Z</published>
    <updated>2020-09-13T10:06:56.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nio的多人聊天室"><a class="markdownIt-Anchor" href="#nio的多人聊天室"></a> NIO的多人聊天室</h1><p><a name="kHxHh"></a></p><h1 id="nio编程模型概述"><a class="markdownIt-Anchor" href="#nio编程模型概述"></a> NIO编程模型概述</h1><p><a name="8XTAj"></a></p><h2 id="accept事件"><a class="markdownIt-Anchor" href="#accept事件"></a> ACCEPT事件：</h2><p>服务器端启动ServerSocketChannel，绑定端口后注册ACCEPT事件，当客户端发送并被服务器接收的时候则触发ACCEPT事件，并通过handles处理事件、注册新的事件READ。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574142293436-c660bf4c-c90a-4118-9617-8071bd2a007a.png#align=left&amp;display=inline&amp;height=241&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=315&amp;originWidth=800&amp;size=83696&amp;status=done&amp;style=none&amp;width=612" alt="image.png" /><br />在客户发送信息以后READ事件就可以被触发。<br />注意：<br />处理事件都是在同一线程中完成的：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574142431039-abbe788c-624e-4df2-8a5e-3cd8f2ab8f9b.png#align=left&amp;display=inline&amp;height=219&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=236&amp;originWidth=582&amp;size=67714&amp;status=done&amp;style=none&amp;width=539" alt="image.png" /><br /><a name="EpEqm"></a></p><h2 id="read事件"><a class="markdownIt-Anchor" href="#read事件"></a> READ事件：</h2><p>接上文，当用户SocketChannel中拥有数据时，Selector会发现拥有可读事件，READ被触发，通过handles把数据转发出去，同样，处理事件都是在同一线程中完成的。<br /><a name="4wcY3"></a></p><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意：</h2><p>虽然NIO的读写都是非阻塞性的但是Selector是阻塞性的，当没有事件发生的时候Selector的select会一直阻塞，直到新的事件触发。<br /><a name="089wq"></a></p><h2 id="第二个链接建立"><a class="markdownIt-Anchor" href="#第二个链接建立"></a> 第二个链接建立：</h2><p>过程同上，形成如图：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574142847655-96977996-ed4a-4e26-bc8a-c9c81e66275b.png#align=left&amp;display=inline&amp;height=269&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=380&amp;originWidth=838&amp;size=110493&amp;status=done&amp;style=none&amp;width=593" alt="image.png" /><br />注册了监听Client2的READ事件。<br /><a name="APBdW"></a></p><h1 id="代码实践"><a class="markdownIt-Anchor" href="#代码实践"></a> 代码实践</h1><p><a name="dc8ZY"></a></p><h2 id="服务器端"><a class="markdownIt-Anchor" href="#服务器端"></a> 服务器端</h2><p><a name="DRpi3"></a></p><h3 id="chatserver"><a class="markdownIt-Anchor" href="#chatserver"></a> ChatServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3.nio1.server;</span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT=<span class="string">&quot;quit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT=<span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER=<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel server;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ByteBuffer readBuffer=ByteBuffer.allocate(BUFFER);</span><br><span class="line">    <span class="keyword">private</span> ByteBuffer writeBuffer=ByteBuffer.allocate(BUFFER);</span><br><span class="line">    <span class="comment">//编码解码</span></span><br><span class="line">    <span class="keyword">private</span> Charset charset=Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port=port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">readyToQuit</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable...closeables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut : closeables) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">//关闭阻塞状态</span></span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//绑定监听端口</span></span><br><span class="line">            server.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">//注册ACCEPT</span></span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器[&quot;</span> + port + <span class="string">&quot;]已启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                selector.select();</span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                <span class="keyword">for</span> (SelectionKey key : selectionKeys) &#123;</span><br><span class="line">                    handles(key);</span><br><span class="line">                &#125;</span><br><span class="line">                selectionKeys.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClosedSelectorException e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//不必要关闭ServerChannel，因为关闭selector以后会把它对应的通道一起关闭</span></span><br><span class="line">            close(selector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handles</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel client = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// ACCEPT事件--和客户端建立连接</span></span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            ServerSocketChannel channel = (ServerSocketChannel) key.channel();</span><br><span class="line">            client = channel.accept();</span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">            System.out.println(getClientName(client) + <span class="string">&quot;已连接到服务器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// READ事件--客户端发送了消息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            client = (SocketChannel) key.channel();</span><br><span class="line">            String msg = recieve(client);</span><br><span class="line">            <span class="comment">//客户端异常</span></span><br><span class="line">            <span class="keyword">if</span> (msg.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//取消继续监视这个通达</span></span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="comment">//更新selector的状态</span></span><br><span class="line">                selector.wakeup();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//检查是否退出</span></span><br><span class="line">                <span class="keyword">if</span> (readyToQuit(msg)) &#123;</span><br><span class="line">                    key.cancel();</span><br><span class="line">                    selector.wakeup();</span><br><span class="line">                    System.out.println(getClientName(client) + <span class="string">&quot;断开连接&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(getClientName(client)+msg);</span><br><span class="line">                    <span class="comment">//转发数据</span></span><br><span class="line">                    forwardMessage(client, msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClientName</span><span class="params">(SocketChannel client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;客户端[&quot;</span>+client.socket().getPort()+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forwardMessage</span><span class="params">(SocketChannel client, String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key:selector.keys())&#123;</span><br><span class="line">            Channel connectedClient= key.channel();</span><br><span class="line">            <span class="keyword">if</span> (connectedClient <span class="keyword">instanceof</span> ServerSocketChannel)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (key.isValid()&amp;&amp;!client.equals(connectedClient))&#123;</span><br><span class="line">                writeBuffer.clear();</span><br><span class="line">                writeBuffer.put(charset.encode(getClientName(client)+<span class="string">&quot;:&quot;</span>+msg+<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">                writeBuffer.flip();</span><br><span class="line">                <span class="keyword">while</span> (writeBuffer.hasRemaining())&#123;</span><br><span class="line">                    ((SocketChannel) connectedClient).write(writeBuffer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">recieve</span><span class="params">(SocketChannel client)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        readBuffer.clear();</span><br><span class="line">        <span class="keyword">while</span> (client.read(readBuffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        readBuffer.flip();</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(charset.decode(readBuffer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="gpkwK"></a></p><h3 id="main"><a class="markdownIt-Anchor" href="#main"></a> Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3.nio1.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatServer chatServer=<span class="keyword">new</span> ChatServer();</span><br><span class="line">        chatServer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="7wCVJ"></a></p><h2 id="用户端"><a class="markdownIt-Anchor" href="#用户端"></a> 用户端</h2><p><a name="8gC2g"></a></p><h3 id="chatclient"><a class="markdownIt-Anchor" href="#chatclient"></a> ChatClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3.nio1.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_IP = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUIT = <span class="string">&quot;quit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> post;</span><br><span class="line">    <span class="keyword">private</span> SocketChannel client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ByteBuffer readBuffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">    <span class="keyword">private</span> ByteBuffer writeBuffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> Charset charset = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span><span class="params">(String host, <span class="keyword">int</span> post)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.post = post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_IP, DEFAULT_PORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">readyToQuit</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable... closeables)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Closeable shut : closeables) &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client = SocketChannel.open();</span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            client.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">            client.connect(<span class="keyword">new</span> InetSocketAddress(host, post));</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端[&quot;</span> + host + <span class="string">&quot;]已连接到服务器&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                selector.select();</span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                <span class="keyword">for</span> (SelectionKey key : selectionKeys) &#123;</span><br><span class="line">                    handles(key);</span><br><span class="line">                &#125;</span><br><span class="line">                selectionKeys.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClosedSelectorException e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(selector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handles</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel channel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//CONNECT事件--连接就绪</span></span><br><span class="line">        <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//判断是否就绪建立连接</span></span><br><span class="line">            <span class="keyword">if</span> (channel.isConnectionPending()) &#123;</span><br><span class="line">                channel.finishConnect();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//处理用户的输入</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UserInputHander(<span class="keyword">this</span>)).start();</span><br><span class="line">            channel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//READ事件--服务器转发消息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            channel = (SocketChannel) key.channel();</span><br><span class="line">            String msg = recieve(channel);</span><br><span class="line">            <span class="keyword">if</span> (msg.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//服务器异常</span></span><br><span class="line">                System.out.println(<span class="string">&quot;客户端[&quot;</span> + host + <span class="string">&quot;]已断开服务器&quot;</span>);</span><br><span class="line">                close(selector);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">recieve</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        readBuffer.clear();</span><br><span class="line">        <span class="keyword">while</span> (client.read(readBuffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        readBuffer.flip();</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(charset.decode(readBuffer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        writeBuffer.clear();</span><br><span class="line">        writeBuffer.put(charset.encode(msg));</span><br><span class="line">        writeBuffer.flip();</span><br><span class="line">        <span class="keyword">while</span> (writeBuffer.hasRemaining()) &#123;</span><br><span class="line">            client.write(writeBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (readyToQuit(msg)) &#123;</span><br><span class="line">            close(selector);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端[&quot;</span> + host + <span class="string">&quot;]已断开服务器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="wNn9Y"></a></p><h3 id="输入线程"><a class="markdownIt-Anchor" href="#输入线程"></a> 输入线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3.nio1.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputHander</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChatClient chatClient;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInputHander</span><span class="params">(ChatClient chatClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String msg = reader.readLine();</span><br><span class="line">                chatClient.send(msg);</span><br><span class="line">                <span class="keyword">if</span> (chatClient.readyToQuit(msg)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="m26i3"></a></p><h3 id="main-2"><a class="markdownIt-Anchor" href="#main-2"></a> Main</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3.nio1.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatClient chatClient=<span class="keyword">new</span> ChatClient();</span><br><span class="line">        chatClient.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="G1Qx3"></a></p><h1 id="测试结果"><a class="markdownIt-Anchor" href="#测试结果"></a> 测试结果</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574179411430-852ee411-272e-47e6-a757-655550840171.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1080&amp;originWidth=1920&amp;size=120654&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nio的多人聊天室&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nio的多人聊天室&quot;&gt;&lt;/a&gt; NIO的多人聊天室&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;kHxHh&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;nio编程模型概述&quot;&gt;&lt;a clas</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>NIO零拷贝</title>
    <link href="https://jie-blog.icu/posts/nio_2/"/>
    <id>https://jie-blog.icu/posts/nio_2/</id>
    <published>2020-09-13T10:04:48.000Z</published>
    <updated>2020-09-13T10:05:45.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nio零拷贝"><a class="markdownIt-Anchor" href="#nio零拷贝"></a> NIO零拷贝</h1><p><a name="vCSGr"></a></p><h1 id="问题引出"><a class="markdownIt-Anchor" href="#问题引出"></a> 问题引出</h1><p><a name="ZPOrd"></a></p><h2 id="传统文件拷贝过程"><a class="markdownIt-Anchor" href="#传统文件拷贝过程"></a> 传统文件拷贝过程</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1577688277144-5fae642e-e679-454b-8f41-8680a43370a0.png#align=left&amp;display=inline&amp;height=417&amp;name=image.png&amp;originHeight=649&amp;originWidth=680&amp;size=98806&amp;status=done&amp;style=none&amp;width=437" alt="image.png" /><br />它将硬盘上的文件读取到内核空间的缓冲区中，然后再将缓冲区内容拷贝到Socket缓冲区再拷贝到用户缓冲区中，调用写的方法时会从用户缓冲区到内核传冲区到Socket缓冲区再到服务器端的拷贝，总而言之会进行多次拷贝。<br />显然，会拥有极大的性能损耗。<br /><a name="z7JS3"></a></p><h2 id="简化拷贝过程"><a class="markdownIt-Anchor" href="#简化拷贝过程"></a> 简化拷贝过程</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1577688060888-ae5d24e6-68bb-44cc-a122-a26be313d12f.png#align=left&amp;display=inline&amp;height=389&amp;name=image.png&amp;originHeight=646&amp;originWidth=710&amp;size=95642&amp;status=done&amp;style=none&amp;width=428" alt="image.png" /><br />通过sendfile将用户空间切换到内核空间，从而节省了用户缓冲区的操作，直接由内核和硬件的对话，但是仍然会有拷贝的过程，这时候就要依赖操作系统的操作了。<br /><a name="kNHJE"></a></p><h2 id="零拷贝过程"><a class="markdownIt-Anchor" href="#零拷贝过程"></a> 零拷贝过程</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1577688659391-de8375dd-5bd6-4d64-ad73-6e99501cff57.png#align=left&amp;display=inline&amp;height=318&amp;name=image.png&amp;originHeight=636&amp;originWidth=900&amp;size=107607&amp;status=done&amp;style=none&amp;width=450" alt="image.png" /><br />经过操作系统的配合实现了零拷贝的过程，即通过scatter/gather的方法。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1577688761172-98ae4a78-451b-45e4-9c37-ec4261e0439d.png#align=left&amp;display=inline&amp;height=348&amp;name=image.png&amp;originHeight=596&amp;originWidth=759&amp;size=243024&amp;status=done&amp;style=none&amp;width=444" alt="image.png" /><br /><a name="XC4qI"></a></p><h1 id="代码实验"><a class="markdownIt-Anchor" href="#代码实验"></a> 代码实验</h1><p>经过理论分析，接下来要用代码实际查看是不是性能拥有差距。<br /><a name="45lwa"></a></p><h2 id="老式拷贝文件"><a class="markdownIt-Anchor" href="#老式拷贝文件"></a> 老式拷贝文件</h2><p><a name="a8gLo"></a></p><h3 id="oldeioserver"><a class="markdownIt-Anchor" href="#oldeioserver"></a> OldeIOServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.zerocopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HandSomeMaker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/12/30 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldIoServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Socket socket = serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端【&quot;</span>+socket.getInetAddress()+<span class="string">&quot;】已连接到服务器&quot;</span>);</span><br><span class="line">                DataInputStream inputStream = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> (inputStream.read(bytes) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="R9ORz"></a></p><h3 id="oldioclient"><a class="markdownIt-Anchor" href="#oldioclient"></a> OldIOClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.zerocopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HandSomeMaker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/12/30 15:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldIoClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;C:&quot;</span> + File.separator + <span class="string">&quot;Program Files&quot;</span> + File.separator + <span class="string">&quot;CCleaner&quot;</span> + File.separator + <span class="string">&quot;CCleaner64.exe&quot;</span>);</span><br><span class="line">            InputStream inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            DataOutputStream outputStream = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">while</span> (inputStream.read(bytes, <span class="number">0</span>, bytes.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                outputStream.write(bytes);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;传送完成，耗时：&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line">            outputStream.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ybZgx"></a></p><h2 id="新式拷贝文件"><a class="markdownIt-Anchor" href="#新式拷贝文件"></a> 新式拷贝文件</h2><p><a name="Z3slA"></a></p><h3 id="newioserver"><a class="markdownIt-Anchor" href="#newioserver"></a> NewIOServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.zerocopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HandSomeMaker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/12/30 15:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIoServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();</span><br><span class="line">            ServerSocket serverSocket=serverSocketChannel.socket();</span><br><span class="line">            <span class="comment">//开启端口复用</span></span><br><span class="line">            serverSocket.setReuseAddress(<span class="keyword">true</span>);</span><br><span class="line">            serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端已连接到服务器&quot;</span>);</span><br><span class="line">                <span class="comment">//开启阻塞</span></span><br><span class="line">                socketChannel.configureBlocking(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (socketChannel.read(byteBuffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    byteBuffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="EYpvm"></a></p><h3 id="newioclient"><a class="markdownIt-Anchor" href="#newioclient"></a> NewIOClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.zerocopy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: HandSomeMaker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019/12/30 15:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewIoClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">            socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>));</span><br><span class="line">            socketChannel.configureBlocking(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;C:&quot;</span> + File.separator + <span class="string">&quot;Program Files&quot;</span> + File.separator + <span class="string">&quot;CCleaner&quot;</span> + File.separator + <span class="string">&quot;CCleaner64.exe&quot;</span>);</span><br><span class="line">            FileChannel fileChannel = <span class="keyword">new</span> FileInputStream(file).getChannel();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将一个通道和另一个通道直接相连接</span></span><br><span class="line">            fileChannel.transferTo(<span class="number">0</span>, fileChannel.size(), socketChannel);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;传送完成，耗时：&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line">            socketChannel.close();</span><br><span class="line">            fileChannel.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="vKkYt"></a></p><h2 id="效果演示"><a class="markdownIt-Anchor" href="#效果演示"></a> 效果演示</h2><p><a name="aX5jR"></a></p><h3 id="老式拷贝文件-2"><a class="markdownIt-Anchor" href="#老式拷贝文件-2"></a> 老式拷贝文件</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1577692535223-78b50d87-5e69-42f1-9a14-09e72406041a.png#align=left&amp;display=inline&amp;height=45&amp;name=image.png&amp;originHeight=72&amp;originWidth=323&amp;size=4049&amp;status=done&amp;style=none&amp;width=202" alt="image.png" /><br /><a name="OcY5p"></a></p><h3 id="新式拷贝文件-2"><a class="markdownIt-Anchor" href="#新式拷贝文件-2"></a> 新式拷贝文件</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1577692553540-25e5750c-67bf-4e0a-975b-10f91fff7ca7.png#align=left&amp;display=inline&amp;height=41&amp;name=image.png&amp;originHeight=60&amp;originWidth=296&amp;size=3827&amp;status=done&amp;style=none&amp;width=201" alt="image.png" /><br /><a name="lN7q5"></a></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>显然，新式拷贝文件要比老式拷贝快上成倍的速度。<br />但是也不绝对，详情请查看<a href="https://www.cnblogs.com/interdrp/p/3785164.html">https://www.cnblogs.com/interdrp/p/3785164.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nio零拷贝&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nio零拷贝&quot;&gt;&lt;/a&gt; NIO零拷贝&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;vCSGr&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题引出&quot;&gt;&lt;a class=&quot;markdownIt-</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>NIO非阻塞模型</title>
    <link href="https://jie-blog.icu/posts/nio_1/"/>
    <id>https://jie-blog.icu/posts/nio_1/</id>
    <published>2020-09-13T10:03:15.000Z</published>
    <updated>2020-09-13T10:05:02.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nio非阻塞模型"><a class="markdownIt-Anchor" href="#nio非阻塞模型"></a> NIO非阻塞模型</h1><p><a name="3tuuc"></a></p><h1 id="nio概述"><a class="markdownIt-Anchor" href="#nio概述"></a> NIO概述</h1><p><a name="5SRK7"></a></p><h2 id="对比bio"><a class="markdownIt-Anchor" href="#对比bio"></a> 对比BIO</h2><p><a name="edSqH"></a></p><h3 id="bio即blockio"><a class="markdownIt-Anchor" href="#bio即blockio"></a> BIO即blockIO：</h3><ul><li>ServerSocket.accept()</li></ul><p>调用了这个函数后，就会一直处于阻塞状态，直到服务端接收了新的连接请求</p><ul><li>InputStream.read(),OutputStream.write()</li></ul><p>这个其实更严重，若用户长时间不输入信息则会造成长时间的阻塞</p><ul><li>无法在同一线程里处理多个StreamIO</li></ul><p>即使在伪异步优化以后，也是多个线程处理多个流的IO<br /><a name="FQAWA"></a></p><h2 id="非阻塞式nio"><a class="markdownIt-Anchor" href="#非阻塞式nio"></a> 非阻塞式NIO</h2><p><a name="LAG1x"></a></p><h3 id="nio即nonblocking"><a class="markdownIt-Anchor" href="#nio即nonblocking"></a> NIO即NonBlocking：</h3><ul><li>使用channel代替Stream</li></ul><p>流是单向的写入或者写出数据，而channel是有两种模式的，一种是类似于Stream的单向阻塞式操作，另一种则是非阻塞式的方法。</p><ul><li>使用Selector监控多条Channel</li></ul><p>非阻塞的意义则是某一channel的去数据时，若数据没准备好即立刻返回状态并保持查询状态。</p><ul><li>可以在一个线程处理多个ChannelIO</li></ul><p>多线程是很浪费资源的，而一个线程处理多个Channel则把现成的利用率最大化了。<br /><a name="UboLS"></a></p><h1 id="channel与buffer"><a class="markdownIt-Anchor" href="#channel与buffer"></a> Channel与Buffer</h1><p><a name="uYS5j"></a></p><h2 id="buffer是干什么的"><a class="markdownIt-Anchor" href="#buffer是干什么的"></a> Buffer是干什么的？</h2><p>在NIO中读写是要通过Buffer来完成的，在Channel写数据是要写在Buffer中的，读数据也是要在Buffer中读取的，因此Buffer也是双向的。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574080021222-0572aaff-8802-460e-ab37-27ea97b77bdf.png#align=left&amp;display=inline&amp;height=90&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=122&amp;originWidth=588&amp;size=25044&amp;status=done&amp;style=none&amp;width=436" alt="image.png" /><br /><a name="TNSvo"></a></p><h2 id="buffer的写入数据"><a class="markdownIt-Anchor" href="#buffer的写入数据"></a> Buffer的写入数据：</h2><p><a name="5wLCJ"></a></p><h3 id="step-1"><a class="markdownIt-Anchor" href="#step-1"></a> step 1：</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574080147624-42308ae3-66c3-4c38-bf13-56683fdf7cfd.png#align=left&amp;display=inline&amp;height=362&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=392&amp;originWidth=426&amp;size=49329&amp;status=done&amp;style=none&amp;width=393" alt="image.png" /><br />如图所示，图中由三个指针类的变量：postion、limit、capacity。<br />capacity：即整个Buffer最大的容量，及最多可写到的位置。<br />position：即当前位置<br />在最开始的时候，position指向最开始，从最开始的地方开始写入。<br />而limit暂时不做解释，他只是指在了capacity这个位置。<br /><a name="jcdZq"></a></p><h3 id="step-2"><a class="markdownIt-Anchor" href="#step-2"></a> step 2：</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574080395237-4ad315c2-012b-4edc-aa85-6f05ff4d61a5.png#align=left&amp;display=inline&amp;height=370&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=394&amp;originWidth=419&amp;size=52792&amp;status=done&amp;style=none&amp;width=394" alt="image.png" /><br />在写入一定的数据后，poistion的位置发生了改变，这时候为了接下来的读取，调用flip()方法。<br /><a name="nql5z"></a></p><h3 id="step-3"><a class="markdownIt-Anchor" href="#step-3"></a> step 3：</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574080536507-9c48ebe6-c093-44cf-8262-438c3c255b57.png#align=left&amp;display=inline&amp;height=344&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=385&amp;originWidth=415&amp;size=53237&amp;status=done&amp;style=none&amp;width=371" alt="image.png" /><br />调用flip函数后，position对到了最开始的位置，limit移动到了写入道德最远位置。<br /><a name="37m74"></a></p><h2 id="buffer读取数据"><a class="markdownIt-Anchor" href="#buffer读取数据"></a> Buffer读取数据：</h2><p>接上图，在position和limit之间则是写入的数据。<br /><a name="fqVmd"></a></p><h3 id="情况一"><a class="markdownIt-Anchor" href="#情况一"></a> 情况一：</h3><p><a name="of5kj"></a></p><h4 id="step-1-2"><a class="markdownIt-Anchor" href="#step-1-2"></a> step 1：</h4><p>数据全部读完，position移动到了limit的位置。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574080800207-93078c4a-3852-4484-aac1-0da7bbe9383b.png#align=left&amp;display=inline&amp;height=359&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=384&amp;originWidth=409&amp;size=51706&amp;status=done&amp;style=none&amp;width=382" alt="image.png" /><br />这时候需要调用clear()函数将指针调整方便下一次写入数据。<br /><a name="60V2q"></a></p><h4 id="step-2-2"><a class="markdownIt-Anchor" href="#step-2-2"></a> step 2：</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574080971748-fb7e0668-c90f-4cee-8c9a-d6d474a9a08c.png#align=left&amp;display=inline&amp;height=351&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=386&amp;originWidth=404&amp;size=51691&amp;status=done&amp;style=none&amp;width=367" alt="image.png" /><br />熟悉的样子，熟悉的配方，这里就不过多阐述了。注意：数据没有进行清除，只是移动了指针，在下一次写入数据时后进行覆盖。<br /><a name="CHGSF"></a></p><h3 id="情况二"><a class="markdownIt-Anchor" href="#情况二"></a> 情况二：</h3><p><a name="PthRg"></a></p><h4 id="step-1-3"><a class="markdownIt-Anchor" href="#step-1-3"></a> step 1：</h4><p>数据没有全部读完，却要进行模式转换。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574081258438-a0359762-5936-4caa-97d1-a1e5536d96b0.png#align=left&amp;display=inline&amp;height=387&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=389&amp;originWidth=403&amp;size=56762&amp;status=done&amp;style=none&amp;width=401" alt="image.png" /><br />这时候则调用compact()函数。<br /><a name="ILMWZ"></a></p><h4 id="step-2-3"><a class="markdownIt-Anchor" href="#step-2-3"></a> step 2：</h4><p>compat函数将未读数据拷贝到开始的位置，position会指向未读数据以下位置，在未读数据以前的数据则会进行覆盖。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574081450217-a17f402f-6243-422d-84db-204a52a0cdd9.png#align=left&amp;display=inline&amp;height=391&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=380&amp;originWidth=405&amp;size=56650&amp;status=done&amp;style=none&amp;width=417" alt="image.png" /><br /><a name="AOHA0"></a></p><h1 id="channel简析"><a class="markdownIt-Anchor" href="#channel简析"></a> Channel简析</h1><p><a name="6bOyo"></a></p><h2 id="channel的基本操作"><a class="markdownIt-Anchor" href="#channel的基本操作"></a> Channel的基本操作</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574082005312-1303815c-2b2b-44d1-8910-221f86df5543.png#align=left&amp;display=inline&amp;height=182&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=250&amp;originWidth=543&amp;size=46974&amp;status=done&amp;style=none&amp;width=396" alt="image.png" /><br />如图，进行双向的数据传输。<br /><a name="LjxT4"></a></p><h2 id="几个重要的channel"><a class="markdownIt-Anchor" href="#几个重要的channel"></a> 几个重要的Channel</h2><p>Channel的子类还有很多，这里就不一一列出了，以后找时间扩展好了。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574082084432-de7ad8b5-64dd-4a1a-9aad-44f2631ea8e2.png#align=left&amp;display=inline&amp;height=187&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=277&amp;originWidth=616&amp;size=61897&amp;status=done&amp;style=none&amp;width=415" alt="image.png" /><br />ServerSocketChannel和SocketChannel主要用于网络编程中的数据传输。<br />这里举例FileChannel的例子。<br /><a name="gacVG"></a></p><h2 id="多方法实现文件拷贝"><a class="markdownIt-Anchor" href="#多方法实现文件拷贝"></a> 多方法实现文件拷贝</h2><p>shutdown方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">(Closeable... closeable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Closeable shut : closeable) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (shut != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    shut.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="0SOJH"></a></p><h3 id="没有buffer的stream"><a class="markdownIt-Anchor" href="#没有buffer的stream"></a> 没有Buffer的Stream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FileCopyRunner noBufferStreamCopy;</span><br><span class="line"></span><br><span class="line">        noBufferStreamCopy = <span class="keyword">new</span> FileCopyRunner() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File source, File target)</span> </span>&#123;</span><br><span class="line">                InputStream input = <span class="keyword">null</span>;</span><br><span class="line">                OutputStream output = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    input = <span class="keyword">new</span> FileInputStream(source);</span><br><span class="line">                    output = <span class="keyword">new</span> FileOutputStream(target);</span><br><span class="line">                    <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((result = input.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        output.write(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    shutdown(input, output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;noBufferStreamCopy&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p><a name="WWfq4"></a></p><h3 id="有buffer的stream"><a class="markdownIt-Anchor" href="#有buffer的stream"></a> 有Buffer的Stream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">FileCopyRunner bufferedStreamCopy;</span><br><span class="line"></span><br><span class="line">        bufferedStreamCopy = <span class="keyword">new</span> FileCopyRunner() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File source, File target)</span> </span>&#123;</span><br><span class="line">                BufferedInputStream input = <span class="keyword">null</span>;</span><br><span class="line">                BufferedOutputStream output = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    input = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(source));</span><br><span class="line">                    output = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(target));</span><br><span class="line">                    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="keyword">int</span> result= <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((result = input.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        output.write(buffer, <span class="number">0</span>, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    shutdown(input, output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;bufferedStreamCopy&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p><a name="2cqKE"></a></p><h3 id="nio的channelcopy"><a class="markdownIt-Anchor" href="#nio的channelcopy"></a> NIO的ChannelCopy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">FileCopyRunner nioBufferCopy;</span><br><span class="line"></span><br><span class="line">        nioBufferCopy = <span class="keyword">new</span> FileCopyRunner() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File source, File target)</span> </span>&#123;</span><br><span class="line">                FileChannel input = <span class="keyword">null</span>;</span><br><span class="line">                FileChannel output = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    input = <span class="keyword">new</span> FileInputStream(source).getChannel();</span><br><span class="line">                    output = <span class="keyword">new</span> FileOutputStream(target).getChannel();</span><br><span class="line">                    ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="keyword">while</span> ((input.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                            output.write(buffer);</span><br><span class="line">                        &#125;</span><br><span class="line">                        buffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    shutdown(input, output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;nioBufferCopy&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p><a name="PLpsn"></a></p><h3 id="nio的transfercopy"><a class="markdownIt-Anchor" href="#nio的transfercopy"></a> NIO的TransferCopy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">FileCopyRunner nioTransfertCopy;</span><br><span class="line"></span><br><span class="line">        nioTransfertCopy = <span class="keyword">new</span> FileCopyRunner() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File source, File target)</span> </span>&#123;</span><br><span class="line">                FileChannel input = <span class="keyword">null</span>;</span><br><span class="line">                FileChannel output = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    input = <span class="keyword">new</span> FileInputStream(source).getChannel();</span><br><span class="line">                    output = <span class="keyword">new</span> FileOutputStream(target).getChannel();</span><br><span class="line">                    <span class="keyword">long</span> size = <span class="number">0L</span>;</span><br><span class="line">                    <span class="keyword">long</span> sumsize = input.size();</span><br><span class="line">                    <span class="keyword">while</span> (sumsize != size) &#123;</span><br><span class="line">                        size = input.transferTo(<span class="number">0</span>,sumsize,output);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    shutdown(input, output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;nioTransfertCopy&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p><a name="xzxMB"></a></p><h2 id="运行情况测试"><a class="markdownIt-Anchor" href="#运行情况测试"></a> 运行情况测试</h2><p>打包复制类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">benchmark</span><span class="params">(FileCopyRunner test, File source, File targe)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> elapsed = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROUNDS; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            test.copyFile(source, targe);</span><br><span class="line">            elapsed += System.currentTimeMillis() - startTime;</span><br><span class="line">            targe.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(test + <span class="string">&quot;: &quot;</span> + elapsed / ROUNDS);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a name="Pce9d"></a></p><h3 id="小文件实现代码"><a class="markdownIt-Anchor" href="#小文件实现代码"></a> 小文件实现代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;--------smallDemo----noBufferStreamCopy----------&quot;</span>);</span><br><span class="line">        benchmark(noBufferStreamCopy, smallFile, smallFileCopy);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------smallDemo----bufferedStreamCopy----------&quot;</span>);</span><br><span class="line">        benchmark(bufferedStreamCopy, smallFile, smallFileCopy);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------smallDemo----nioBufferCopy----------&quot;</span>);</span><br><span class="line">        benchmark(nioBufferCopy, smallFile, smallFileCopy);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------smallDemo----nioTransferCopy----------&quot;</span>);</span><br><span class="line">        benchmark(nioTransferCopy, smallFile, smallFileCopy);</span><br></pre></td></tr></table></figure><p>OutPut：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574087861716-d517a81a-2295-4467-9ec8-92b32bd6261d.png#align=left&amp;display=inline&amp;height=186&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=214&amp;originWidth=528&amp;size=14894&amp;status=done&amp;style=none&amp;width=459" alt="image.png" /><br /><a name="JNp7o"></a></p><h3 id="大文件实现代码"><a class="markdownIt-Anchor" href="#大文件实现代码"></a> 大文件实现代码：</h3><p>OutPut：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574089385350-9dd6b1c9-41b5-4f3e-be7e-b54f1b1c4105.png#align=left&amp;display=inline&amp;height=210&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=222&amp;originWidth=488&amp;size=15359&amp;status=done&amp;style=none&amp;width=461" alt="image.png" /><br />大文件暂不做处理了，类似，而且耗时久。<br /><a name="drPpR"></a></p><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论：</h3><ol><li>缓冲区对于IO的帮助是很大的</li><li>NIO相比传统IO差距并不大，不过相对来说NIO稍微好一点。（JDK1.4时推出的NIO，相比传统IO性能极佳，新版本的IO基层也用了NIO的方法，所以性能也不会太差）。<br /><a name="BnZ31"></a></li></ol><h1 id="selector简析"><a class="markdownIt-Anchor" href="#selector简析"></a> Selector简析</h1><p><a name="IGVFw"></a></p><h2 id="selector与channel"><a class="markdownIt-Anchor" href="#selector与channel"></a> Selector与Channel</h2><p>可以选择通道进行非阻塞式的数据传输，但是通道是否可操作却需要不停的询问，因此需要用Selector监听Channel。<br />在使用之前，要将Channel注册到Selector中，形成下图状态。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574088583984-c9464e1a-7ef5-4171-b2c6-312b52eb7edb.png#align=left&amp;display=inline&amp;height=245&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=303&amp;originWidth=649&amp;size=76821&amp;status=done&amp;style=none&amp;width=524" alt="image.png" /><br /><a name="7daY0"></a></p><h2 id="channel的状态变化"><a class="markdownIt-Anchor" href="#channel的状态变化"></a> Channel的状态变化</h2><p>CONNECT：与服务器建立连接<br />ACCEPT：服务器端接受了请求<br />READ：有可读取信息<br />WRITE：可写入状态<br />无状态：没有任何状态。<br />无论哪一种Channel都会处于一种状态<br /><a name="xZhQy"></a></p><h2 id="在selector上注册channel"><a class="markdownIt-Anchor" href="#在selector上注册channel"></a> 在Selector上注册Channel</h2><p>inserstOps()：注册的状态<br />readyOps()：显示可操作的状态<br />channel()：返回注册的channel对象<br />selector()：所注册的是哪个selector对象<br />attachment()：附加对象<br /><a name="Twc5L"></a></p><h2 id="使用selector选择channel"><a class="markdownIt-Anchor" href="#使用selector选择channel"></a> 使用Selector选择Channel</h2><p><a name="TQcgr"></a></p><h3 id="没有开启通道"><a class="markdownIt-Anchor" href="#没有开启通道"></a> 没有开启通道：</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574089183486-8675fee3-c414-4af5-90d4-b347e830476d.png#align=left&amp;display=inline&amp;height=208&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=285&amp;originWidth=604&amp;size=57493&amp;status=done&amp;style=none&amp;width=441" alt="image.png" /><br /><a name="XzNj0"></a></p><h3 id="开启了一个通道"><a class="markdownIt-Anchor" href="#开启了一个通道"></a> 开启了一个通道：</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574089212557-9e4a3540-bef0-44cd-8fb0-e53c0efd6194.png#align=left&amp;display=inline&amp;height=230&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=308&amp;originWidth=585&amp;size=60945&amp;status=done&amp;style=none&amp;width=437" alt="image.png" /><br />注意：处理完Channel需要手动重置Channel为等待状态<br /><a name="onmuA"></a></p><h3 id="开启了两个通道"><a class="markdownIt-Anchor" href="#开启了两个通道"></a> 开启了两个通道：</h3><p><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1574089346583-bc1d0263-dedc-4313-8458-db7c1f86502f.png#align=left&amp;display=inline&amp;height=229&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=307&amp;originWidth=590&amp;size=66071&amp;status=done&amp;style=none&amp;width=440" alt="image.png" /><br /><br /><br /><br /><br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nio非阻塞模型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nio非阻塞模型&quot;&gt;&lt;/a&gt; NIO非阻塞模型&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;3tuuc&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;nio概述&quot;&gt;&lt;a class=&quot;mark</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>基于BIO的多人聊天室</title>
    <link href="https://jie-blog.icu/posts/bio/"/>
    <id>https://jie-blog.icu/posts/bio/</id>
    <published>2020-09-13T09:59:42.000Z</published>
    <updated>2020-09-13T10:02:44.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于bio的多人聊天室"><a class="markdownIt-Anchor" href="#基于bio的多人聊天室"></a> 基于BIO的多人聊天室</h1><p><a name="TI8tI"></a></p><h1 id="bio编程模型概述"><a class="markdownIt-Anchor" href="#bio编程模型概述"></a> BIO编程模型概述</h1><p>Acceptor：接受客户的请求<br />Client：客户端发送的请求<br /><a name="DvYcq"></a></p><h2 id="问题引出"><a class="markdownIt-Anchor" href="#问题引出"></a> 问题引出：</h2><p>如果像前一个Socket和ServerSocket的模型一样设计<br />在Client发送请求的时候，Acceptor接受了以后，就不能再接受更多的请求了，就变成了自言自语模式了<br /><a name="PB9Nr"></a></p><h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法：</h2><p>因此引出了的Handler来处理请求，于是再发送请求，Acceptor就可以接受请求了。<br />形成模型如下图：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573913217517-fc2b0f48-0fd2-4f0e-a95c-2962f7f7d96d.png#align=left&amp;display=inline&amp;height=239&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=378&amp;originWidth=820&amp;size=190688&amp;status=done&amp;style=none&amp;width=519" alt="image.png" /><br />这样的模型即BIO传统模型<br /><a name="S4IW2"></a></p><h2 id="主要功能"><a class="markdownIt-Anchor" href="#主要功能"></a> 主要功能</h2><ol><li>基于BIO模型</li><li>支持多人同时在线</li><li>每个用户的发言都被转发给其他用户<br /><a name="fR4gE"></a></li></ol><h2 id="架构设计"><a class="markdownIt-Anchor" href="#架构设计"></a> 架构设计</h2><p>首先需要一个主线程来做Acceptor<br />其次需要另外一个线程来做Handler，来进行数据处理和数据据读写<br />每一个客户都要对应一个Handler<br />服务器端需要存储所有客户信息，才可以把消息广播给所有客户<br />客户端不能在输入的时候阻塞接收信息<br /><a name="6lULc"></a></p><h1 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h1><p><a name="1d93Y"></a></p><h2 id="客户端"><a class="markdownIt-Anchor" href="#客户端"></a> 客户端：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DEFAULT_IP=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT=<span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String QUIT=<span class="string">&quot;quit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line">    <span class="keyword">private</span> BufferedWriter writer;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(msg!=<span class="keyword">null</span>&amp;&amp;!socket.isOutputShutdown())&#123;</span><br><span class="line">            writer.write(msg+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receive</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!socket.isInputShutdown())&#123;</span><br><span class="line">            msg=reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isQuit</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端[&quot;</span>+socket.getPort()+<span class="string">&quot;]关闭&quot;</span>);</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket=<span class="keyword">new</span> Socket(DEFAULT_IP,DEFAULT_PORT);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端[&quot;</span>+DEFAULT_IP+<span class="string">&quot;]成功启动&quot;</span>);</span><br><span class="line">            writer=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream()));</span><br><span class="line">            reader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UserInputHander(<span class="keyword">this</span>)).start();</span><br><span class="line">            String msg=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((msg=receive())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="1I9Uj"></a></p><h3 id="线程部分与输出不同线程"><a class="markdownIt-Anchor" href="#线程部分与输出不同线程"></a> 线程部分（与输出不同线程）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputHander</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChatClient chatClient;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInputHander</span><span class="params">(ChatClient chatClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chatClient = chatClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String msg = reader.readLine();</span><br><span class="line">                chatClient.send(msg);</span><br><span class="line">                <span class="keyword">if</span> (chatClient.isQuit(msg)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="a53oS"></a></p><h3 id="主函数"><a class="markdownIt-Anchor" href="#主函数"></a> 主函数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.client;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatClient chatClient=<span class="keyword">new</span> ChatClient();</span><br><span class="line">        chatClient.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="fL4ML"></a></p><h2 id="服务器"><a class="markdownIt-Anchor" href="#服务器"></a> 服务器：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT=<span class="number">9999</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String QUIT=<span class="string">&quot;quit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Writer&gt; connectedClients;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        connectedClients=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addClient</span><span class="params">(Socket socket)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> port=socket.getPort();</span><br><span class="line">            BufferedWriter writer=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream()));</span><br><span class="line">            connectedClients.put(port,writer);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端[&quot;</span>+port+<span class="string">&quot;]已连接到服务器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeClient</span><span class="params">(Socket socket)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(socket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> port=socket.getPort();</span><br><span class="line">            <span class="keyword">if</span> (connectedClients.containsKey(port)) &#123;</span><br><span class="line">                connectedClients.get(port).close();</span><br><span class="line">                connectedClients.remove(port);</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端[&quot;</span> + port + <span class="string">&quot;]已断开连接&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">forwardMessage</span><span class="params">(Socket socket,String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (socket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer port : connectedClients.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (port != socket.getPort()) &#123;</span><br><span class="line">                    Writer writer = connectedClients.get(port);</span><br><span class="line">                    writer.write(msg);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">shutdownClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (serverSocket!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            serverSocket.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已关闭&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isQuit</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QUIT.equalsIgnoreCase(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket=<span class="keyword">new</span> ServerSocket(DEFAULT_PORT);</span><br><span class="line">            System.out.println(<span class="string">&quot;启动服务器[&quot;</span>+DEFAULT_PORT+<span class="string">&quot;]成功&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket socket=serverSocket.accept();</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> ChatHander(socket,<span class="keyword">this</span>)).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                shutdownClient();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="0rRIH"></a></p><h3 id="线程部份处理用户信息"><a class="markdownIt-Anchor" href="#线程部份处理用户信息"></a> 线程部份（处理用户信息）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatHander</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChatServer chatServer;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatHander</span><span class="params">(Socket socket,ChatServer chatServer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chatServer=chatServer;</span><br><span class="line">        <span class="keyword">this</span>.socket=socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            chatServer.addClient(socket);</span><br><span class="line">            reader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            String msg=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> port=socket.getPort();</span><br><span class="line">            <span class="keyword">while</span> ((msg=reader.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chatServer.isQuit(msg)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String nwmsg = <span class="string">&quot;客户端[&quot;</span> + port + <span class="string">&quot;]：&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                System.out.print(nwmsg);</span><br><span class="line">                chatServer.forwardMessage(socket, nwmsg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    chatServer.removeClient(socket);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ZZ5pm"></a></p><h3 id="主函数-2"><a class="markdownIt-Anchor" href="#主函数-2"></a> 主函数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.server;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatServer chatServer=<span class="keyword">new</span> ChatServer();</span><br><span class="line">        chatServer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="0STS6"></a></p><h1 id="代码的效果"><a class="markdownIt-Anchor" href="#代码的效果"></a> 代码的效果</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573928918359-0d874587-6880-47d2-82c3-a4e51f1950fa.png#align=left&amp;display=inline&amp;height=540&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1080&amp;originWidth=1920&amp;size=156815&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /><br /><a name="nEpgz"></a></p><h1 id="四-伪异步io编程"><a class="markdownIt-Anchor" href="#四-伪异步io编程"></a> 四、伪异步IO编程</h1><p>随着客户端增加和退出，会产生线程的调度和资源的浪费，回忆线程池的知识，这里引入线程池的做法来解决资源的问题。<br /><a name="Ok0DU"></a></p><h2 id="功能建模"><a class="markdownIt-Anchor" href="#功能建模"></a> 功能建模：</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573929498513-5b2efca0-6791-4aaf-8b51-84be4955e959.png#align=left&amp;display=inline&amp;height=281&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=400&amp;originWidth=837&amp;size=143099&amp;status=done&amp;style=none&amp;width=587" alt="image.png" /><br />如果Client4用户想要加入群聊时，线程池却没有空余线程，Client则等待其他用户退出时才可以加入。<br /><a name="sr9tf"></a></p><h2 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现：</h2><p>这里我只对服务器端进行修改，因为客户端的资源浪费少之又少，就不做阐述了。<br />在ChatServer中增加属性：<br /><code>private ExecutorService executorService;</code><br />修改构造方法：<br />设置5个线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        executorService= Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        connectedClients=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改start方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket=<span class="keyword">new</span> ServerSocket(DEFAULT_PORT);</span><br><span class="line">            System.out.println(<span class="string">&quot;启动服务器[&quot;</span>+DEFAULT_PORT+<span class="string">&quot;]成功&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Socket socket=serverSocket.accept();</span><br><span class="line">                executorService.execute(<span class="keyword">new</span> ChatHander(socket,<span class="keyword">this</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                shutdownClient();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样我们就实现了简单的BIO的多人聊天室。<br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于bio的多人聊天室&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基于bio的多人聊天室&quot;&gt;&lt;/a&gt; 基于BIO的多人聊天室&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;TI8tI&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;bio编程模型概述&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>Socket</title>
    <link href="https://jie-blog.icu/posts/socket/"/>
    <id>https://jie-blog.icu/posts/socket/</id>
    <published>2020-09-13T09:55:46.000Z</published>
    <updated>2020-09-13T10:00:40.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="socket"><a class="markdownIt-Anchor" href="#socket"></a> Socket</h1><p><a name="TBx7j"></a></p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p><a name="raXSr"></a></p><h2 id="socket也是一种数据源"><a class="markdownIt-Anchor" href="#socket也是一种数据源"></a> Socket也是一种数据源</h2><p>数据源&lt;—IO流—&gt;应用<br /><a name="tC0Wh"></a></p><h2 id="socket是网络通信的端点"><a class="markdownIt-Anchor" href="#socket是网络通信的端点"></a> Socket是网络通信的端点</h2><p>（通过IP地址和端口号绑定）<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573564053160-3e3bb3b2-e12f-4a75-b36f-7916ab3e1746.png#align=left&amp;display=inline&amp;height=224&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=301&amp;originWidth=571&amp;size=52074&amp;status=done&amp;style=none&amp;width=424" alt="image.png" /><br /><a name="PDtFj"></a></p><h2 id="unix中的socket"><a class="markdownIt-Anchor" href="#unix中的socket"></a> Unix中的Socket</h2><p><a name="CY0mv"></a></p><h3 id="unix系统中-一切都是文件"><a class="markdownIt-Anchor" href="#unix系统中-一切都是文件"></a> Unix系统中 一切都是文件。</h3><p>因为Scoket是网络通信的端点，可以进行数据的输入输入，所以Socket也可以看成文件<br /><a name="UcMF0"></a></p><h3 id="文件描述符是已打开文件的索引"><a class="markdownIt-Anchor" href="#文件描述符是已打开文件的索引"></a> 文件描述符是已打开文件的索引</h3><p>所有被打开的文件都会赋予一个文件描述符，形成文件描述符表<br /><a name="TXf4r"></a></p><h3 id="每个进程都会维护一个文件描述符表"><a class="markdownIt-Anchor" href="#每个进程都会维护一个文件描述符表"></a> 每个进程都会维护一个文件描述符表</h3><p>可能不同的文件描述符值指向同一个文件（流）<br /><a name="SQmEA"></a></p><h2 id="通过socket发送数据"><a class="markdownIt-Anchor" href="#通过socket发送数据"></a> 通过Socket发送数据</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573564550219-0cb31cfc-2f7e-4af2-9ea5-5d777cd4a6f1.png#align=left&amp;display=inline&amp;height=233&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=327&amp;originWidth=619&amp;size=99893&amp;status=done&amp;style=none&amp;width=442" alt="image.png" /><br />1、创建socket<br />2、告诉驱动程序指定IP地址和端口号绑定到Scoket<br />3、消息发送到Socket<br />4、驱动程序收到Socket的精确定位数据<br /><a name="26AqH"></a></p><h2 id="通过socket接收数据"><a class="markdownIt-Anchor" href="#通过socket接收数据"></a> 通过Socket接收数据</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573564657739-2b6ae20a-ddb6-4ee7-9f4d-d3431642ddab.png#align=left&amp;display=inline&amp;height=216&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=341&amp;originWidth=662&amp;size=100385&amp;status=done&amp;style=none&amp;width=419" alt="image.png" /><br />1、创建Socket<br />2、绑定IP、端口号<br />3、信息传输给Socket<br />4、读取数据<br />ServerSocker：服务器端在网络通信上的端点<br />Socket：客户端在网络通信上的端点<br /><a name="UJtet"></a></p><h1 id="建立serversocket连接"><a class="markdownIt-Anchor" href="#建立serversocket连接"></a> 建立ServerSocket连接</h1><p><a name="xxCbO"></a></p><h2 id="连接过程如下"><a class="markdownIt-Anchor" href="#连接过程如下"></a> 连接过程如下：</h2><ol><li>服务器端先调用bind绑定端口</li><li>然后进入accept阻塞状态等待客户端连接</li><li>客户端连接客户端，传入主机地址和端口号</li><li>accept接收成功返回客户端的socket</li><li>通过IO流进行信息传输</li><li>通过close关闭服务器端口</li><li>关闭服务器端口</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573741462823-16813244-7f11-40c8-a1f3-5c4494c3255a.png#align=left&amp;display=inline&amp;height=248&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=385&amp;originWidth=922&amp;size=118508&amp;status=done&amp;style=none&amp;width=595" alt="image.png" /><br /><a name="dHwVr"></a></p><h2 id="简单代码实例如下"><a class="markdownIt-Anchor" href="#简单代码实例如下"></a> 简单代码实例如下：</h2><p>服务器端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">9999</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(DEFAULT_PORT);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器[&quot;</span> + DEFAULT_PORT + <span class="string">&quot;]开启，正在等待客户端链接&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端[&quot;</span> + socket.getPort() + <span class="string">&quot;]已连接到服务器&quot;</span>);</span><br><span class="line">                reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">                String str =<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span> ((str =reader.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;quit&quot;</span>.equalsIgnoreCase(str)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;客户端&quot;</span> + socket.getPort() + <span class="string">&quot;已断开连接&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端[&quot;</span> + socket.getPort() + <span class="string">&quot;]：&quot;</span> + str);</span><br><span class="line">                    writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream()));</span><br><span class="line">                    writer.write(<span class="string">&quot;服务器回复信息：&quot;</span> + str + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;服务器已经关闭&quot;</span>);</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line">public class Service &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final <span class="keyword">int</span> DEFAULT_PORT=<span class="number">9999</span>;</span><br><span class="line">        final String DEFAULT_HOST=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">        boolean flag=<span class="literal">true</span>;</span><br><span class="line">        Socket socket=null;</span><br><span class="line">        BufferedReader reader=null;</span><br><span class="line">        BufferedWriter writer=null;</span><br><span class="line">        try &#123;</span><br><span class="line">            socket=<span class="built_in">new</span> Socket(DEFAULT_HOST,DEFAULT_PORT);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;客户端已开启&quot;</span>);</span><br><span class="line">            reader=<span class="built_in">new</span> BufferedReader(<span class="built_in">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            writer=<span class="built_in">new</span> BufferedWriter(<span class="built_in">new</span> OutputStreamWriter(socket.getOutputStream()));</span><br><span class="line">            String str=null;</span><br><span class="line">            BufferedReader bufferedReader=<span class="built_in">new</span> BufferedReader(<span class="built_in">new</span> InputStreamReader(System.in));</span><br><span class="line">            while (flag) &#123;</span><br><span class="line">                str = bufferedReader.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;quit&quot;</span>.equalsIgnoreCase(str)) &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    writer.write(str);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                writer.write(str + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                writer.flush();</span><br><span class="line">                System.out.<span class="built_in">println</span>(reader.readLine());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">if</span> (socket != null) &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">&quot;Service已关闭&quot;</span>);</span><br><span class="line">                    socket.<span class="built_in">close</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (writer != null) &#123;</span><br><span class="line">                    writer.<span class="built_in">close</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (reader != null) &#123;</span><br><span class="line">                    reader.<span class="built_in">close</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实验结果：<br />客户端：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573741622842-b880ce39-b4b8-4058-993f-2b0de419a407.png#align=left&amp;display=inline&amp;height=224&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=194&amp;originWidth=295&amp;size=11643&amp;status=done&amp;style=none&amp;width=341" alt="image.png" /><br />服务器端：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573741636817-4ac38548-9434-4547-8b57-bdce94dabe1f.png#align=left&amp;display=inline&amp;height=134&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=150&amp;originWidth=377&amp;size=17453&amp;status=done&amp;style=none&amp;width=338" alt="image.png" /><br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;socket&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#socket&quot;&gt;&lt;/a&gt; Socket&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;TBx7j&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-An</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>网络层的简单解析与协议概述</title>
    <link href="https://jie-blog.icu/posts/net/"/>
    <id>https://jie-blog.icu/posts/net/</id>
    <published>2020-09-13T09:53:18.000Z</published>
    <updated>2020-09-13T10:01:14.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络层的简单解析与协议概述"><a class="markdownIt-Anchor" href="#网络层的简单解析与协议概述"></a> 网络层的简单解析与协议概述</h1><p><a name="S0gbQ"></a></p><h1 id="url解析与构造"><a class="markdownIt-Anchor" href="#url解析与构造"></a> URL解析与构造</h1><p><a href="http://xn--www-ej9d3pr6j74mm3vuf4d8dcyu1e.baidu.com">我们在互联网输入www.baidu.com</a><br />这个简短的信息其实全称是http://www.baidu.com:80/search?q=test&amp;safe=strict<br />其中http为协议<br />www.baidu.com为域名/IP地址<br />80为端口<br />search为路径<br />q=test&amp;safe=strict为参数<br />通过这些浏览器才能知道我们要干什么。<br /><a name="VxkFS"></a></p><h1 id="dns解析"><a class="markdownIt-Anchor" href="#dns解析"></a> DNS解析</h1><p>计算机识别二进制数字串，因此IP地址的格式像192.168.111.111的形式，但是用户无法记住这么多种数组串，而且这对数字串也很难记忆，于是浏览器采用域名的方式给予用户记忆。<br />但是计算机却只识别IP地址，所以必然要进行转换如下：<br />www.google.com-&gt;172.217.161.164<br />那么又如何解析这个域名呢？<br />首先其实完整的域名为www.google.com.root<br />但因为root是所有域名的统一样式，所以普遍不写出。<br /><a name="MfvjD"></a></p><h2 id="域名层级"><a class="markdownIt-Anchor" href="#域名层级"></a> 域名层级</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573485344622-9bfbe066-c360-4833-80b3-b1412935714e.png#align=left&amp;display=inline&amp;height=224&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=334&amp;originWidth=720&amp;size=97845&amp;status=done&amp;style=none&amp;width=483" alt="image.png" /><br />如图所示，域名的层级通过根域名、顶级域名、次级域名、主机名的方式实现了索引结构，当需要查找的时候可以通过这种递进的方式快速查找。<br /><a name="h4WyB"></a></p><h1 id="dns查询方式"><a class="markdownIt-Anchor" href="#dns查询方式"></a> DNS查询方式</h1><p><a name="Bh9wV"></a></p><h2 id="递归查询"><a class="markdownIt-Anchor" href="#递归查询"></a> 递归查询</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573485685291-3bf7c103-b375-44eb-82db-82fb5b8c39ed.png#align=left&amp;display=inline&amp;height=307&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=383&amp;originWidth=633&amp;size=74412&amp;status=done&amp;style=none&amp;width=507" alt="image.png" /><br /><a name="05vDN"></a></p><h2 id="迭代查询"><a class="markdownIt-Anchor" href="#迭代查询"></a> 迭代查询</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573485697038-3479a92f-e92b-4e96-9e80-9e84b758936b.png#align=left&amp;display=inline&amp;height=297&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=373&amp;originWidth=642&amp;size=93999&amp;status=done&amp;style=none&amp;width=512" alt="image.png" /><br /><a name="o9qX9"></a></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>其中，不管是迭代查询还是递归查询，都会在域名服务器中存储缓存，方便下一次查询。<br /><a name="2OFWR"></a></p><h1 id="网络模型"><a class="markdownIt-Anchor" href="#网络模型"></a> 网络模型</h1><p><a name="4o1mS"></a></p><h2 id="参考模型"><a class="markdownIt-Anchor" href="#参考模型"></a> 参考模型</h2><p>在计算机网络中，有好几种参考模型，不过这里我们只讨论实际应用的参考模型，如下：<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573485856149-f67fd329-19f7-473a-a5f7-0ecb34f2a604.png#align=left&amp;display=inline&amp;height=313&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=386&amp;originWidth=221&amp;size=54350&amp;status=done&amp;style=none&amp;width=179" alt="image.png" /><br /><a name="ixeSN"></a></p><h3 id="每层解释"><a class="markdownIt-Anchor" href="#每层解释"></a> 每层解释</h3><p><a name="tjag7"></a></p><h4 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h4><p>用户所接触到的应用，对于不同类型的数据处理方法和格式。<br /><a name="oFQeh"></a></p><h4 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h4><p>端口到端口的连接、数据传输<br /><a name="mQ6pI"></a></p><h4 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h4><p>主机到主机的联系<br /><a name="t0t08"></a></p><h4 id="链路层"><a class="markdownIt-Anchor" href="#链路层"></a> 链路层</h4><p>网卡和网卡的信息传输<br /><a name="GB5Qf"></a></p><h4 id="实体层"><a class="markdownIt-Anchor" href="#实体层"></a> 实体层</h4><p>物理连接<br /><a name="ZuTvY"></a></p><h2 id="为什么要分层"><a class="markdownIt-Anchor" href="#为什么要分层"></a> 为什么要分层</h2><p>因为经过分层后，上一层只需要依赖于下一层，不需要跨层考虑，层层之间的影响降低。<br /><a name="8WaGh"></a></p><h2 id="每一层的例子"><a class="markdownIt-Anchor" href="#每一层的例子"></a> 每一层的例子</h2><p><a name="eS4Y5"></a></p><h3 id="应用层-2"><a class="markdownIt-Anchor" href="#应用层-2"></a> 应用层</h3><p>HTTP FTP(文件传输) SMTP<br /><a name="77yhP"></a></p><h3 id="传输层-2"><a class="markdownIt-Anchor" href="#传输层-2"></a> 传输层</h3><p>TCP UDP<br /><a name="M4XAc"></a></p><h3 id="网络层-2"><a class="markdownIt-Anchor" href="#网络层-2"></a> 网络层</h3><p>IP   <br /><a name="FoqqK"></a></p><h3 id="链路层-2"><a class="markdownIt-Anchor" href="#链路层-2"></a> 链路层</h3><p>Ethernet<br /><a name="xD0Nz"></a></p><h3 id="实体层-2"><a class="markdownIt-Anchor" href="#实体层-2"></a> 实体层</h3><p>电信号<br /><a name="4C60k"></a></p><h2 id="连接一切"><a class="markdownIt-Anchor" href="#连接一切"></a> 连接一切</h2><p><a name="ExEkV"></a></p><h3 id="实体层-3"><a class="markdownIt-Anchor" href="#实体层-3"></a> 实体层</h3><p>实现物理连接，传播01的电信号<br /><a name="nk6bu"></a></p><h3 id="链路层-3"><a class="markdownIt-Anchor" href="#链路层-3"></a> 链路层</h3><p>传播网卡与网卡之间的连接（MAC地址），不过MAC地址要通过广播方式传播给子网中的所有网卡，如果MAC地址匹配才收下信息，显然这个方式如果当数量增多的时候，将会大幅度降低效率。<br /><a name="iboO8"></a></p><h3 id="网络层-3"><a class="markdownIt-Anchor" href="#网络层-3"></a> 网络层</h3><p>不同于MAC地址传播，IP地址更为机智，它会识别IP地址来自于哪个子网路、哪个位置<br /><a name="PZOYT"></a></p><h3 id="传输层-3"><a class="markdownIt-Anchor" href="#传输层-3"></a> 传输层：</h3><p>主机中会有好多端口，会通过TCP、UDP来匹配端口<br /><a name="O3puu"></a></p><h3 id="应用层-3"><a class="markdownIt-Anchor" href="#应用层-3"></a> 应用层：</h3><p>通过协议传递数据。<br /><a name="jmy1U"></a></p><h1 id="网络各个层的数据包格式"><a class="markdownIt-Anchor" href="#网络各个层的数据包格式"></a> 网络各个层的数据包格式</h1><p>如图<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573487825385-62216904-c606-4624-ac28-83e650b2d136.png#align=left&amp;display=inline&amp;height=274&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=400&amp;originWidth=855&amp;size=147603&amp;status=done&amp;style=none&amp;width=586" alt="image.png" /><br /><a name="4Dgnv"></a></p><h2 id="链路层-4"><a class="markdownIt-Anchor" href="#链路层-4"></a> 链路层</h2><p>链路层将应用层的电信号组成不同的数据包，每一个数据包即一帧（最大1518个字节）。<br />一帧由一个Ethernet标头和Ethernet数据组成。<br />标头主要包含MAC地址，即要传送到哪张网卡中，标头占18个字节。<br />因此，数据不能超过1500个字节。<br /><a name="YvxUB"></a></p><h2 id="网络层-4"><a class="markdownIt-Anchor" href="#网络层-4"></a> 网络层</h2><p>网络层依赖于链路层，因此我们不能更改链路层的标头，所以我们只能把IP地址存储到Ethernet数据中，因此Ethernet数据又被分为IP标头和IP数据。<br />IP地址包含目的IP地址和数据长度。<br /><a name="Yf33t"></a></p><h2 id="传输层-4"><a class="markdownIt-Anchor" href="#传输层-4"></a> 传输层</h2><p>同样，传输层不能改变网络层、链路层标头，我们只能在IP数据中再划分，因此我们将IP数据划分为TCP/UDP标头和TCP/UDP数据。<br />UDP标头：端口信息<br />TCP标头：端口信息+其他数据<br /><a name="IeabS"></a></p><h2 id="应用层-4"><a class="markdownIt-Anchor" href="#应用层-4"></a> 应用层</h2><p>同理，不能修改前几层标头，由于协议较多，故暂不做拆分。<br /><a name="EtDht"></a></p><h2 id="一个帧不够怎么办"><a class="markdownIt-Anchor" href="#一个帧不够怎么办"></a> 一个帧不够怎么办</h2><p>可以把一个数据分为好几个帧/数据包传输出去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络层的简单解析与协议概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#网络层的简单解析与协议概述&quot;&gt;&lt;/a&gt; 网络层的简单解析与协议概述&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;S0gbQ&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;url解析与</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://jie-blog.icu/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="计算机网络" scheme="https://jie-blog.icu/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Stream数据流</title>
    <link href="https://jie-blog.icu/posts/stream/"/>
    <id>https://jie-blog.icu/posts/stream/</id>
    <published>2020-09-13T09:51:48.000Z</published>
    <updated>2020-09-13T09:55:26.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stream数据流"><a class="markdownIt-Anchor" href="#stream数据流"></a> Stream数据流</h1><p><a name="aGTge"></a></p><h1 id="stream基本操作"><a class="markdownIt-Anchor" href="#stream基本操作"></a> Stream基本操作：</h1><p>Collection中提供了此接口的实例化方法：<code>default Stream&lt;E&gt; stream()</code><br />Stream的主要功能是对数据进行分析处理，尤其是集合中数据的分析操作。<br /><a name="CMcpY"></a></p><h2 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例：</h2><p><a name="AGjcl"></a></p><h3 id="显示元素个数"><a class="markdownIt-Anchor" href="#显示元素个数"></a> 显示元素个数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Word&quot;</span>, <span class="string">&quot;Happy&quot;</span>, <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Has&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//元素个数</span></span><br><span class="line">        System.out.println(stream.count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>outPut：<br />5<br /><a name="iRRxz"></a></p><h3 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> filter:</h3><p><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</code><br />采用了断言式的函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Word&quot;</span>, <span class="string">&quot;Happy&quot;</span>, <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Has&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//有几个是含有字母H的</span></span><br><span class="line">        System.out.println(stream.filter((ele) -&gt; ele.toUpperCase().contains(<span class="string">&quot;H&quot;</span>)).count());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>outPut：<br />4<br /><a name="t71Cs"></a></p><h3 id="数据采集"><a class="markdownIt-Anchor" href="#数据采集"></a> 数据采集：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Word&quot;</span>, <span class="string">&quot;Happy&quot;</span>, <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Has&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//将满足条件的数据收集变为List集合</span></span><br><span class="line">        List&lt;String&gt; list1=stream.filter((ele) -&gt; ele.toUpperCase().contains(<span class="string">&quot;H&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>outPut：<br />[Hello, Happy, Hi, Has]<br /><a name="4DVU5"></a></p><h3 id="分页处理"><a class="markdownIt-Anchor" href="#分页处理"></a> 分页处理：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Word&quot;</span>, <span class="string">&quot;Happy&quot;</span>, <span class="string">&quot;Hi&quot;</span>, <span class="string">&quot;Has&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//将满足条件的数据收集变为List集合</span></span><br><span class="line">        <span class="comment">//限制最多3个，跳过一个</span></span><br><span class="line">        List&lt;String&gt; list1=stream.filter((ele) -&gt; ele.toUpperCase().contains(<span class="string">&quot;H&quot;</span>)).limit(<span class="number">3</span>).skip(<span class="number">1</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="ciTvl"></a></p><h1 id="mapreduce"><a class="markdownIt-Anchor" href="#mapreduce"></a> MapReduce：</h1><p>分为两部分，Map处理部分，Reduce分析部分。<br /><a name="1brA5"></a></p><h2 id="代码结构大致如下"><a class="markdownIt-Anchor" href="#代码结构大致如下"></a> 代码结构大致如下：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    People(String name,<span class="keyword">int</span> price)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.price=price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;People&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> People(<span class="string">&quot;张二三&quot;</span>,<span class="number">10000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> People(<span class="string">&quot;李二四&quot;</span>,<span class="number">20000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> People(<span class="string">&quot;王二五&quot;</span>,<span class="number">30000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> People(<span class="string">&quot;赵二六&quot;</span>,<span class="number">40000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> People(<span class="string">&quot;王二麻子&quot;</span>,<span class="number">50000</span>));</span><br><span class="line">        LongSummaryStatistics longSummaryStatistics = list.stream().filter((ele) -&gt; ele.getName().contains(<span class="string">&quot;二&quot;</span>)).mapToLong((price) -&gt; price.getPrice() * price.getPrice()).summaryStatistics();</span><br><span class="line">        System.out.println(longSummaryStatistics.getMax());</span><br><span class="line">        System.out.println(longSummaryStatistics.getAverage());</span><br><span class="line">        System.out.println(longSummaryStatistics.getCount());</span><br><span class="line">        System.out.println(longSummaryStatistics.getMin());</span><br><span class="line">        System.out.println(longSummaryStatistics.getSum());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些大数据只是JDK本身提供的支持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;stream数据流&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stream数据流&quot;&gt;&lt;/a&gt; Stream数据流&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;aGTge&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;stream基本操作&quot;&gt;&lt;a cla</summary>
      
    
    
    
    <category term="io" scheme="https://jie-blog.icu/categories/io/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>IO数据流</title>
    <link href="https://jie-blog.icu/posts/io/"/>
    <id>https://jie-blog.icu/posts/io/</id>
    <published>2020-09-13T09:47:57.000Z</published>
    <updated>2020-09-13T10:10:05.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="io数据流"><a class="markdownIt-Anchor" href="#io数据流"></a> IO数据流</h1><p>通信的基础是IO模型<br />数据源------数据流------&gt;应用<br />数据源&lt;-----数据流-------应用<br /><a name="F0GTa"></a></p><h1 id="数据流"><a class="markdownIt-Anchor" href="#数据流"></a> 数据流</h1><p><a name="kPmAv"></a></p><h2 id="io流总括图"><a class="markdownIt-Anchor" href="#io流总括图"></a> IO流总括图</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1599531920550-b8aee814-0360-41b1-bf46-777666550cad.png#align=left&amp;display=inline&amp;height=304&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=372&amp;originWidth=623&amp;size=23962&amp;status=done&amp;style=none&amp;width=509" alt="image.png" /><br /><a name="tThXv"></a></p><h3 id="字符流更复杂扩展"><a class="markdownIt-Anchor" href="#字符流更复杂扩展"></a> 字符流更复杂扩展</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1599531973906-fc5300f8-42ce-4aee-88e1-9a276bbac5e6.png#align=left&amp;display=inline&amp;height=298&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=329&amp;originWidth=609&amp;size=16891&amp;status=done&amp;style=none&amp;width=552" alt="image.png" /><br />Buffer~：设置缓冲区，一次性多读取数据，省去了源文件的多次读取<br />Filter~：对字符流额外操作<br />InputStream~：两种流的转换，因为存储方式为逐字节存储，所以要将字节转换为字符。<br /><a name="hXOIc"></a></p><h3 id="字节流更复杂扩展"><a class="markdownIt-Anchor" href="#字节流更复杂扩展"></a> 字节流更复杂扩展</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1599531991642-b14160b8-4592-4bad-be9b-e8cc0ca435bc.png#align=left&amp;display=inline&amp;height=273&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=320&amp;originWidth=737&amp;size=16483&amp;status=done&amp;style=none&amp;width=629" alt="image.png" /><br />Buffered~：设置缓冲区，一次性多读取数据，省去了源文件的多次读取<br />Data~：对基本类型变量输入输出<br /><a name="Ajqbr"></a></p><h1 id="装饰器模式"><a class="markdownIt-Anchor" href="#装饰器模式"></a> 装饰器模式</h1><p>例如BufferedInputStream：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Buffer size &lt;= 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buf = <span class="keyword">new</span> <span class="keyword">byte</span>[size];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>显然，构造方法接受一个InputStream对象结构如下：<br /><br /><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/485026/1573563250335-2d53efb9-c1dd-4305-a39d-e66c79748ea8.png#align=left&amp;display=inline&amp;height=114&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=181&amp;originWidth=377&amp;size=11796&amp;status=done&amp;style=none&amp;width=238" alt="image.png" /><br />InputStream可以向上转型为各种子类，BufferedInputStream这样就不仅可以拥有自己的属性，还可以拥有加入的InputStream的属性。<br />装饰器不更改基本属性还可以叠加多个装饰器模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;io数据流&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#io数据流&quot;&gt;&lt;/a&gt; IO数据流&lt;/h1&gt;
&lt;p&gt;通信的基础是IO模型&lt;br /&gt;数据源------数据流------&amp;gt;应用&lt;br /&gt;数据源&amp;lt;-----数据流--</summary>
      
    
    
    
    <category term="网络编程" scheme="https://jie-blog.icu/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java基础" scheme="https://jie-blog.icu/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="io" scheme="https://jie-blog.icu/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>Maven的基本概念</title>
    <link href="https://jie-blog.icu/posts/maven-core/"/>
    <id>https://jie-blog.icu/posts/maven-core/</id>
    <published>2020-09-08T02:21:15.000Z</published>
    <updated>2020-09-13T09:48:28.750Z</updated>
    
    <content type="html"><![CDATA[<p>Maven 是一个项目管理工具。它负责管理项目开发过程中的几乎所有的东西。<br />版本、构建、输出物管理、依赖关系、文档和构建结果、项目关系、移植性管理。<br /><a name="yso2z"></a></p><h1 id="maven的目录说明"><a class="markdownIt-Anchor" href="#maven的目录说明"></a> Maven的目录说明</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1599531237461-032fc5d3-dbba-4d46-a894-f453d487a503.png#align=left&amp;display=inline&amp;height=640&amp;margin=%5Bobject%20Object%5D&amp;originHeight=640&amp;originWidth=1296&amp;size=0&amp;status=done&amp;style=none&amp;width=1296" alt="" /><br /><a name="bMw4Y"></a></p><h1 id="maven的生命周期"><a class="markdownIt-Anchor" href="#maven的生命周期"></a> Maven的生命周期</h1><ul><li>clear：移除上一次构建生成的文件</li><li>compile：编辑项目的源代码</li><li>test：使用单元测试框架进行测试，测试代码不会被打包或者部署</li><li>package：接受编译好的代码，打包成可发布的格式</li><li>install：将包安装到maven本地仓库，供本地其他maven项目使用</li><li>deploy：将最终的包发布到远程仓库，供其他开发人员和maven项目使用。</li><li>site：生成项目的站点文档<br /><a name="dLTPi"></a></li></ul><h1 id="maven的标准工程结构"><a class="markdownIt-Anchor" href="#maven的标准工程结构"></a> Maven的标准工程结构</h1><p>MavenProjectRoot(项目根目录)<br />   |----src<br />   |     |----main<br />   |     |         |----java ——存放项目的.java文件<br />   |     |         |----resources ——存放项目资源文件，如spring, hibernate配置文件<br />   |     |----test<br />   |     |         |----java ——存放所有测试.java文件，如JUnit测试类<br />   |     |         |----resources ——存放项目资源文件，如spring, hibernate配置文件<br />   |----target ——项目输出位置<br />   |----pom.xml ----用于标识该项目是一个Maven项目<br /><a name="Vh9y2"></a></p><h1 id="maven的版本规范"><a class="markdownIt-Anchor" href="#maven的版本规范"></a> Maven的版本规范</h1><p>maven使用如下几个要素来唯一定位某一个输出物：<br /><a name="ksob8"></a></p><h2 id="groudid"><a class="markdownIt-Anchor" href="#groudid"></a> groudId</h2><p>团体、组织的标识符。团体标识的约定是，它以创建这个项目的组织名称的逆向域名(reverse domain name)开头。一般对应着JAVA的包的结构。例如org.apache<br /><a name="X7P1S"></a></p><h2 id="artifactid"><a class="markdownIt-Anchor" href="#artifactid"></a> artifactId</h2><p>单独项目的唯一标识符。比如我们的tomcat, commons等。不要在artifactId中包含点号(.)。<br /><a name="lV1ma"></a></p><h2 id="version"><a class="markdownIt-Anchor" href="#version"></a> version</h2><p>一个项目的特定版本。<br /><a name="HbrC2"></a></p><h2 id="packaging"><a class="markdownIt-Anchor" href="#packaging"></a> packaging</h2><p>项目的类型，默认是jar，描述了项目打包后的输出。类型为jar的项目产生一个JAR文件，类型为war的项目产生一个web应用。<br /><a name="Pl1xl"></a></p><h1 id="maven仓库与本地仓储配置"><a class="markdownIt-Anchor" href="#maven仓库与本地仓储配置"></a> maven仓库与本地仓储配置</h1><p>根据Maven坐标定义每个构建在仓库中唯一存储路径，大致为：groupId/artifactId/version/artifactId-version.packaging。<br />分类：本地仓库（每个用户只有一个本地仓库，默认是在<sub>/.m2/repository/，</sub>代表的是用户目录），<br />远程仓库（中央仓库：<a href="http://search.maven.org/%E3%80%81%E7%A7%81%E6%9C%8D%EF%BC%89">http://search.maven.org/、私服）</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397370-1a4ea706-1662-4436-b7f8-f9aa8431f1ec.png#align=left&amp;display=inline&amp;height=243&amp;margin=%5Bobject%20Object%5D&amp;originHeight=243&amp;originWidth=669&amp;size=0&amp;status=done&amp;style=none&amp;width=669" alt="" /><br />从Maven中心仓库下载到本地的jar包的默认存放在”<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>u</mi><mi>s</mi><mi>e</mi><mi>r</mi><mi mathvariant="normal">.</mi><mi>h</mi><mi>o</mi><mi>m</mi><mi>e</mi></mrow><mi mathvariant="normal">/</mi><mi mathvariant="normal">.</mi><mi>m</mi><mn>2</mn><mi mathvariant="normal">/</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi><mi mathvariant="normal">”</mi><mi mathvariant="normal">中</mi><mi mathvariant="normal">，</mi></mrow><annotation encoding="application/x-tex">{user.home}/.m2/repository”中，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">.</span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span><span class="mord">/</span><span class="mord">.</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">”</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">，</span></span></span></span>{user.home}表示当前登录系统的用户目录(如&quot;C:\Users\gacl&quot;)<br />自定义jar包存放位置（本地仓库）：E盘创建文件加”repository”，修改apache-maven\conf目录下的settings.xml文件，添加<localRepository>xxxx</localRepository><br /><a name="gBHje"></a></p><h2 id="下载顺序"><a class="markdownIt-Anchor" href="#下载顺序"></a> 下载顺序</h2><p>当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：</p><ul><li><strong>步骤 1</strong> － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。</li><li><strong>步骤 2</strong> － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。</li><li><strong>步骤 3</strong> － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。</li><li><strong>步骤 4</strong> － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。<br /><a name="JZQGy"></a></li></ul><h1 id="maven核心指令"><a class="markdownIt-Anchor" href="#maven核心指令"></a> Maven核心指令</h1><p><a name="3dRc6"></a></p><h2 id="clean"><a class="markdownIt-Anchor" href="#clean"></a> clean</h2><p>clean的主要目的是清空项目工作中产生的一些中间件，比如上次打的jar包，临时文件等。该生命周期主要用于在build生命周期之前做清理工作。<br />clean生命周期包含三个阶段：</p><table><thead><tr><th>阶段</th><th>处理</th><th>描述</th></tr></thead><tbody><tr><td><strong>pre-clean</strong></td><td>预清理</td><td>执行一些需要在clean之前完成的工作</td></tr><tr><td><strong>clean</strong></td><td>清理</td><td>移除所有上一次构建生成的文件</td></tr><tr><td><strong>post-clean</strong></td><td>后清理</td><td>执行一些需要在clean之后立刻完成的工作</td></tr></tbody></table><p>在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，因此maven clean命令会执行pre-clean和clean阶段，而mvn post-clean命令会执行clean生命周期的三个阶段：pre-clean, clean, post-clean。<br /><a name="rm67X"></a></p><h2 id="default-build"><a class="markdownIt-Anchor" href="#default-build"></a> default (build)</h2><p>build(构建)声明周期是maven的主要生命周期，主要用于构建应用。包括23个阶段，下面介绍常用的7种：</p><table><thead><tr><th>阶段</th><th>处理</th><th>描述</th></tr></thead><tbody><tr><td><strong>validate</strong></td><td>验证项目</td><td>验证项目是否正确且所有必须信息是可用的</td></tr><tr><td><strong>compile</strong></td><td>执行编译</td><td>源代码编译在此阶段完成</td></tr><tr><td><strong>test</strong></td><td>测试</td><td>使用适当的单元测试框架运行测试。</td></tr><tr><td><strong>package</strong></td><td>打包</td><td>将编译后的代码打包成需要的格式，比如JAR</td></tr><tr><td><strong>verify</strong></td><td>检查</td><td>对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td><strong>install</strong></td><td>安装</td><td>安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td><strong>deploy</strong></td><td>部署</td><td>将在最终的build环境上面完成，拷贝最终的工程包到远程仓库中，<br />以共享给其他开发人员和工程</td></tr></tbody></table><p><a name="yNTTU"></a></p><h2 id="site"><a class="markdownIt-Anchor" href="#site"></a> site</h2><p>Maven Site 插件一般用来创建新的报告文档、部署站点等。</p><table><thead><tr><th>阶段</th><th>处理</th></tr></thead><tbody><tr><td><strong>pre-site</strong></td><td>执行一些需要在生成站点文档之前完成的工作</td></tr><tr><td><strong>site</strong></td><td>生成项目的站点文档</td></tr><tr><td><strong>post-site</strong></td><td>执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</td></tr><tr><td><strong>site-deploy</strong></td><td>将生成的站点文档部署到特定的服务器上</td></tr></tbody></table><p>经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点。<br /><a name="QFp8N"></a></p><h1 id="依赖管理"><a class="markdownIt-Anchor" href="#依赖管理"></a> 依赖管理</h1><p>依赖范围：依赖范围scope用来控制依赖和编译，测试，运行的classpath的关系. 主要的是三种依赖关系如下：</p><ol><li>compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效</li><li>test：测试依赖范围。只对于测试classpath有效</li><li>provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api</li><li>runtime:运行时提供。例如:jdbc驱动<br /><a name="68qFj"></a></li></ol><h2 id="依赖传递"><a class="markdownIt-Anchor" href="#依赖传递"></a> 依赖传递：</h2><p>MakeFriends.jar直接依赖于HelloFriends.jar，而HelloFriends.jar又直接依赖于Hello.jar，那么MakeFriends.jar也依赖于Hello.jar，这就是传递性依赖，只不过这种依赖是间接依赖，如下图所示：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581768397395-bfc44790-87d8-4f4e-bca9-9781b32c4151.png#align=left&amp;display=inline&amp;height=148&amp;margin=%5Bobject%20Object%5D&amp;originHeight=148&amp;originWidth=663&amp;size=0&amp;status=done&amp;style=none&amp;width=663" alt="" /><br /><a name="1mxYa"></a></p><h1 id="聚合继承"><a class="markdownIt-Anchor" href="#聚合继承"></a> 聚合继承</h1><p>聚合主要为了快速构建项目，继承主要为了消除重复。如果我们想一次构建多个项目模块，那我们就需要对多个项目模块进行聚合。<br /><a name="RJtjN"></a></p><h2 id="聚合配置代码"><a class="markdownIt-Anchor" href="#聚合配置代码"></a> 聚合配置代码：</h2><p><modules><br />       <module>模块一</module><br />       <module>模块二</module><br />       <module>模块三</module><br /></modules><br /><a name="4rKgF"></a></p><h2 id="继承配置代码"><a class="markdownIt-Anchor" href="#继承配置代码"></a> 继承配置代码：</h2><p><parent>  <br />          <groupId>me.gacl.maven</groupId><br />          <artifactId>ParentProject</artifactId><br />          <version>0.0.1-SNAPSHOT</version><br />          <relativePath>…/ParentProject/pom.xml</relativePath>  <br /></parent><br />其中父模块用dependencyManagement管理依赖。<br />dependencyManagement是表示依赖jar包的声明，即你在项目中的dependencyManagement下声明了依赖，maven不会加载该依赖，dependencyManagement声明可以被继承。<br />dependencyManagement的一个使用案例是当有父子项目的时候，父项目中可以利用dependencyManagement声明子项目中需要用到的依赖jar包，之后，当某个或者某几个子项目需要加载该插件的时候，就可以在子项目中dependencies节点只配置 groupId 和 artifactId就可以完成插件的引用。<br />dependencyManagement主要是为了统一管理插件，确保所有子项目使用的插件版本保持一致，类似的还是plugins和pluginManagement。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Maven 是一个项目管理工具。它负责管理项目开发过程中的几乎所有的东西。&lt;br /&gt;版本、构建、输出物管理、依赖关系、文档和构建结果、项目关系、移植性管理。&lt;br /&gt;
&lt;a name=&quot;yso2z&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;maven的目录说明&quot;&gt;&lt;a cla</summary>
      
    
    
    
    <category term="maven" scheme="https://jie-blog.icu/categories/maven/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat流程</title>
    <link href="https://jie-blog.icu/posts/tomcat-1/"/>
    <id>https://jie-blog.icu/posts/tomcat-1/</id>
    <published>2020-09-05T09:48:07.000Z</published>
    <updated>2020-09-05T09:49:37.544Z</updated>
    
    <content type="html"><![CDATA[<p><a name="znuKs"></a></p><h1 id="tomcat启动流程"><a class="markdownIt-Anchor" href="#tomcat启动流程"></a> Tomcat启动流程</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110101041-2cb21736-11a5-498d-8cdf-71bd0e97a43c.webp#align=left&amp;display=inline&amp;height=165&amp;margin=%5Bobject%20Object%5D&amp;originHeight=227&amp;originWidth=1024&amp;size=0&amp;status=done&amp;style=none&amp;width=746" alt="" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581117189229-9c4fa4b9-e5ff-4eb6-b552-d2307c742ea2.png#align=left&amp;display=inline&amp;height=302&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=534&amp;originWidth=1319&amp;size=189938&amp;status=done&amp;style=none&amp;width=746" alt="image.png" /><br />步骤：</p><ol><li>启动tomcat，需要调用bin/startup.bat，在startup脚本中，调用了catalina.bat。</li><li>在catalina.bat文件中，调用了bootStrap中的main方法。</li><li>在main中调用了init方法，来创建Catalina及初始化类加载器。</li><li>在main中调用了load方法，其中又调用了Cataina的load方法。</li><li>在Catalina的load方法中，需要进行一些初始化的工作，并需要构造Digester对象，用于解析XML。</li><li>调用后续组件初始化操作。</li></ol><p>加载Tomcat配置文件，初始化容器组件，监听对应端口号，准备接收客户端请求。<br /><a name="8NiX2"></a></p><h1 id="请求处理流程"><a class="markdownIt-Anchor" href="#请求处理流程"></a> 请求处理流程</h1><p><a name="dNjyB"></a></p><h2 id="配置gradlebuild"><a class="markdownIt-Anchor" href="#配置gradlebuild"></a> 配置Gradle.build</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;war&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行jar任务时会在jar文件代码清单中加入Main-Class头</span></span><br><span class="line">jar &#123;<span class="comment">//Groovy的闭包委托特性</span></span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">&#x27;Main-Class&#x27;</span>: <span class="string">&#x27;com.shy.todo.ToDoApp&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置阿里源</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven&#123; url <span class="string">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;org.example&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    testCompile <span class="attr">group:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;junit&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;4.11&#x27;</span></span><br><span class="line"></span><br><span class="line">    compile <span class="attr">group:</span> <span class="string">&#x27;org.apache.tomcat&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;tomcat-catalina&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;9.0.30&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UTF-8</span></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = <span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有生成web.xml文件的解决方法：<br /><a href="https://www.jianshu.com/p/2bd34845df13">https://www.jianshu.com/p/2bd34845df13</a><br /><a name="JMihs"></a></p><h2 id="webxml配置如下"><a class="markdownIt-Anchor" href="#webxml配置如下"></a> web.xml配置如下：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DemoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo/findAll<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="oFOLn"></a></p><h2 id="tomcat测试"><a class="markdownIt-Anchor" href="#tomcat测试"></a> Tomcat测试：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581125741836-efd7c650-7759-4ca8-bf50-0c08b5c8489f.png#align=left&amp;display=inline&amp;height=71&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=142&amp;originWidth=1374&amp;size=35276&amp;status=done&amp;style=none&amp;width=687" alt="image.png" /><br />如图，成功执行。<br />那么他又是如何找到web.xml并调用类的呢？<br /><a name="VkFjj"></a></p><h2 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h2><p>结构如下<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581126651808-d0f4cf4c-6e11-42cb-8ba5-75553624bf8c.png#align=left&amp;display=inline&amp;height=192&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=384&amp;originWidth=1541&amp;size=32038&amp;status=done&amp;style=none&amp;width=770.5" alt="image.png" /><br />Mapper组件的功能就是将用户请求的URL定位到一个Servlet，它的工作原理是：<br />Mapper组件保存了Web应用的配置信息，其实就是容器组件与访问路径的映射关系，比如Host里配置域名、Context配置Web应用路径、Wrapper里配置Servlet映射的路径。<br /><br /><br />当请求到来时，Mapper组件通过解析请求的URL里的域名和路径，再到自己保存的Map里去查找，就能定位到一个Servlet，注意，一个URL只能定位到一个Wrapper容器，也就是Servlet。<br /><a name="DgabY"></a></p><h3 id="具体步骤"><a class="markdownIt-Anchor" href="#具体步骤"></a> 具体步骤：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581127465857-35c9cd02-3e05-4355-beff-b0bb70851e90.png#align=left&amp;display=inline&amp;height=246&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=319&amp;originWidth=968&amp;size=216555&amp;status=done&amp;style=none&amp;width=746" alt="image.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;znuKs&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;tomcat启动流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tomcat启动流程&quot;&gt;&lt;/a&gt; Tomcat启动流程&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://cd</summary>
      
    
    
    
    <category term="tomcat" scheme="https://jie-blog.icu/categories/tomcat/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat的安装配置与架构</title>
    <link href="https://jie-blog.icu/posts/tomcat-1/"/>
    <id>https://jie-blog.icu/posts/tomcat-1/</id>
    <published>2020-09-05T09:39:40.000Z</published>
    <updated>2020-09-05T09:47:04.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat的安装配置与架构"><a class="markdownIt-Anchor" href="#tomcat的安装配置与架构"></a> Tomcat的安装配置与架构</h1><p><a name="YkM2z"></a></p><h1 id="下载tomcat"><a class="markdownIt-Anchor" href="#下载tomcat"></a> 下载Tomcat</h1><p>访问官网<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581009121061-083a737f-2df3-44ef-9957-2f29a5f55a58.png#align=left&amp;display=inline&amp;height=29&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=29&amp;originWidth=290&amp;size=4188&amp;status=done&amp;style=none&amp;width=290" alt="image.png" /><br />下载8.5的版本。<br />在目录下找到startup.bat 双击启动tomcat<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581009895213-af787f36-0eee-43d8-aa89-66c628cc99a8.png#align=left&amp;display=inline&amp;height=96&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=96&amp;originWidth=636&amp;size=16636&amp;status=done&amp;style=none&amp;width=636" alt="image.png" /><br />注意，这里如果一闪而过需要编辑startup.bat 增加个pasue查看原因<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581011869467-8d6d4401-a548-4fed-aa6d-7b7f99fb1feb.png#align=left&amp;display=inline&amp;height=57&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=57&amp;originWidth=606&amp;size=3399&amp;status=done&amp;style=none&amp;width=606" alt="image.png" /><br />如图示没有配置JAVA_HOME或者JRE_HOME<br />运行成功界面:<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581012057941-7d293c8c-cce1-457a-ab18-d9c1499f2bc8.png#align=left&amp;display=inline&amp;height=567&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=567&amp;originWidth=1297&amp;size=58461&amp;status=done&amp;style=none&amp;width=1297" alt="image.png" /><br />访问8080：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581012100034-254eb3f7-f0e1-49f3-9fe5-b98b7c09997a.png#align=left&amp;display=inline&amp;height=922&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=922&amp;originWidth=1274&amp;size=158515&amp;status=done&amp;style=none&amp;width=1274" alt="image.png" /><br /><a name="8vml2"></a></p><h1 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量</h1><p>增加变量：<br />CATALINA_HOME、CATALINA_BASE<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581012904101-fcee7922-91a0-4498-b70b-67823cc7afa9.png#align=left&amp;display=inline&amp;height=50&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=50&amp;originWidth=465&amp;size=6133&amp;status=done&amp;style=none&amp;width=465" alt="image.png" /><br />配置Path：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581013294393-a45554dc-c566-49b0-abc0-a406ab7ad22b.png#align=left&amp;display=inline&amp;height=47&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=47&amp;originWidth=176&amp;size=1517&amp;status=done&amp;style=none&amp;width=176" alt="image.png" /><br />测试：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581013357375-0315a297-a208-4d53-a415-6a1ea0514e7d.png#align=left&amp;display=inline&amp;height=128&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=128&amp;originWidth=805&amp;size=10167&amp;status=done&amp;style=none&amp;width=805" alt="image.png" /><br />成功<br /><a name="jaJVO"></a></p><h1 id="配置idea环境"><a class="markdownIt-Anchor" href="#配置idea环境"></a> 配置IDEA环境</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581014585709-05e04199-5da9-4abe-a5f3-c0fa017225a9.png#align=left&amp;display=inline&amp;height=326&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=326&amp;originWidth=395&amp;size=24291&amp;status=done&amp;style=none&amp;width=395" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581017407980-1045a6fc-c809-4cb6-9cd7-70eb1e30fc8a.png#align=left&amp;display=inline&amp;height=721&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=721&amp;originWidth=1092&amp;size=82495&amp;status=done&amp;style=none&amp;width=1092" alt="image.png" /><br />问题出现：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581018131848-16311cdc-bccf-4dc1-8a87-291025469f60.png#align=left&amp;display=inline&amp;height=722&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=722&amp;originWidth=1092&amp;size=66880&amp;status=done&amp;style=none&amp;width=1092" alt="image.png" /><br />如何解决：<br />打开File–&gt;setting,选中圈出选项<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581018268047-6efdbb66-e1f4-47d1-810d-0b4bc395814e.png#align=left&amp;display=inline&amp;height=715&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=715&amp;originWidth=998&amp;size=88709&amp;status=done&amp;style=none&amp;width=998" alt="image.png" /><br />选择第二个<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581022740916-af1c3016-0301-42e9-8fc5-6a36f3c989a1.png#align=left&amp;display=inline&amp;height=718&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=718&amp;originWidth=1092&amp;size=48215&amp;status=done&amp;style=none&amp;width=1092" alt="image.png" /><br />配置完成<br /><a name="sFRw5"></a></p><h1 id="tomcat架构"><a class="markdownIt-Anchor" href="#tomcat架构"></a> Tomcat架构</h1><p>详见：<a href="https://blog.csdn.net/qq_26323323/article/details/84848305">https://blog.csdn.net/qq_26323323/article/details/84848305</a><br /><a href="https://www.jianshu.com/p/8d20e1a057b1">https://www.jianshu.com/p/8d20e1a057b1</a><br /><a href="https://blog.csdn.net/weixin_42146366/article/details/98043043">https://blog.csdn.net/weixin_42146366/article/details/98043043</a> <br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110208973-64d63ce0-c77e-4f2d-898f-515456d40e84.webp#align=left&amp;display=inline&amp;height=309&amp;margin=%5Bobject%20Object%5D&amp;originHeight=253&amp;originWidth=508&amp;size=0&amp;status=done&amp;style=none&amp;width=621" alt="" /><br />Service是由多个Connector和一个Container组成,架构如图。<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110320332-032e1eac-7afb-4748-bf19-1d97ce3e49ca.webp#align=left&amp;display=inline&amp;height=467&amp;margin=%5Bobject%20Object%5D&amp;originHeight=467&amp;originWidth=697&amp;size=0&amp;status=done&amp;style=none&amp;width=697" alt="" /><br />Server服务器负责维护它所包含的所有 Service 的生命周期，包括如何初始化、如何结束服务、如何找到别人要访问的 Service。<br />Service 是在 Connector 和 Container 外面多包一层，把它们组装在一起，向外面提供服务.<br /><a name="JTVLU"></a></p><h2 id="tomcat的核心功能"><a class="markdownIt-Anchor" href="#tomcat的核心功能"></a> Tomcat的核心功能</h2><ul><li>处理Socket连接，负责网络字节流与Request和Response对象的转化</li><li>加载和管理Servlet，以及具体处理Request请求</li></ul><p>因此Tomcat设计了两个核心组件：连接器(Connector)和容器(Contaioner)来分别做这两件事情，连接器负责对外交流，容器负责内部处理。<br /><a name="jBHws"></a></p><h2 id="连接器"><a class="markdownIt-Anchor" href="#连接器"></a> 连接器</h2><p>详见：<a href="https://blog.csdn.net/cwfjimogudan/article/details/54933988">https://blog.csdn.net/cwfjimogudan/article/details/54933988</a><br />Connector将在某个指定的端口上来监听客户的请求，把从socket传递过来的数据，封装成Request，传递给Engine来处理，并从Engine处获得响应并返回给客户。<br />Tomcat通常会用到两种Connector：</p><ul><li>Http Connector 在端口8080处侦听来自客户browser的http请求。 AJP Connector</li><li>在端口8009处侦听来自其它WebServer(Apache)的servlet/jsp代理请求。</li></ul><p><a name="pBo1b"></a></p><h2 id="容器"><a class="markdownIt-Anchor" href="#容器"></a> 容器</h2><p>详见：<a href="https://www.jianshu.com/p/32809479c62c">https://www.jianshu.com/p/32809479c62c</a><br />定义了下属的各种容器，重要的是Wrapper、Host、Engine、Context等。<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110458106-4f4353b9-4174-4efe-a516-3cf97162ff4e.webp#align=left&amp;display=inline&amp;height=451&amp;margin=%5Bobject%20Object%5D&amp;originHeight=451&amp;originWidth=694&amp;size=0&amp;status=done&amp;style=none&amp;width=694" alt="" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581110478531-ad86a9a0-a2a5-46c6-825c-86ea9cda3260.webp#align=left&amp;display=inline&amp;height=379&amp;margin=%5Bobject%20Object%5D&amp;originHeight=379&amp;originWidth=792&amp;size=0&amp;status=done&amp;style=none&amp;width=792" alt="" /><br /><a name="PAvbX"></a></p><h3 id="engine"><a class="markdownIt-Anchor" href="#engine"></a> Engine</h3><p>负责处理来自相关联的service的所有请求，处理后，将结果返回给service，而connector是作为service与engine的中间媒介出现的。<br />一个engine下可以配置一个默认主机，每个虚拟主机都有一个域名。当engine获得一个请求时，它把该请求匹配到虚拟主机(host)上，然后把请求交给该主机来处理。<br />Engine有一个默认主机，当请求无法匹配到任何一个虚拟主机时，将交给默认host来处理。Engine以线程的方式启动Host。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581112332415-8863b33b-9d42-43a0-b3dc-f13f7e9bb867.png#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;originHeight=564&amp;originWidth=586&amp;size=0&amp;status=done&amp;style=none&amp;width=586" alt="" /><br /><a name="host"></a></p><h3 id="host"><a class="markdownIt-Anchor" href="#host"></a> Host</h3><p>代表一个虚拟主机，每个虚拟主机和某个网络域名（Domain Name）相匹配。<br />每个虚拟主机下都可以部署一个或多个web应用，每个web应用对应于一个context，有一个context path。<br />当Host获得一个请求时，将把该请求匹配到某个Context上，然后把该请求交给该Context来处理匹配的方法是“最长匹配”，所以一个path==””的Context将成为该Host的默认Context所有无法和其它Context的路径名匹配的请求都将最终和该默认Context匹配。<br /><a name="context"></a></p><h3 id="context"><a class="markdownIt-Anchor" href="#context"></a> Context</h3><p>一个Context对应于一个Web应用，一个Web应用由一个或者多个Servlet组成Context在创建的时候将根据配置文件$ CATALINA_HOME/conf/web.xml和$ WEBAPP_HOME/WEB-INF/web.xml载入Servlet类。当Context获得请求时，将在自己的映射表(mapping table)中寻找相匹配的Servlet类，如果找到，则执行该类，获得请求的回应，并返回。<br /><a name="mKVPV"></a></p><h3 id="wrapper"><a class="markdownIt-Anchor" href="#wrapper"></a> Wrapper</h3><p>Wrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。<br />Wrapper 的实现类是 StandardWrapper，StandardWrapper 还实现了拥有一个 Servlet 初始化信息的 ServletConfig，由此看出 StandardWrapper 将直接和 Servlet 的各种信息打交道。<br /><a name="LGQos"></a></p><h2 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h2><p>当服务器启动的时候，tomcat需要去调用servlet的init方法和初始化容器等一系列操作，而停止的时候，也需要调用servlet的destory方法。而这些都是通过org.apache.catalina.Lifecycle接口来实现的。由这个类来制定各个组件生命周期的规范。<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581113984388-74c98b31-12f3-4fb3-b16d-7d94892670d1.png#align=left&amp;display=inline&amp;height=574&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=726&amp;originWidth=856&amp;size=151369&amp;status=done&amp;style=none&amp;width=677" alt="image.png" /><br />继承图谱：<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581119611784-978f4a52-c5d9-4e7e-b9f8-1d89a1ea815f.webp#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;originHeight=564&amp;originWidth=586&amp;size=0&amp;status=done&amp;style=none&amp;width=586" alt="" /><br />接口方法：<br /><img src="https://cdn.nlark.com/yuque/0/2020/webp/485026/1581119636040-b0dee15c-9c67-4521-8f5c-2fa0381a36b6.webp#align=left&amp;display=inline&amp;height=485&amp;margin=%5Bobject%20Object%5D&amp;originHeight=485&amp;originWidth=600&amp;size=0&amp;status=done&amp;style=none&amp;width=600" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;tomcat的安装配置与架构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tomcat的安装配置与架构&quot;&gt;&lt;/a&gt; Tomcat的安装配置与架构&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;YkM2z&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;下载t</summary>
      
    
    
    
    <category term="tomcat" scheme="https://jie-blog.icu/categories/tomcat/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="web基础" scheme="https://jie-blog.icu/tags/web%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Maven的安装</title>
    <link href="https://jie-blog.icu/posts/maven-config/"/>
    <id>https://jie-blog.icu/posts/maven-config/</id>
    <published>2020-09-05T09:21:17.000Z</published>
    <updated>2020-09-05T09:47:20.681Z</updated>
    
    <content type="html"><![CDATA[<p><a name="CDPwW"></a></p><h1 id="开发出现的问题"><a class="markdownIt-Anchor" href="#开发出现的问题"></a> 开发出现的问题</h1><ol><li>一个项目就是一个工程，如果项目过于庞大，就不适合继续使用package来划分模块。</li><li>项目中需要jar包必须手动“复制”、“粘贴”到WEB-INF/lib目录下，同样的jar包重复初见在不同的项目工程中，浪费存储空间也让工程变得臃肿。</li><li>jar包需要提前准备好，或者官网下载。</li><li>一个jar包依赖的其他jar包需要手动添加到项目中。</li></ol><p>然而Maven就能完美地解决这些问题，同样之前学习的Gradle也能解决。<br /><a name="EwiXV"></a></p><h1 id="安装配置maven"><a class="markdownIt-Anchor" href="#安装配置maven"></a> 安装配置Maven</h1><p>访问官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a><br /><a name="7jFAs"></a></p><h2 id="下载文件"><a class="markdownIt-Anchor" href="#下载文件"></a> 下载文件</h2><p>下载如下文件：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581732596504-98878054-f5a1-4a1e-9da3-1951e1f4b2dc.png#align=left&amp;display=inline&amp;height=199&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=199&amp;originWidth=1396&amp;size=29739&amp;status=done&amp;style=none&amp;width=1396" alt="image.png" /><br />解压后创建一个仓库：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581732767609-7f8fa67f-6394-4e5e-bdbb-f5112e5f4398.png#align=left&amp;display=inline&amp;height=46&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=46&amp;originWidth=738&amp;size=5138&amp;status=done&amp;style=none&amp;width=738" alt="image.png" /><br /><a name="Vv4Wh"></a></p><h2 id="配置maven"><a class="markdownIt-Anchor" href="#配置maven"></a> 配置Maven</h2><p><a name="V5eju"></a></p><h3 id="配置本地仓库"><a class="markdownIt-Anchor" href="#配置本地仓库"></a> 配置本地仓库：</h3><p>编译文件setting.xml（…\conf）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;settings xmlns=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span> </span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;pluginGroups /&gt;</span><br><span class="line">    &lt;proxies /&gt;</span><br><span class="line">    &lt;servers /&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;localRepository&gt;D:\LocalMavenSpace&lt;/localRepository&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">            &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;<span class="attr">http:</span><span class="comment">//maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">    &lt;/mirrors&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><p><a name="5up6L"></a></p><h3 id="配置环境变量"><a class="markdownIt-Anchor" href="#配置环境变量"></a> 配置环境变量：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733288476-d34100e4-dce1-49f6-9f3f-00ce818c719d.png#align=left&amp;display=inline&amp;height=154&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=190&amp;originWidth=667&amp;size=10353&amp;status=done&amp;style=none&amp;width=539" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733349861-d211c5bd-3f9d-4eb4-8561-4596f9050084.png#align=left&amp;display=inline&amp;height=570&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=570&amp;originWidth=541&amp;size=38862&amp;status=done&amp;style=none&amp;width=541" alt="image.png" /><br /><a name="UWlOs"></a></p><h4 id="检查配置结果"><a class="markdownIt-Anchor" href="#检查配置结果"></a> 检查配置结果：</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733389679-9183a426-ecc3-4905-b6aa-e47397bf541b.png#align=left&amp;display=inline&amp;height=119&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=119&amp;originWidth=606&amp;size=6915&amp;status=done&amp;style=none&amp;width=606" alt="image.png" /><br /><a name="BNvXw"></a></p><h2 id="配置idea"><a class="markdownIt-Anchor" href="#配置idea"></a> 配置IDEA：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581733832543-991af46f-fffc-4d86-b5bb-066aea19a95a.png#align=left&amp;display=inline&amp;height=715&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=715&amp;originWidth=998&amp;size=75985&amp;status=done&amp;style=none&amp;width=998" alt="image.png" /><br /><a name="SYv3d"></a></p><h1 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581734271450-ff7aae3e-bd72-48ed-b5db-61c48046b7a8.png#align=left&amp;display=inline&amp;height=750&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=750&amp;originWidth=1251&amp;size=125957&amp;status=done&amp;style=none&amp;width=1251" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581734400301-1267129e-77a4-4902-bfa9-d845826f004f.png#align=left&amp;display=inline&amp;height=750&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=750&amp;originWidth=1251&amp;size=46506&amp;status=done&amp;style=none&amp;width=1251" alt="image.png" /><br />等待自动配置完成：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581740820315-26e154f2-2a2f-44c9-af2c-9f64d01d776c.png#align=left&amp;display=inline&amp;height=255&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=255&amp;originWidth=402&amp;size=11931&amp;status=done&amp;style=none&amp;width=402" alt="image.png" /><br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581753381592-7413b89a-b912-4c7a-9966-e28d4b49d373.png#align=left&amp;display=inline&amp;height=334&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=334&amp;originWidth=693&amp;size=32788&amp;status=done&amp;style=none&amp;width=693" alt="image.png" /><br />完成创建<br /></p><h1 id="maven与gradle"><a class="markdownIt-Anchor" href="#maven与gradle"></a> Maven与Gradle</h1><p>maven界面：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581842897537-3ff55ab5-badb-40cb-813f-60d68c50d77d.png#align=left&amp;display=inline&amp;height=524&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1048&amp;originWidth=1920&amp;size=164560&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /><br />gradle界面：<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1581842906283-33cc36fc-89d9-41fb-ad7e-fce11eb70e2b.png#align=left&amp;display=inline&amp;height=524&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1048&amp;originWidth=1920&amp;size=161861&amp;status=done&amp;style=none&amp;width=960" alt="image.png" /><br />相比Maven的繁文缛节，我更喜欢Gradle，而且Gradle的gradle.build比起Maven的pom.xml是简洁了无数倍，因此我更倾向gradle。<br />详细对比请见：<a href="https://blog.csdn.net/weixin_38405253/article/details/90598666">https://blog.csdn.net/weixin_38405253/article/details/90598666</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;CDPwW&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;开发出现的问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#开发出现的问题&quot;&gt;&lt;/a&gt; 开发出现的问题&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;一个项目就是一个工程，如果项目过于庞大，就不适</summary>
      
    
    
    
    <category term="maven" scheme="https://jie-blog.icu/categories/maven/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="环境搭建" scheme="https://jie-blog.icu/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>光速入门XML</title>
    <link href="https://jie-blog.icu/posts/xml/"/>
    <id>https://jie-blog.icu/posts/xml/</id>
    <published>2020-09-05T09:14:06.000Z</published>
    <updated>2020-09-05T09:18:29.315Z</updated>
    
    <content type="html"><![CDATA[<p><a name="yql4v"></a></p><h1 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> XML</h1><p>xml是可扩展标识语言，就是开发者在符合xml命名规则的基础之上，可以根据自己的需求定义自己的标签。<br /><a name="dcJ0R"></a></p><h2 id="xml文件的作用"><a class="markdownIt-Anchor" href="#xml文件的作用"></a> XML文件的作用</h2><p>主要用来存储数据<br /><a name="42cSH"></a></p><h2 id="xml文件解析的方法"><a class="markdownIt-Anchor" href="#xml文件解析的方法"></a> XML文件解析的方法</h2><p>DOM、DOM4J、SAX<br /><a name="TB6iY"></a></p><h1 id="dom4j解析xml演示"><a class="markdownIt-Anchor" href="#dom4j解析xml演示"></a> DOM4J解析XML演示</h1><p><a name="zr7jI"></a></p><h2 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h2><p><a name="OGTzW"></a></p><h3 id="配置gradle"><a class="markdownIt-Anchor" href="#配置gradle"></a> 配置Gradle</h3><p>项目中在src/main/java目录中放置了xml或其他配置文件，需要把它复制到jar包中，并可以在ide中调试运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;java&#39;</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    from(&#39;src&#x2F;main&#x2F;java&#39;)&#123;</span><br><span class="line">        include &#39;**&#x2F;*.xml&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置解决了生存jar包时xml配置文件复制的问题，可是没有解决开发环境调试的问题。<br /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java&#123;</span><br><span class="line">            srcDir &#39;src&#x2F;main&#x2F;java&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir &#39;srcsrc&#x2F;main&#x2F;resources&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，resources目录下的文件也会复制到build/resource目录下，而且，不需要前面的jar中的from配置，jar包中也会存在配置文件。<br /><a name="70RAo"></a></p><h3 id="引入jar包"><a class="markdownIt-Anchor" href="#引入jar包"></a> 引入JAR包</h3><p>gradle配置如下：<br /><strong>&quot;org.dom4j:dom4j:2.1.1&quot;</strong><br /><a name="tXCg2"></a></p><h3 id="创建xml文件"><a class="markdownIt-Anchor" href="#创建xml文件"></a> 创建XML文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>XX大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>YY大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>654321<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>ZZ大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>987654<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="0SO9U"></a></p><h2 id="代码测试"><a class="markdownIt-Anchor" href="#代码测试"></a> 代码测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dom4jTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建解析器</span></span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过解析器将配置文件读到内存中，生成一个Document[org.dom4j]对象树</span></span><br><span class="line">            Document document = saxReader.read(<span class="string">&quot;conf/students.xml&quot;</span>);</span><br><span class="line">            <span class="comment">//获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//开始遍历根节点</span></span><br><span class="line">            Iterator&lt;Element&gt; iterator = root.elementIterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                Element student = iterator.next();</span><br><span class="line">                Iterator&lt;Element&gt; innerIterator = student.elementIterator();</span><br><span class="line">                <span class="keyword">while</span> (innerIterator.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                        Element element = innerIterator.next();</span><br><span class="line">                        System.out.println(element.getStringValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="RIjiu"></a></p><h2 id="结果演示"><a class="markdownIt-Anchor" href="#结果演示"></a> 结果演示</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1580763515251-0449cc31-0f00-42eb-ba3a-34ed9d988eb2.png#align=left&amp;display=inline&amp;height=248&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=248&amp;originWidth=360&amp;size=7862&amp;status=done&amp;style=none&amp;width=360" alt="image.png" /><br /><a name="D9gPk"></a></p><h1 id="sax解析xml演示"><a class="markdownIt-Anchor" href="#sax解析xml演示"></a> SAX解析XML演示</h1><p><a name="qj5XV"></a></p><h2 id="解析原理"><a class="markdownIt-Anchor" href="#解析原理"></a> 解析原理</h2><p>事件驱动，边读边写<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/485026/1580767650035-b8415da6-f92c-4996-9fd0-e11c0c80dd93.png#align=left&amp;display=inline&amp;height=683&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=683&amp;originWidth=1243&amp;size=482346&amp;status=done&amp;style=none&amp;width=1243" alt="image.png" /><br /><a name="l9gkC"></a></p><h2 id="代码测试-2"><a class="markdownIt-Anchor" href="#代码测试-2"></a> 代码测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaxTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建解析工厂</span></span><br><span class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建解析器</span></span><br><span class="line">            SAXParser saxParser = factory.newSAXParser();</span><br><span class="line">            <span class="comment">//通过解析器的parse方法</span></span><br><span class="line">            saxParser.parse(<span class="string">&quot;conf/students.xml&quot;</span>, <span class="keyword">new</span> MyDefaultHandler());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException | SAXException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDefaultHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&quot;</span> + qName + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&quot;</span> + qName + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(ch, start, length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="U2279"></a></p><h1 id="xpath解析xml演示"><a class="markdownIt-Anchor" href="#xpath解析xml演示"></a> XPath解析XML演示</h1><p>XPath使用路径表达式来选取XML文档中的节点或节点集，节点是通过沿着路经（path）或步（steps）来选取的。<br /><a href="https://www.w3school.com.cn/xpath/index.asp">https://www.w3school.com.cn/xpath/index.asp</a><br /><a name="6bAzW"></a></p><h2 id="环境配置-2"><a class="markdownIt-Anchor" href="#环境配置-2"></a> 环境配置</h2><p><a name="iHOpY"></a></p><h3 id="引入jar包-2"><a class="markdownIt-Anchor" href="#引入jar包-2"></a> 引入jar包</h3><p><strong>&quot;jaxen:jaxen:1.2.0&quot;</strong><br /><a name="L7pyL"></a></p><h3 id="配置xml"><a class="markdownIt-Anchor" href="#配置xml"></a> 配置XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">database-info</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">driver_name</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver_name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;9999&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">database-info</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="pkV1g"></a></p><h2 id="代码测试-3"><a class="markdownIt-Anchor" href="#代码测试-3"></a> 代码测试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class SysConfigParser &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建解析器</span><br><span class="line">        SAXReader reader=new SAXReader();</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过解析器的Read方法将配置文件读取到内存中，生成一个Document【org.dom4j】</span><br><span class="line">            Document document=reader.read(&quot;conf/sys_config.xml&quot;);</span><br><span class="line">            //diver-name节点元素的路径：config-&gt;database-info-&gt;driver_name</span><br><span class="line">            //driver-name节点元素的xpath路径：/config/database-info/driver_name</span><br><span class="line">            Element driverNameElt= (Element) document.selectSingleNode(&quot;/config/database-info/driver_name&quot;);</span><br><span class="line">            //获取driverNameElt节点元素对象的文本内容</span><br><span class="line">            String name=driverNameElt.getStringValue();</span><br><span class="line">            System.out.println(name);</span><br><span class="line"></span><br><span class="line">            //password元素节点路径 config-&gt;database-info-&gt;password</span><br><span class="line">            //driver-name节点元素的xpath路径：/config/database-info/password</span><br><span class="line">            //url节点元素的xpath路径：/config//password</span><br><span class="line">            //url节点元素的xpath路径：//password</span><br><span class="line">            Element driverPasswordElt= (Element) document.selectSingleNode(&quot;//password&quot;);</span><br><span class="line">            String password=driverPasswordElt.getStringValue();</span><br><span class="line">            System.out.println(password);</span><br><span class="line"></span><br><span class="line">            //connector节点元素对象的路径:config-&gt;database-info-&gt;connector</span><br><span class="line">            //获取connector节点元素对象的xpath路径：/config/database-info/connector</span><br><span class="line">            //获取connector节点元素对象的xpath路径：/config//connector</span><br><span class="line">            //获取connector节点元素对象的xpath路径：//connector</span><br><span class="line">            Element driverConnectorElt= (Element) document.selectSingleNode(&quot;//connector&quot;);</span><br><span class="line"></span><br><span class="line">            //获取属性对象</span><br><span class="line">            //方法一</span><br><span class="line">            String port=driverConnectorElt.attribute(&quot;port&quot;).getStringValue();</span><br><span class="line">            //方法二</span><br><span class="line">            String port2=driverConnectorElt.attributeValue(&quot;port&quot;);</span><br><span class="line">            System.out.println(port2);</span><br><span class="line"></span><br><span class="line">        &#125; catch (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="euMLo"></a></p><h1 id="dom4jxpath解析xml文件"><a class="markdownIt-Anchor" href="#dom4jxpath解析xml文件"></a> Dom4j+XPath解析XML文件</h1><p><a name="U3EQK"></a></p><h2 id="xml文件"><a class="markdownIt-Anchor" href="#xml文件"></a> XML文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>XX大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;9999&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>YY大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>654321<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collage</span>&gt;</span>ZZ大学<span class="tag">&lt;/<span class="name">collage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">telephone</span>&gt;</span>987654<span class="tag">&lt;/<span class="name">telephone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;7777&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">connector</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="dALcb"></a></p><h2 id="代码测试-4"><a class="markdownIt-Anchor" href="#代码测试-4"></a> 代码测试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class MixTest &#123;</span><br><span class="line">    public static void main(String[] args) throws SAXException &#123;</span><br><span class="line">        //创建解析工厂</span><br><span class="line">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        try &#123;</span><br><span class="line">            //创建解析器</span><br><span class="line">            DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">            //通过解析器来读取配置文件，生成一个对象树</span><br><span class="line">            Document document = builder.parse(&quot;conf/students.xml&quot;);</span><br><span class="line">            //创建Xpath对象</span><br><span class="line">            XPath xPath = XPathFactory.newInstance().newXPath();</span><br><span class="line"></span><br><span class="line">            //获取ID为3的名字</span><br><span class="line">            String titleXPath = &quot;/students/student[@id=&#x27;3&#x27;]/name&quot;;</span><br><span class="line">            String res = (String) xPath.evaluate(titleXPath, document, XPathConstants.STRING);</span><br><span class="line">            System.out.println(res);</span><br><span class="line"></span><br><span class="line">            //获取所有Student节点下的Name集合</span><br><span class="line">            NodeList list = (NodeList) xPath.evaluate(&quot;/students/student&quot;, document, XPathConstants.NODESET);</span><br><span class="line">            //遍历</span><br><span class="line">            for (int i = 0; i <span class="tag">&lt; <span class="attr">list.getLength</span>(); <span class="attr">i</span>++) &#123;</span></span><br><span class="line"><span class="tag">                <span class="attr">Element</span> <span class="attr">element</span> = <span class="string">(Element)</span> <span class="attr">list.item</span>(<span class="attr">i</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">String</span> <span class="attr">name</span> = <span class="string">(String)</span> <span class="attr">xPath.evaluate</span>(&quot;<span class="attr">name</span>&quot;, <span class="attr">element</span>, <span class="attr">XPathConstants.STRING</span>);</span></span><br><span class="line"><span class="tag">                <span class="attr">System.out.println</span>(<span class="attr">name</span>);</span></span><br><span class="line"><span class="tag">            &#125;</span></span><br><span class="line"><span class="tag">        &#125; <span class="attr">catch</span> (<span class="attr">ParserConfigurationException</span> | <span class="attr">IOException</span> | <span class="attr">XPathExpressionException</span> <span class="attr">e</span>) &#123;</span></span><br><span class="line"><span class="tag">            <span class="attr">e.printStackTrace</span>();</span></span><br><span class="line"><span class="tag">        &#125;</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;yql4v&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;xml&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#xml&quot;&gt;&lt;/a&gt; XML&lt;/h1&gt;
&lt;p&gt;xml是可扩展标识语言，就是开发者在符合xml命名规则的基础之上，可以根据自己的需</summary>
      
    
    
    
    <category term="零散知识" scheme="https://jie-blog.icu/categories/%E9%9B%B6%E6%95%A3%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="后端基础" scheme="https://jie-blog.icu/tags/%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="数据交互" scheme="https://jie-blog.icu/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
    <category term="零碎知识点" scheme="https://jie-blog.icu/tags/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
</feed>
